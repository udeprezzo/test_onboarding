var lastEventRightClicked = '',
    contextShown = false,
    xDateFormat,
    designatedWorkFields = [],
    schedulerDate = "2014-10-13";

var daysResources = [{key: "Monday", label: "Monday"},
    {key: "Tuesday", label: "Tuesday"},
    {key: "Wednesday", label: "Wednesday"},
    {key: "Thursday", label: "Thursday"},
    {key: "Friday", label: "Friday"},
    {key: "Saturday", label: "Saturday"},
    {key: "Sunday", label: "Sunday"}
];


function init() {

    if (isTwelveHours) {
        xDateFormat = " %g:%i%A";
    }
    else {
        xDateFormat = "%G:%i";
    }

    if (!startOnMonday)
        daysResources.unshift(daysResources.pop());

    // set locale
    moment.locale(userLocale);

    initScheduler();
}

function initScheduler() {

    scheduler.createTimelineView({
        name: "timeline",
        x_unit: "minute",
        x_date: xDateFormat,
        x_step: 60,
        x_size: 24,
        x_start: 0,
        x_length: 60,
        y_unit: daysResources,
        dy: 47,
        dx: 100,
        event_dy: 42,
        y_property: "section_id",
        render: "bar",
        section_autoheight: false
    });

    scheduler.config.readonly_form = true;
    scheduler.config.dblclick_create = false;
    scheduler.config.mark_now = false;
    scheduler.config.collision_limit = 1;
    scheduler.init('scheduler_here', new Date(2014, 9, 13), "timeline");
    drawCalender(calender);

}


function getDesignatedWorkFields() {
    var promise = new Promise(function (resolve, reject) {

        Visualforce.remoting.Manager.invokeAction(
             remoteActions.getDesignatedWorkFields,
             function(result,event) {
                if(event.status && result != null){
                    resolve(result);
                }
                else {
                    reject(Error('failed to get Picklist Fields :('));
                }

             },{ buffer: false, escape: true, timeout: 120000  }

        );
    });

    return promise;
}

// draw calendar
function drawCalender(calendar) {

    var daysArray = [], timeSlot;

    if (!calendar[fieldNames.OperatingHours.TimeSlots]) {
        return;
    }

    for (var i = 0; i < calendar[fieldNames.OperatingHours.TimeSlots].records.length; i++) {

        // set current calendar
        timeSlot = calendar[fieldNames.OperatingHours.TimeSlots].records[i];

        // push interval to array.
        daysArray.push(parseSlot(timeSlot));
    }

    // draw event on scheduler.
    scheduler.parse(daysArray, "json");
}

function parseSlot(timeSlot) {

    //scheduler fields
        timeSlot.section_id= timeSlot[fieldNames.TimeSlot.DayOfWeek];
        timeSlot.start_date= createDate(schedulerDate, timeSlot[fieldNames.TimeSlot.StartTime].split(':')[0], timeSlot[fieldNames.TimeSlot.StartTime].split(':')[1], false);
        timeSlot.end_date  = createDate(schedulerDate, timeSlot[fieldNames.TimeSlot.EndTime].split(':')[0], timeSlot[fieldNames.TimeSlot.EndTime].split(':')[1], true);

    return timeSlot;
}

function saveCalenderClick() {

    var operatingHours = [];

    for (var key in scheduler._events) {

        var slot = scheduler._events[key];
        var timeSlot = {};

        for (var s in slot) {
            timeSlot[s] = slot[s];
        }

        delete timeSlot.id;
        delete timeSlot.Id;

        timeSlot[fieldNames.TimeSlot.DayOfWeek] = slot.section_id;
        timeSlot[fieldNames.TimeSlot.EndTime] = createTimeObj(slot.end_date.getHours(), slot.end_date.getMinutes());
        timeSlot[fieldNames.TimeSlot.StartTime] = createTimeObj(slot.start_date.getHours(), slot.start_date.getMinutes());
        timeSlot[fieldNames.TimeSlot.OperatingHours] = calender.Id;

        operatingHours.push(timeSlot);
    }

    // Action function salseforce
    saveCalendar(JSON.stringify(operatingHours));

}

function createTimeObj(hours, minutes) {
    return hours*60*60*1000 + minutes*60*1000;
}

function refreshPage(calendarId) {
    if (isInCommunity) {
        var communityPath = parent.location.pathname.split('/');
        communityPath[communityPath.length - 1] = calendarId;
        communityPath = communityPath.join('/');

        parent.location = communityPath;
    }
    else if (sforce !== undefined && sforce.console.isInConsole()) {
        getFocusedSubtabId();
    }
    else {
        parent.location = '/' + calendarId;
    }
}

function getFocusedSubtabId() {
    sforce.console.getFocusedSubtabId(refreshByTabId);
}
var refreshByTabId = function showTabId(result) {
    //refresh the page by tab Id
    sforce.console.refreshSubtabById(result.id);
};


//convert hours/minunues to valid string for the server
//If the time is less than 10 adds zero before(e.g from 1 to 01)
function convertToValidTime(time) {

    if (time < 10) {
        return "0" + time;
    }
    return time;

}

function createDate(date, hours, min, isEnd) {
    var x = new Date();
    var timezoneOffset = x.getTimezoneOffset() * 60 * 1000;
    x = new Date(date).getTime() + timezoneOffset;
    var dateObj = new Date(x);
    dateObj.setHours(hours);
    dateObj.setMinutes(min);

    if (isEnd && hours == 0 & min == 0) {
        dateObj.setDate(dateObj.getDate() + 1);
    }

    return dateObj;
}


//------------------Timeline View -----------//

var dragged_event = null;

scheduler.attachEvent("onBeforeEventChanged", function(ev, e, is_new, original){
    for (var key in scheduler._events) {

        var schedulerEvent = scheduler._events[key];
        if (ev.id !== schedulerEvent.id && ev.section_id === schedulerEvent.section_id && isIntersect(schedulerEvent.start_date, schedulerEvent.end_date, ev.start_date, ev.end_date)) {

            // check for complete cover
            if (ev.start_date >= schedulerEvent.start_date && ev.end_date <= schedulerEvent.end_date) {
                return false;
            }

            if (ev.start_date <= schedulerEvent.start_date && ev.end_date > schedulerEvent.end_date) {
                return false;
            }
        }
    }

    return true;
});

scheduler.attachEvent("onBeforeDrag", function (id, mode, e){

    if (id) {
        dragged_event=scheduler.getEvent(id);
    }

    return true;
});

scheduler.attachEvent("onEventCreated", function(id,e){
    dragged_event=scheduler.getEvent(id);
    dragged_event.justCreated = true;
});

scheduler.attachEvent("onDragEnd", function (){

    var ev = dragged_event;

    if (!ev)
        return true;

    //cover the case where pasting after midnight
    if (ev.end_date > scheduler.getState().max_date) {
        ev.end_date = new Date(scheduler.getState().max_date);
    }


    for (var key in scheduler._events) {

        var schedulerEvent = scheduler._events[key];
        if (ev.id !== schedulerEvent.id && ev.section_id === schedulerEvent.section_id && isIntersect(schedulerEvent.start_date,schedulerEvent.end_date, ev.start_date, ev.end_date)) {

            // check for complete cover
            if (ev.start_date >= schedulerEvent.start_date && ev.end_date <= schedulerEvent.end_date) {
                delete scheduler._events[ev.id];
                break;
            }

            if (ev.start_date <= schedulerEvent.start_date && ev.end_date > schedulerEvent.end_date) {
                delete scheduler._events[ev.id];
                break;
            }


            // snap
            var lengthInMs = ev.end_date - ev.start_date;

            if (ev.start_date < schedulerEvent.start_date && ev.end_date < schedulerEvent.end_date && schedulerEvent.start_date < ev.end_date) {
                ev.end_date = schedulerEvent.start_date;

                if (!ev.justCreated) {
                    if (ev.start_date.getHours() != 0 && ev.start_date.getMinutes() != 0) {
                        ev.start_date = new Date(ev.end_date);
                        ev.start_date.setMilliseconds(ev.start_date.getMilliseconds() - lengthInMs);
                    }
                } else {
                    ev.justCreated = false;
                }
            }

            if (ev.start_date < schedulerEvent.end_date && ev.start_date > schedulerEvent.start_date && schedulerEvent.end_date < ev.end_date) {
                ev.start_date = schedulerEvent.end_date;

                if (!ev.justCreated) {
                    ev.end_date = new Date(ev.start_date);
                    ev.end_date.setMilliseconds(ev.end_date.getMilliseconds() + lengthInMs);
                } else {
                    ev.justCreated = false;
                }
            }
        }
    }

    setTimeout(function() {
        scheduler.updateView();
    }, 0);

    return true;
});

scheduler.attachEvent("onBeforeEventChanged", function (ev, e, is_new) {




    var minDate = scheduler.getState().min_date,
        maxDate = scheduler.getState().max_date;

    if (ev.start_date < minDate) {
        ev.start_date = new Date(minDate);
    }

    if (ev.end_date > maxDate) {
        ev.end_date = new Date(maxDate);
    }

    if (!ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c])
        ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] = null;

    return true;

});

scheduler.attachEvent("onEventCopied", function(ev) {
    $('.clipboard-explained-txt').text('Timeslot - ' + 
        moment(ev.start_date).format('LT') + " - " +
        moment(ev.end_date).format('LT'));

    scheduler.updateEvent(ev.id);
});

scheduler.attachEvent("onEventPasted", function(isCopy, pasted_ev, original_ev) {
    scheduler.callEvent("onDragEnd");
});


scheduler.templates.tooltip_text = function (start, end, event) {

    // show only if context menu is hidden
    if (contextShown)
        return false;

    var tooltip = '';

    tooltip += moment(start).format('LT') + " - " + moment(end).format('LT');
    tooltip += event[fieldNames.TimeSlot.Type] != null ? ' (' + event[fieldNames.TimeSlot.Type] + ')' : '';
    tooltip += '<br/>';

    if (event[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c]) {
        var allDesString = '', allDesArray = event[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c].split(';'); 

        for (var i = 0; i<allDesArray.length; i++) {
            allDesString += designatedWorkFields[allDesArray[i]] ? designatedWorkFields[allDesArray[i]]+ ', ' : allDesArray[i]+', ';
        }
        allDesString = allDesString.substring(0, allDesString.length - 2);
    }
    tooltip += event[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] ? 'Designated Work: ' + allDesString : '';

    return tooltip;

}


scheduler.templates.event_bar_text = function (start, end, ev) {
    var designatedIcon = ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] ? "<i class='fa fa-certificate designatedIcon'></i>" : '';

    return "<div>" + designatedIcon +
        "<i class='fa fa-times' onclick = deleteEvent(" + ev.id + ")></i> <span class='times'>" +
        moment(start).format('LT') + " - " +
        moment(end).format('LT') + "</span></div>";
}

// set class for services
scheduler.templates.event_class = function (start, end, ev) {
    if (ev[fieldNames.TimeSlot.Slot_Color__c]) 
        return 'slot-' + ev[fieldNames.TimeSlot.Slot_Color__c];
    
    if (ev[fieldNames.TimeSlot.Type] == 'Normal' || !ev[fieldNames.TimeSlot.Type])
        return 'working';
    if (ev[fieldNames.TimeSlot.Type] == "Extended")
        return 'optional';
};

//function for disable ligthbox. overiding the scheduler
scheduler.showLightbox = function (id) {};

//delete event from calnder.
function deleteEvent(eventId) {
    scheduler.deleteEvent(eventId);
}

var isCopy = false;
var copyDate, copySection, pasteSection = null;
function copyTimeSlot(ev) {
    scheduler._buffer_id = ev.id;
    isCopy = true;
    scheduler.callEvent("onEventCopied", [ev]);
}

function pasteTimeSlot() {
    var ev = scheduler.getEvent(scheduler._buffer_id);
    if (ev) {
        var event_duration = ev.end_date-ev.start_date;
        if (isCopy) {
             var new_ev = scheduler._lame_clone(ev);
             new_ev.id = scheduler.uid();
             new_ev.start_date = new Date(copyDate);
             new_ev.end_date = new Date(new_ev.start_date.valueOf() + event_duration);

            if (pasteSection) {
                var a = scheduler.getState().mode, d = null;
                scheduler.matrix[a] ? d = scheduler.matrix[a].y_property : scheduler._props[a] && (d = scheduler._props[a].property), new_ev[d] = pasteSection;
            }
             scheduler.addEvent(new_ev);
             scheduler.callEvent("onEventPasted", [isCopy, new_ev, ev]);
        }
    }
}

function copyToNextDay(ev) {
    if (ev) {
        var event_duration = ev.end_date-ev.start_date;
        var new_ev = scheduler._lame_clone(ev);
        
        new_ev.id = scheduler.uid();
        if (copySection) {
            var mode = scheduler.getState().mode;
            var y_prop = scheduler.matrix[mode].y_property;

            for (var i=0; i<scheduler.matrix[mode].y_unit.length; i++) {
                if (scheduler.matrix[mode].y_unit[i].key == copySection) {
                    new_ev[y_prop] = scheduler.matrix[mode].y_unit[(i+1)%7].key;
                    break;
                }
            }
        }

        scheduler.addEvent(new_ev);
        dragged_event = new_ev;
        scheduler.callEvent("onDragEnd");


        scheduler.updateView();
    }
}


//--------------------------------------------//


//------------------Week View -------------------///
// overide the title of dhtmlx.
scheduler.templates.week_date = function() { return ""; };
scheduler.templates.event_text = function() { return ""; };


$(function () {

    var dayContextMenu = new dhtmlXMenuObject({
        parent: "contextZone_A",
        context: true,
        iconset:'awesome'
    });

    dayContextMenu.setOverflowHeight(10);

    dayContextMenu.addNewChild(dayContextMenu.topId, 0, "working", customLabels.Normal, false, 'fa fa-briefcase', 'fa fa-briefcase');
    dayContextMenu.addNewChild(dayContextMenu.topId, 1, "optional", customLabels.Extended, false, 'fa fa-clock-o', 'fa fa-clock-o');
    dayContextMenu.addNewChild(dayContextMenu.topId, 3, 'designate', customLabels.DesignateWork + "<i class='fa fa-caret-right des-work-carret'></i>", false, 'fa fa-certificate', 'fa fa-certificate');
    dayContextMenu.addNewChild(dayContextMenu.topId, 3, 'color', customLabels.Time_Slot_Color + "<i class='fa fa-caret-right des-work-carret'></i>", false, 'fa fa-paint-brush', 'fa fa-paint-brush');
    dayContextMenu.addNewChild(dayContextMenu.topId, 4, "copy", customLabels.Copy, false, 'fa fa-copy', 'fa fa-copy');
    dayContextMenu.addNewChild(dayContextMenu.topId, 5, "nextDay", customLabels.Copy_to_next_day, false, 'fa fa-arrow-down', 'fa fa-arrow-down');
    dayContextMenu.addNewChild(dayContextMenu.topId, 0, "paste", customLabels.Paste, false, 'fa fa-paste', 'fa fa-paste');

    getDesignatedWorkFields().then(function (resultList) {
        designatedWorkFields = resultList;
    });

    function isCheckOnDesignated(des) {
        var ev = scheduler.getEvent(lastEventRightClicked);
        return ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] && ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c].split(';').indexOf(des) > -1;
    }

    function updateContextMenuDesignatedWork() {
        dayContextMenu.removeItem('designate');
        dayContextMenu.addNewChild(dayContextMenu.topId, 3, 'designate', customLabels.DesignateWork + "<i class='fa fa-caret-right des-work-carret'></i>", false, 'fa fa-certificate', 'fa fa-certificate');

        menuItemsIdsToDesWork = {};

        var i=0;
        for (var key in designatedWorkFields) {
            if (designatedWorkFields[key] == 'None')
                continue;

            var isChecked = isCheckOnDesignated(key);
            dayContextMenu.addCheckbox('child','designate',i,'designate_work_' + designatedWorkFields[key], designatedWorkFields[key], isChecked, false);

            menuItemsIdsToDesWork['designate_work_' + designatedWorkFields[key]] = key;
            i++;
        }
    }

    function addColorsMenu() {
        var colors = ['Red', 'Pink', 'Purple', 'Indigo', 'Blue', 'Cyan', 'Teal', 'Green', 'Lime', 'Yellow', 'Amber', 'Orange', 'Brown', 'Grey', 'Asphalt', 'Black'];

        dayContextMenu.removeItem('color');
        dayContextMenu.addNewChild(dayContextMenu.topId, 3, 'color', customLabels.Time_Slot_Color + "<i class='fa fa-caret-right des-work-carret'></i>", false, 'fa fa-paint-brush', 'fa fa-paint-brush');

        var colorSelected = scheduler.getEvent(lastEventRightClicked)[fieldNames.TimeSlot.Slot_Color__c];
        dayContextMenu.addRadioButton('child','color', 0, customLabels.Default, '<span class="colorbox slot-Default"></span>' + customLabels.Default, 'SlotColors', !colorSelected, false);

        for (var i=0; i<colors.length; i++) {
            var isSelected = colorSelected == colors[i] ? true : false;
            dayContextMenu.addRadioButton('child','color', i+1, colors[i], '<span class="colorbox slot-' + colors[i] + '"></span>' + colors[i] , 'SlotColors', isSelected, false);
        }
    }


    dayContextMenu.attachEvent("onClick", function (id, zoneId, cas) {

        switch (id) {

            case 'working':
                scheduler.getEvent(lastEventRightClicked)[fieldNames.TimeSlot.Type] = 'Normal';
                scheduler.updateEvent(lastEventRightClicked);
                break;

            case 'optional':
                scheduler.getEvent(lastEventRightClicked)[fieldNames.TimeSlot.Type] = 'Extended';
                scheduler.updateEvent(lastEventRightClicked);
                break;

            case 'copy':
                copyTimeSlot(scheduler.getEvent(lastEventRightClicked));
                break;

            case 'paste':   
                pasteTimeSlot();
                break;

            case 'nextDay':
                copyToNextDay(scheduler.getEvent(lastEventRightClicked));
                break;

            default:
        }

    });

    dayContextMenu.attachEvent("onCheckboxClick", function(id, state, zoneId, cas){
        addDesignatedWork(scheduler.getEvent(lastEventRightClicked), menuItemsIdsToDesWork[id]);
        return true;
    });

    dayContextMenu.attachEvent("onRadioClick", function(group, idChecked, idClicked, zoneId, cas){
        var ev = scheduler.getEvent(lastEventRightClicked);
        ev[fieldNames.TimeSlot.Slot_Color__c] = idClicked == customLabels.Default ? null : idClicked;

        scheduler.updateView();
        // allow radio button to be checked
        return true;
    });

    dayContextMenu.attachEvent("onShow", function (id) {
        contextShown = true;
    });

    dayContextMenu.attachEvent("onHide", function (id) {

        contextShown = false;
    });

    scheduler.attachEvent("onContextMenu", function (event_id, native_event_object) {
        copyDate = scheduler.getActionData(native_event_object).date;
        scheduler.dhtmlXTooltip.hide();

        var posx = 0;
        var posy = 0;

        if (native_event_object.pageX || native_event_object.pageY) {
            posx = native_event_object.pageX;
            posy = native_event_object.pageY;

        } else if (native_event_object.clientX || native_event_object.clientY) {
            posx = native_event_object.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            posy = native_event_object.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }

        if (event_id) {
            copySection = scheduler.getActionData(native_event_object).section;

            dayContextMenu.showItem("working");
            dayContextMenu.showItem("optional");
            dayContextMenu.showItem("designate");
            dayContextMenu.showItem("color");
            dayContextMenu.showItem("copy");
            dayContextMenu.showItem("nextDay");
            dayContextMenu.hideItem("paste");
            dayContextMenu.showContextMenu(posx, posy);
            lastEventRightClicked = event_id;

            updateContextMenuDesignatedWork();
            addColorsMenu();

            return false; // prevent default action and propagation

        }
        else if (isCopy){
            pasteSection = scheduler.getActionData(native_event_object).section;

            dayContextMenu.hideItem("working");
            dayContextMenu.hideItem("optional");
            dayContextMenu.hideItem("copy");
            dayContextMenu.hideItem("nextDay");
            dayContextMenu.hideItem("designate");
            dayContextMenu.hideItem("color");
            dayContextMenu.showItem("paste");
            dayContextMenu.showContextMenu(posx, posy);
            lastEventRightClicked = '';
            return false; // prevent default action and propagation
        }

        lastEventRightClicked = '';

        return true;
    });


    dhtmlxEvent(scheduler._obj, "mouseleave", function (e) {
        if (scheduler.getState().drag_id) {
            scheduler._on_mouse_up(e);
            window.getSelection().removeAllRanges();    // clear text selection on IE
        }
    });

});

function addDesignatedWork(ev, item) {
    if (!ev || !item)
        return;

    var existingDesignated = ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] ? ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c].split(';') : [];
    var options = {};

    if (!existingDesignated) {
        existingDesignated = [];
    }

    for (var i = 0; i < existingDesignated.length; i++) {
        options[existingDesignated[i]] = true;
    }

    //remove if exists
    if (options[item])
        delete options[item];
    else
        options[item] = true;

    ev[fieldNames.TimeSlot.Designated_Work_Boolean_Fields__c] = Object.keys(options).join(';');

    scheduler.updateView();
}

function isIntersect(a_start, a_end, b_start, b_end) {
    return (a_start < b_end && a_end > b_start);
}






