"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++){s(r[o]);}return s;})({1:[function(require,module,exports){'use strict';var AccountModel=require('../models/AccountModel.js');var IdToValueCache=require('../common/IdToValueCache.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var cacheManager=require('qtc-js-utils').cacheManager;var CACHE_NAME='AccountCache';var AccountDAO=function(_BaseDAO){_inherits(AccountDAO,_BaseDAO);function AccountDAO(conn,settings){_classCallCheck(this,AccountDAO);var _this=_possibleConstructorReturn(this,(AccountDAO.__proto__||Object.getPrototypeOf(AccountDAO)).call(this,conn));_this._settings=settings;_this._prefix=settings.salesCloudPrefix;_this._cache=cacheManager.getCache(CACHE_NAME,IdToValueCache);return _this;}_createClass(AccountDAO,[{key:"getAccountsByIds",value:function getAccountsByIds(accIds){var _this2=this;var idsWithoutCachedRecord=accIds.filter(function(id){return!_this2._cache.has(id);});var queryPromise=idsWithoutCachedRecord.length?this._queryAndCacheAccounts(accIds):Promise.resolve();return queryPromise.then(function(){var accountsById=new IdToValueCache();accIds.forEach(function(id){if(_this2._cache.has(id)){accountsById.set(id,_this2._cache.get(id));}});return accountsById;}).catch(function(err){var errPrefix=_this2._settings.labels.msg_amendrenew_err_loading_accs;return Promise.reject(errPrefix+(err.message||err));});}},{key:"_queryAndCacheAccounts",value:function _queryAndCacheAccounts(accIds){var _this3=this;var accFields=Array.from(new Set(AccountModel.getFields(this._prefix)));var whereClause="Id IN ('"+accIds.join("', '")+"')";return this._constructAndPerformQuery('Account',accFields,whereClause).then(function(accounts){accounts.forEach(function(acc){_this3._cache.set(acc.Id,acc);});});}}]);return AccountDAO;}(BaseDAO);module.exports=AccountDAO;},{"../common/IdToValueCache.js":18,"../models/AccountModel.js":26,"./BaseDAO.js":2,"qtc-js-utils":57}],2:[function(require,module,exports){var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var WhereClauseSplitter=require('./WhereClauseSplitter.js');var BaseSubqueryDescriptor=function(){function BaseSubqueryDescriptor(){_classCallCheck(this,BaseSubqueryDescriptor);}_createClass(BaseSubqueryDescriptor,[{key:"addSubqueriesToQuery",value:function addSubqueriesToQuery(query){throw Error('Error: BaseSubqueryDescriptor.addSubqueriesToQuery() should be overridden by child classes and never invoked directly.');}}]);return BaseSubqueryDescriptor;}();var BaseDAO=function(){function BaseDAO(conn){_classCallCheck(this,BaseDAO);this._conn=conn;this._QUERY_LENGTH_LIMIT=15000;this._WHERE_CLAUSE_LENGTH_LIMIT=3800;this._logger=jsLogger;}_createClass(BaseDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"_logWarning",value:function _logWarning(msg){this._logger.warn(msg);}},{key:"_constructSelectClauseAndCalculateRemainingLength",value:function _constructSelectClauseAndCalculateRemainingLength(selectedFields){var totalQueryLength=0;var selectClause=selectedFields.join(', ');totalQueryLength+=selectClause.length;var charsUntilLimitReached=this._QUERY_LENGTH_LIMIT-totalQueryLength;if(charsUntilLimitReached<18){throw Error('SELECT clause length exceeded safe threshold of 15,000 characters.');}var maxLengthForWhereClause=charsUntilLimitReached<this._WHERE_CLAUSE_LENGTH_LIMIT?charsUntilLimitReached:this._WHERE_CLAUSE_LENGTH_LIMIT;return{selectClause:selectClause,maxWhereLength:maxLengthForWhereClause};}},{key:"_constructAndPerformQuery",value:function _constructAndPerformQuery(objectType,selectedFields,fullWhereClause,subqueryDescriptor,orderbyArray){var _this4=this;var selectDescriptor=this._constructSelectClauseAndCalculateRemainingLength(selectedFields);var selectClause=selectDescriptor.selectClause;var whereSplitDescriptor=new WhereClauseSplitter().splitWhereClause(fullWhereClause,selectDescriptor.maxWhereLength);var partialWhereClauses=whereSplitDescriptor.clauses;var querySpecificityPreserved=whereSplitDescriptor.specificityPreserved;var queryPromises=[];partialWhereClauses.forEach(function(partialWhereClause){var query=_this4._conn.sobject(objectType).select(selectClause).where(partialWhereClause);if(subqueryDescriptor){subqueryDescriptor.addSubqueriesToQuery(query);}if(orderbyArray){query.orderby(orderbyArray[0],orderbyArray[1]);}queryPromises.push(query.execute({autoFetch:true,maxFetch:Number.POSITIVE_INFINITY}));});return Promise.all(queryPromises).then(function(queryResultsArrays){var results=[];var idSet=new Set();queryResultsArrays.forEach(function(queryResults){queryResults.forEach(function(record){if(!querySpecificityPreserved){throw Error('ERROR: Currently incapable of merging non-selective queries');}if(!idSet.has(record.Id)){results.push(record);}});});return results;});}},{key:"_constructAndPerformOrQuery",value:function _constructAndPerformOrQuery(objectType,selectedFields,clauses,subqueryDescriptor,orderbyArray){var _this5=this;var selectDescriptor=this._constructSelectClauseAndCalculateRemainingLength(selectedFields);var selectClause=selectDescriptor.selectClause;var maxWhereLength=selectDescriptor.maxWhereLength;var orClauseArrays=[];var currentOrLength=-4;var currentOrArray=[];orClauseArrays.push(currentOrArray);var i=0;while(i<clauses.length){var clause=clauses[i];if(clause.length>maxWhereLength){throw Error('Could not shrink WHERE clause below safe threshold of '+maxWhereLength);}var clauseFitsInCurrentGroup=clause.length+6+currentOrLength<=maxWhereLength;if(!clauseFitsInCurrentGroup){currentOrArray=[];orClauseArrays.push(currentOrArray);currentOrLength=-4;}currentOrArray.push(clause);currentOrLength+=clause.length+6;i++;}var queryPromises=[];orClauseArrays.forEach(function(orArray){var query=_this5._conn.sobject(objectType).select(selectClause).where('('+orArray.join(') OR (')+')');if(subqueryDescriptor){subqueryDescriptor.addSubqueriesToQuery(query);}if(orderbyArray){query.orderby(orderbyArray[0],orderbyArray[1]);}queryPromises.push(query.execute({autoFetch:true,maxFetch:Number.POSITIVE_INFINITY}));});this._logMessage('BASEDAO.js: JSForce query to get '+objectType+'s.');var queryStartTime=Date.now();return Promise.all(queryPromises).then(function(queryResultsArrays){_this5._logMessage('BASEDAO.js: JSForce query  to get '+objectType+'s took '+(Date.now()-queryStartTime)+' ms.');if(queryResultsArrays.length===1){return queryResultsArrays[0];}else{var queryResults=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=queryResultsArrays[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var queryResultsArray=_step.value;queryResults=queryResults.concat(queryResultsArray);}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return queryResults;}});}},{key:"_constructAndPerformInQuery",value:function _constructAndPerformInQuery(objectType,selectedFields,filteredIdField,filteredIds,subqueryDescriptor,orderbyArray){var _this6=this;var selectDescriptor=this._constructSelectClauseAndCalculateRemainingLength(selectedFields);var selectClause=selectDescriptor.selectClause;var maxWhereLength=selectDescriptor.maxWhereLength;var idsPerQuery=Math.floor(maxWhereLength/18);var queryPromises=[];var idCount=filteredIds.length;for(var i=0;i<idCount;i+=idsPerQuery){var whereClause=filteredIdField+" IN ('"+filteredIds.slice(i,i+idsPerQuery).join("', '")+"')";var query=this._conn.sobject(objectType).select(selectClause).where(whereClause);if(subqueryDescriptor){subqueryDescriptor.addSubqueriesToQuery(query);}if(orderbyArray){query.orderby(orderbyArray[0],orderbyArray[1]);}queryPromises.push(query.execute({autoFetch:true,maxFetch:Number.POSITIVE_INFINITY}));var soqlToExecute='SELECT '+selectClause+' FROM '+objectType+' WHERE '+whereClause;if(orderbyArray){soqlToExecute.concat(' ORDER BY '+orderbyArray[0]+' '+orderbyArray[1]);}}this._logMessage('BASEDAO.js: JSForce query to get '+objectType+'s.');var queryStartTime=Date.now();return Promise.all(queryPromises).then(function(queryResultsArrays){_this6._logMessage('BASEDAO.js: JSForce query  to get '+objectType+'s took '+(Date.now()-queryStartTime)+' ms.');if(queryResultsArrays.length===1){return queryResultsArrays[0];}else{var queryResults=[];var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=queryResultsArrays[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var queryResultsArray=_step2.value;queryResults=queryResults.concat(queryResultsArray);}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return queryResults;}});}}]);return BaseDAO;}();module.exports.BaseSubqueryDescriptor=BaseSubqueryDescriptor;module.exports.BaseDAO=BaseDAO;},{"./WhereClauseSplitter.js":10,"js-logger":38}],3:[function(require,module,exports){'use strict';var ContractModel=require('../models/ContractModel.js');var IdToValueCache=require('../common/IdToValueCache.js');var QuoteModel=require('../models/QuoteModel.js');var DataChangeTrackerInvoker=require('../cleaners/DataChangeTrackerInvoker.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var cacheManager=require('qtc-js-utils').cacheManager;var CACHE_NAME='ContractCache';var ContractDAO=function(_BaseDAO2){_inherits(ContractDAO,_BaseDAO2);function ContractDAO(conn,settings,services){_classCallCheck(this,ContractDAO);var _this7=_possibleConstructorReturn(this,(ContractDAO.__proto__||Object.getPrototypeOf(ContractDAO)).call(this,conn));_this7._settings=settings;_this7._fieldMetadataService=services.fieldMetadataService;_this7._cache=cacheManager.getCache(CACHE_NAME,IdToValueCache);var restResourcePrefix=_this7._settings.prefix===''?'':'/SBQQ';_this7._serviceRouterUrl=restResourcePrefix+'/ServiceRouter';_this7._contractSaveProvider='ContractServiceProvider.SaveContractRecords';_this7._logger=jsLogger;return _this7;}_createClass(ContractDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"loadContractsByIds",value:function loadContractsByIds(contractIds){var _this8=this;var idsWithoutCachedRecord=contractIds.filter(function(id){return!_this8._cache.has(id);});var queryPromise=idsWithoutCachedRecord.length?this._queryAndCacheContracts(idsWithoutCachedRecord):Promise.resolve();return queryPromise.then(function(){var contractsById=new IdToValueCache();contractIds.forEach(function(id){if(_this8._cache.has(id)){contractsById.set(id,_this8._cache.get(id));}});return contractsById;}).catch(function(err){var errPrefix=_this8._settings.labels.msg_amendrenew_err_loading_contracts;return Promise.reject(errPrefix+(err.message||err));});}},{key:"_queryAndCacheContracts",value:function _queryAndCacheContracts(contractIds){var _this9=this;var contractIdsArray=JSON.stringify(contractIds);var contractType=ContractModel.getSObjectType(this._settings.isServiceCloudEnabled);var getSelectedContractFieldsStartTime=Date.now();var constructAndPerformQueryStartTime=void 0;this._logMessage('ContractDAO.js: Get Selected Contract Fields. Contracts='+contractIdsArray+' SessionId='+this._settings.userId);return this._getSelectedContractFields().then(function(selectedFields){_this9._logMessage('ContractDAO.js: Getting Selected Contract Fields took '+(Date.now()-getSelectedContractFieldsStartTime)+' ms. Contracts='+contractIdsArray+' SessionId='+_this9._settings.userId);_this9._logMessage('ContractDAO.js: Construct and perform query. Contracts='+contractIdsArray+' SessionId='+_this9._settings.userId);var whereClause="Id IN ('"+contractIds.join("', '")+"')";constructAndPerformQueryStartTime=Date.now();return _this9._constructAndPerformQuery(contractType,selectedFields,whereClause);}).then(function(contracts){_this9._logMessage('ContractDAO.js: Constructing and performing query took '+(Date.now()-constructAndPerformQueryStartTime)+' ms. Contracts='+contractIdsArray+' SessionId='+_this9._settings.userId);contracts.forEach(function(contract){_this9._cache.set(contract.Id,contract);});var storedContracts=JSON.parse(JSON.stringify(contracts));storedContracts.forEach(function(c){delete c[_this9._settings.prefix+'Quote__r'];});DataChangeTrackerInvoker.storeChangedRecords(storedContracts);});}},{key:"_getSelectedContractFields",value:function _getSelectedContractFields(){var _this10=this;var contractFields=new Set(ContractModel.getFields(this._settings));var contractType=ContractModel.getSObjectType(this._settings.isServiceCloudEnabled);var contractPrefix=this._settings.prefix;var getFieldDescribeStartTime=void 0;var getContractMagicFieldsStartTime=void 0;var getQuoteMagicFieldsStartTime=void 0;this._logMessage('ContractDAO.js: Get mappable fields for Contract. SessionId='+this._settings.userId);var getMappableFieldsStartTime=Date.now();return this._fieldMetadataService.getMappableFields(contractType).then(function(mappableFields){_this10._logMessage('ContractDAO.js: Getting mappable fields for Contract took '+(Date.now()-getMappableFieldsStartTime)+' ms. SessionId='+_this10._settings.userId);mappableFields.fieldArray.forEach(function(mappableField){contractFields.add(mappableField.name);});_this10._logMessage('ContractDAO.js: Get field describe for Contract.AmendmendmentBehavior__c. SessionId='+_this10._settings.userId);getFieldDescribeStartTime=Date.now();return _this10._fieldMetadataService.getFieldDescribe(contractType,contractPrefix+'AmendmentRenewalBehavior__c');}).then(function(renAmendDescribe){_this10._logMessage('ContractDAO.js: Getting field describe for Contract.AmendmentBehavior__c took '+(Date.now()-getFieldDescribeStartTime)+' ms. SessionId='+_this10._settings.userId);var potentialFieldNames=renAmendDescribe.picklistValues.map(function(valueDesc){return valueDesc.value;});_this10._logMessage('ContractDAO.js: Get contract magic fields. SessionId='+_this10._settings.userId);getContractMagicFieldsStartTime=Date.now();return _this10._fieldMetadataService.checkExistenceOfFields(contractType,potentialFieldNames);}).then(function(contractMagicFields){_this10._logMessage('ContractDAO.js: Getting contract magic fields took '+(Date.now()-getContractMagicFieldsStartTime)+' ms. SessionId='+_this10._settings.userId);Object.keys(contractMagicFields).forEach(function(magicFieldReference){if(contractMagicFields[magicFieldReference]){contractFields.add(contractMagicFields[magicFieldReference]);}});var quoteType=_this10._settings.salesCloudPrefix+'Quote__c';_this10._logMessage('ContractDAO.js: Get quote magic fields. SessionId='+_this10._settings.userId);getQuoteMagicFieldsStartTime=Date.now();return _this10._fieldMetadataService.checkExistenceOfFields(quoteType,QuoteModel.getMagicFields());}).then(function(quoteMagicFields){_this10._logMessage('ContractDAO.js: Getting quote magic fields took '+(Date.now()-getQuoteMagicFieldsStartTime)+' ms. SessionId='+_this10._settings.userId);var quoteRelationship=contractPrefix+'Quote__r.';Object.keys(quoteMagicFields).forEach(function(magicFieldReference){if(quoteMagicFields[magicFieldReference]){contractFields.add(quoteRelationship+quoteMagicFields[magicFieldReference]);}});return Array.from(contractFields);});}},{key:"updateRecords",value:function updateRecords(contracts){var _this11=this;this._logMessage('ContractDAO.js: Check if contract is updateable. SessionId='+this._settings.userId);var saveRecordsStartTime=void 0;var checkIfContractIsUpdateableStartTime=Date.now();return this._fieldMetadataService.isObjectUpdateable(ContractModel.getSObjectType(this._settings.isServiceCloudEnabled)).then(function(isContractUpdateable){_this11._logMessage('ContractDAO.js: Checking if contract is updateable took '+(Date.now()-checkIfContractIsUpdateableStartTime)+' ms. SessionId='+_this11._settings.userId);if(!isContractUpdateable){var noCrudError=_this11._settings.labels.msg_no_object_crud.replace('{0}','update').replace('{1}',ContractModel.getSObjectType(_this11._settings.isServiceCloudEnabled));return Promise.reject(noCrudError);}contracts.forEach(function(contract){delete contract[_this11._settings.prefix+'Quote__r'];});_this11._logMessage('ContractDAO.js: Save contract records. SessionId='+_this11._settings.userId);saveRecordsStartTime=Date.now();return _this11._saveRecords(_this11._contractSaveProvider,contracts,_this11._settings.labels.msg_amendrenew_err_saving_contracts);}).then(function(saveResults){_this11._logMessage('ContractDAO.js: Saving contract records took '+(Date.now()-checkIfContractIsUpdateableStartTime)+' ms. SessionId='+_this11._settings.userId);return saveResults;});}},{key:"_saveRecords",value:function _saveRecords(saveProvider,records,errMsgHeader){var _this12=this;var index=0;var batchSize=200;var saveRecordsPromise=[];this._logMessage('ContractDAO.js: APEX Rest API Call Out ('+saveProvider+'). SessionId='+this._settings.userId);var apexRestCallOutStartTime=Date.now();for(index;index<records.length;index=index+batchSize){saveRecordsPromise.push(this._conn.apex.post(this._serviceRouterUrl,{saver:saveProvider,model:JSON.stringify(records.slice(index,index+batchSize))}).then(function(res){return res.toLowerCase()==='success'?res:JSON.parse(res);},function(err){var msg=err.message||err;return Promise.reject(errMsgHeader+msg);}));}return Promise.all(saveRecordsPromise).then(function(saveResults){_this12._logMessage('OpportunityDAO.js: APEX Rest API Call Out ('+saveProvider+') took '+(Date.now()-apexRestCallOutStartTime)+' ms. SessionId='+_this12._settings.userId);return saveResults;});}}]);return ContractDAO;}(BaseDAO);module.exports=ContractDAO;},{"../cleaners/DataChangeTrackerInvoker.js":17,"../common/IdToValueCache.js":18,"../models/ContractModel.js":27,"../models/QuoteModel.js":29,"./BaseDAO.js":2,"js-logger":38,"qtc-js-utils":57}],4:[function(require,module,exports){'use strict';module.exports.properlyPrefixFields=function(prefix,fieldList){return fieldList.map(function(field){return field.endsWith('__c')?prefix+field:field;});};},{}],5:[function(require,module,exports){'use strict';var ContractModel=require('../models/ContractModel.js');var DataChangeTrackerInvoker=require('../cleaners/DataChangeTrackerInvoker.js');var OpportunityModel=require('../models/OpportunityModel.js');var IdToValueCache=require('../common/IdToValueCache.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var cacheManager=require('qtc-js-utils').cacheManager;var CACHE_NAME='OpportunityCache';var OpportunityDAO=function(_BaseDAO3){_inherits(OpportunityDAO,_BaseDAO3);function OpportunityDAO(conn,settings,services){_classCallCheck(this,OpportunityDAO);var _this13=_possibleConstructorReturn(this,(OpportunityDAO.__proto__||Object.getPrototypeOf(OpportunityDAO)).call(this,conn));_this13._settings=settings;_this13._fieldMetadataService=services.fieldMetadataService;_this13._hasRecordTypeField=null;_this13._cache=cacheManager.getCache(CACHE_NAME);var restResourcePrefix=_this13._settings.prefix===''?'':'/SBQQ';_this13._serviceRouterUrl=restResourcePrefix+'/ServiceRouter';_this13._opportunitySaveProvider='OpportunityServiceProvider.SaveOpportunityRecords';_this13._logger=jsLogger;return _this13;}_createClass(OpportunityDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"createOpportunityRecord",value:function createOpportunityRecord(opptyModel){var _this14=this;var errMsgHeader=this._settings.labels.msg_amendrenew_err_creating_oppty;var jsForceStartTime=Date.now();this._logMessage('OpportunityDAO.js: JSForce call to create opportunity record. SessionId='+this._settings.userId);return this._conn.sobject("Opportunity").create(opptyModel.getOpportunity()).then(function(result){_this14._logMessage('OpportunityDAO.js: JSForce call to create opportunity record took '+(Date.now()-jsForceStartTime)+' ms. SessionId='+_this14._settings.userId);if(result.success&&!result.error){opptyModel.Id=result.id;DataChangeTrackerInvoker.storeCreatedRecordIds([result.id],'Opportunity');return opptyModel;}else if(!result.success&&result.error){return Promise.reject(errMsgHeader+result.error);}},function(err){return Promise.reject(errMsgHeader+(err.message||err));});}},{key:"getOppStage1MasterLabel",value:function getOppStage1MasterLabel(){var _this15=this;if(this._cache.has('oppStageMasterLabels')){return Promise.resolve(this._cache.get('oppStageMasterLabels')[0].MasterLabel);}var jsForceStartTime=Date.now();this._logMessage('OpportunityDAO.js: JSForce query to get opportunity Stage 1 Master Label. SOQL to Execute - SELECT MasterLabel FROM OpportunityStage WHERE IsActive = true ORDER BY SortOrder. SessionId='+this._settings.userId);return this._conn.sobject('OpportunityStage').select('MasterLabel').where('IsActive = true').orderby('SortOrder').execute({autoFetch:true,maxFetch:Number.POSITIVE_INFINITY}).then(function(oppStageMasterLabels){_this15._logMessage('OpportunityDAO: JSForce query to get opportunity Stage 1 Master Label took '+(Date.now()-jsForceStartTime)+' ms. SessionId='+_this15._settings.userId);return oppStageMasterLabels[0].MasterLabel;});}},{key:"isCreateable",value:function isCreateable(){return this._getOppDescribe().then(function(oppDescribe){return oppDescribe.createable;});}},{key:"hasRecordTypeField",value:function hasRecordTypeField(){var _this16=this;if(this._hasRecordTypeField!=null){return Promise.resolve(this._hasRecordTypeField);}var recTypeFieldFound=false;return this._retrieveFields().then(function(fields){for(var i=0;i<fields.length;i++){if(fields[i].fullName==='RecordTypeId'){recTypeFieldFound=true;break;}}_this16._hasRecordTypeField=recTypeFieldFound;return recTypeFieldFound;});}},{key:"_retrieveFields",value:function _retrieveFields(){return this._getOppDescribe().then(function(oppDescribe){return oppDescribe.fields;});}},{key:"_getOppDescribe",value:function _getOppDescribe(){var _this17=this;if(this._cache.has('oppDescribe')){return Promise.resolve(this._cache.get('oppDescribe'));}else{var jsForceStartTime=Date.now();this._logMessage('OpportunityDAO.js: JSForce call for object describe on Opportunity. SessionId='+this._settings.userId);return this._conn.describe('Opportunity').then(function(describeResult){_this17._logMessage('OpportunityDAO.js: JSForce call for object describe on Opportunity took '+(Date.now()-jsForceStartTime)+' ms. SessionId='+_this17._settings.userId);_this17._cache.set('oppDescribe',describeResult);return describeResult;});}}},{key:"mapCustomFields",value:function mapCustomFields(contract,opportunity){return this._fieldMetadataService.getSharedMappableFieldNames(ContractModel.getSObjectType(this._settings.isServiceCloudEnabled),'Opportunity').then(function(srcMappedFields){srcMappedFields.forEach(function(field){opportunity[field]=contract[field];return Promise.resolve();});});}},{key:"updateRecords",value:function updateRecords(opportunities){var _this18=this;this._logMessage('OpportunityDAO.js: Check if opportunity object is updateable. SessionId='+this._settings.userId);var checkIfOppUpdateable=Date.now();return this._fieldMetadataService.isObjectUpdateable('Opportunity').then(function(isOpportunityUpdateable){_this18._logMessage('OpportunityDAO.js: Checking if opportunity object is updateable took '+(Date.now()-checkIfOppUpdateable)+' ms. SessionId='+_this18._settings.userId);if(!isOpportunityUpdateable){var noCrudError=_this18._settings.labels.msg_no_object_crud.replace('{0}','update').replace('{1}','Opportunity');return Promise.reject(noCrudError);}return _this18._saveRecords(_this18._opportunitySaveProvider,opportunities,_this18._settings.labels.msg_amendrenew_err_saving_opps);});}},{key:"_saveRecords",value:function _saveRecords(saveProvider,records,errMsgHeader){var _this19=this;var index=0;var batchSize=200;var saveRecordsPromise=[];this._logMessage('OpportunityDAO.js: APEX Rest API Call Out ('+saveProvider+'). SessionId='+this._settings.userId);var apexRestCallOutStartTime=Date.now();for(index;index<records.length;index=index+batchSize){saveRecordsPromise.push(this._conn.apex.post(this._serviceRouterUrl,{saver:saveProvider,model:JSON.stringify(records.slice(index,index+batchSize))}).then(function(res){return res.toLowerCase()==='success'?res:JSON.parse(res);},function(err){var msg=err.message||err;return Promise.reject(errMsgHeader+msg);}));}return Promise.all(saveRecordsPromise).then(function(saveResults){_this19._logMessage('OpportunityDAO.js: APEX Rest API Call Out ('+saveProvider+') took '+(Date.now()-apexRestCallOutStartTime)+' ms. SessionId='+_this19._settings.userId);return saveResults;});}},{key:"loadOppsByIds",value:function loadOppsByIds(oppIds){var _this20=this;var idsWithoutCachedRecord=oppIds.filter(function(id){return!_this20._cache.has(id);});var queryPromise=idsWithoutCachedRecord.length?this._queryAndCacheOpps(idsWithoutCachedRecord):Promise.resolve();return queryPromise.then(function(){var oppsById=new IdToValueCache();oppIds.forEach(function(id){if(_this20._cache.has(id)){oppsById.set(id,_this20._cache.get(id));}});return oppsById;}).catch(function(err){var errMsgHeader=_this20._settings.labels.msg_amendrenew_err_loading_opps;return Promise.reject(errMsgHeader+(err.message||err));});}},{key:"_queryAndCacheOpps",value:function _queryAndCacheOpps(oppIds){var _this21=this;var allFields=OpportunityModel.getFields(this._settings);var selectedFields=void 0;return this.hasRecordTypeField().then(function(hasRecordTypeField){if(!hasRecordTypeField){var index=allFields.indexOf('RecordTypeId');selectedFields=allFields.slice(0,index).concat(allFields.slice(index+1));}var whereClause="Id IN ('"+oppIds.join("', '")+"')";return _this21._constructAndPerformQuery('Opportunity',selectedFields,whereClause);}).then(function(opps){opps.forEach(function(opp){_this21._cache.set(opp.Id,opp);});DataChangeTrackerInvoker.storeChangedRecords(opps);});}}]);return OpportunityDAO;}(BaseDAO);module.exports=OpportunityDAO;},{"../cleaners/DataChangeTrackerInvoker.js":17,"../common/IdToValueCache.js":18,"../models/ContractModel.js":27,"../models/OpportunityModel.js":28,"./BaseDAO.js":2,"js-logger":38,"qtc-js-utils":57}],6:[function(require,module,exports){var DataChangeTrackerInvoker=require('../cleaners/DataChangeTrackerInvoker.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var OpportunityLineDAO=function(_BaseDAO4){_inherits(OpportunityLineDAO,_BaseDAO4);function OpportunityLineDAO(conn,settings){_classCallCheck(this,OpportunityLineDAO);var _this22=_possibleConstructorReturn(this,(OpportunityLineDAO.__proto__||Object.getPrototypeOf(OpportunityLineDAO)).call(this,conn));_this22._settings=settings;_this22._salesCloudPrefix=settings.salesCloudPrefix;var restResourcePrefix=_this22._salesCloudPrefix===''?'':'/SBQQ';_this22._serviceRouterUrl=restResourcePrefix+'/ServiceRouter';_this22._lineDeletionServiceProvider='QuoteOpportunitySynchronizer.OpportunityLineItemDeleter';_this22._lineFragmentSaveServiceProvider='QuoteOpportunitySynchronizer.OpportunityLineFragmentedSaver';_this22._logger=jsLogger;return _this22;}_createClass(OpportunityLineDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"saveOppLinesByOppId",value:function saveOppLinesByOppId(oppLinesByOppId){var _this23=this;var oppIds=[];var oppLines=[];var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=oppLinesByOppId.entries()[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _step3$value=_slicedToArray(_step3.value,2),oppId=_step3$value[0],olis=_step3$value[1];oppIds.push(oppId);oppLines=oppLines.concat(olis);}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}this._logMessage('OpportunityLineDAO.js: Delete outdated opportunity lines. SessionId='+this._settings.userId);var saveOppLinesStartTime=void 0;var deleteOutdateOppLinesStartTime=Date.now();return this._deleteOutdatedOppLines(oppIds).then(function(){_this23._logMessage('OpportunityLineDAO.js: Deleting outdated opportunity lines took '+(Date.now()-deleteOutdateOppLinesStartTime)+' ms. SessionId='+_this23._settings.userId);_this23._logMessage('OpportunityLineDAO.js: Save opportunity lines. SessionId='+_this23._settings.userId);saveOppLinesStartTime=Date.now();return _this23._saveOppLines(oppLines);}).then(function(saveResults){_this23._logMessage('OpportunityLineDAO.js: Saving opportunity lines took '+(Date.now()-deleteOutdateOppLinesStartTime)+' ms. SessionId='+_this23._settings.userId);return saveResults;});}},{key:"_deleteOutdatedOppLines",value:function _deleteOutdatedOppLines(oppIds){return this._performCallout(this._lineDeletionServiceProvider,oppIds,this._settings.labels.msg_amendrenew_err_deleting_olis).then(function(deletedOppLineIds){DataChangeTrackerInvoker.storeDeletedRecordIds(deletedOppLineIds,'OpportunityLineItem');});}},{key:"_saveOppLines",value:function _saveOppLines(oppLines){var _this24=this;var msgPrefix=this._settings.labels.msg_amendrenew_err_saving_olis;return this._saveRecords(this._lineFragmentSaveServiceProvider,oppLines.map(function(oli){return oli.record;}),msgPrefix).then(function(oliIds){var parentOppIdArray=oppLines.map(function(oli){return oli.record.OpportunityId;});DataChangeTrackerInvoker.storeCreatedRecordIds(oliIds,'OpportunityLineItem',parentOppIdArray);_this24._assignIdsAndParentIdsToOppLines(oppLines,oliIds);var parentIdField=_this24._salesCloudPrefix+'ParentID__c';var recordsWithIdAndParentId=oppLines.map(function(oli){return _defineProperty({Id:oli.record.Id},parentIdField,oli.record[parentIdField]);});return _this24._saveRecords(_this24._lineFragmentSaveServiceProvider,recordsWithIdAndParentId,msgPrefix);});}},{key:"_assignIdsAndParentIdsToOppLines",value:function _assignIdsAndParentIdsToOppLines(oppLines,newLineIds){var idsByKey=new Map();for(var i=0;i<oppLines.length;i++){var oli=oppLines[i];var newLineId=newLineIds[i];idsByKey.set(oli.key,newLineId);oli.record.Id=newLineId;}var parentIdField=this._salesCloudPrefix+'ParentID__c';oppLines.forEach(function(oli){oli.record[parentIdField]=oli.parentKey?idsByKey.get(oli.parentKey):null;});}},{key:"_saveRecords",value:function _saveRecords(saveProvider,records,errMsgHeader){var _this25=this;var ids=[];var batchSize=200;var performCalloutRecursively=function performCalloutRecursively(index){if(index>=records.length){_this25._logMessage('OpportunityLineDAO.js: Performing call out recursively took '+(Date.now()-performCalloutRecursivelyStartTime)+' ms. SessionId='+_this25._settings.userId);return Promise.resolve(ids);}else{return _this25._performCallout(saveProvider,records.slice(index,index+batchSize),errMsgHeader).then(function(newIds){_this25._logMessage('OpportunityLineDAO.js: Performing call out recursively took '+(Date.now()-performCalloutRecursivelyStartTime)+' ms. SessionId='+_this25._settings.userId);ids=ids.concat(newIds);_this25._logMessage('OpportunityLineDAO.js: Perform call out recursively. SessionId='+_this25._settings.userId);performCalloutRecursivelyStartTime=Date.now();return performCalloutRecursively(index+batchSize);});}};this._logMessage('OpportunityLineDAO.js: Perform call out recursively. SessionId='+this._settings.userId);var performCalloutRecursivelyStartTime=Date.now();return performCalloutRecursively(0);}},{key:"_performCallout",value:function _performCallout(saveProvider,model,errMsgPrefix){var _this26=this;this._logMessage('OpportunityLineDAO.js: APEX Rest API Call Out ('+saveProvider+'). SessionId='+this._settings.userId);var apexRestCallOutStartTime=Date.now();return this._conn.apex.post(this._serviceRouterUrl,{saver:saveProvider,model:JSON.stringify(model)}).then(function(res){_this26._logMessage('OpportunityLineDAO.js: APEX Rest API Call Out ('+saveProvider+') took '+(Date.now()-apexRestCallOutStartTime)+' ms. SessionId='+_this26._settings.userId);return res.toLowerCase()==='success'?res:JSON.parse(res);},function(err){var msg=err.message||err;return Promise.reject(errMsgPrefix+msg);});}}]);return OpportunityLineDAO;}(BaseDAO);module.exports=OpportunityLineDAO;},{"../cleaners/DataChangeTrackerInvoker.js":17,"./BaseDAO.js":2,"js-logger":38}],7:[function(require,module,exports){'use strict';var IdToValueCache=require('../common/IdToValueCache.js');var DAOHelperMethods=require('./DAOHelperMethods.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var BaseSubqueryDescriptor=require('./BaseDAO.js').BaseSubqueryDescriptor;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var cacheManager=require('qtc-js-utils').cacheManager;var PRODUCT_FIELDS=['Id','BatchQuantity__c','PriceEditable__c','CostEditable__c','PricingMethodEditable__c','PricingMethod__c','NonDiscountable__c','NonPartnerDiscountable__c','CompoundDiscountRate__c','HasConfigurationAttributes__c','ReconfigurationDisabled__c','DescriptionLocked__c','ConfigurationType__c','ConfigurationEvent__c','QuantityEditable__c','QuantityScale__c','AssetAmendmentBehavior__c','Optional__c','Hidden__c','Taxable__c','SubscriptionPricing__c','SubscriptionPercent__c','SubscriptionTerm__c','SubscriptionBase__c','SubscriptionCategory__c','TaxCode__c','SubscriptionTarget__c','ExcludeFromOpportunity__c','SubscriptionType__c'];var PRICEBOOK_ENTRY_FIELDS=['Id','Pricebook2Id','UnitPrice','IsActive'];var COST_FIELDS=['UnitCost__c','Active__c','Product__c'];var CACHE_NAME='ProductCache';var ProductSubqueryDescriptor=function(_BaseSubqueryDescript){_inherits(ProductSubqueryDescriptor,_BaseSubqueryDescript);function ProductSubqueryDescriptor(settings){_classCallCheck(this,ProductSubqueryDescriptor);var _this27=_possibleConstructorReturn(this,(ProductSubqueryDescriptor.__proto__||Object.getPrototypeOf(ProductSubqueryDescriptor)).call(this));_this27._settings=settings;_this27._salesCloudPrefix=_this27._settings.salesCloudPrefix;_this27._includeCosts=false;_this27._priceEntryFilters=null;return _this27;}_createClass(ProductSubqueryDescriptor,[{key:"includeCosts",value:function includeCosts(){this._includeCosts=true;}},{key:"includeAllPriceEntries",value:function includeAllPriceEntries(){this.includePriceEntriesFilteredByPricebookAndCurrency('all','all');}},{key:"includePriceEntriesFilteredByPricebookAndCurrency",value:function includePriceEntriesFilteredByPricebookAndCurrency(pricebookIds,currencyCodes){this._priceEntryFilters={pricebooks:pricebookIds,currencies:currencyCodes};}},{key:"addSubqueriesToQuery",value:function addSubqueriesToQuery(query){if(this._includeCosts){var costFields=DAOHelperMethods.properlyPrefixFields(this._salesCloudPrefix,COST_FIELDS);if(this._settings.isMultiCurrencyOrg){costFields.push('CurrencyIsoCode');}query=query.include(this._settings.salesCloudPrefix+'Costs__r').select(costFields.join(', ')).end();}if(this._priceEntryFilters){var selectedPriceEntryFields=DAOHelperMethods.properlyPrefixFields(this._salesCloudPrefix,PRICEBOOK_ENTRY_FIELDS);if(this._settings.isMultiCurrencyOrg){selectedPriceEntryFields.push('CurrencyIsoCode');}var whereArray=[];var pricebookIds=this._priceEntryFilters.pricebooks;if(pricebookIds&&pricebookIds!=='all'){whereArray.push("Pricebook2Id IN ('"+pricebookIds.join("', '")+"')");}var currencyCodes=this._priceEntryFilters.currencies;if(this._settings.isMultiCurrencyOrg&&currencyCodes&&currencyCodes!=='all'){whereArray.push("CurrencyIsoCode IN ('"+currencyCodes.join("', '")+"')");}if(!this._settings.allowInactivePrices){whereArray.push('IsActive = true');}query=query.include('PricebookEntries').select(selectedPriceEntryFields.join(', ')).where(whereArray.join(' AND ')).end();}}},{key:"_getHashKey",value:function _getHashKey(){return"COSTS?"+(this._includeCosts?'YES':'NO')+"_PRICEBOOKS:"+(this._priceEntryFilters?JSON.stringify(this._priceEntryFilters):'NONE');}}]);return ProductSubqueryDescriptor;}(BaseSubqueryDescriptor);var ProductDAO=function(_BaseDAO5){_inherits(ProductDAO,_BaseDAO5);function ProductDAO(conn,settings,services){_classCallCheck(this,ProductDAO);var _this28=_possibleConstructorReturn(this,(ProductDAO.__proto__||Object.getPrototypeOf(ProductDAO)).call(this,conn));_this28._settings=settings;_this28._prefix=settings.salesCloudPrefix;_this28._services=services;_this28._cache=cacheManager.getCache(CACHE_NAME);_this28._initialized=false;_this28._logger=jsLogger;return _this28;}_createClass(ProductDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"_init",value:function _init(){var _this29=this;if(this._initialized){return Promise.resolve();}else{var lineType=this._prefix+'QuoteLine__c';this._logMessage('ProductDAO.js: Initialization. SessionId='+this._settings.userId);var getSharedMappableFieldNamesStartTime=Date.now();return this._services.fieldMetadataService.getSharedMappableFieldNames('Product2',lineType).then(function(fields){_this29._logMessage('ProductDAO.js: Getting shared mappable fields names took '+(Date.now()-getSharedMappableFieldNamesStartTime)+' ms. SessionId='+_this29._settings.userId);_this29._mappableFields=fields;_this29._initialized=true;});}}},{key:"loadProductsByIds",value:function loadProductsByIds(ids,subqueryInfo){var _this30=this;var uniqueIds=[];new Set(ids).forEach(function(id){uniqueIds.push(id);});this._logMessage('ProductDAO.js: Initialization. SessionId='+this._settings.userId);var loadProductsStartTime=void 0;var initStartTime=Date.now();return this._init().then(function(){_this30._logMessage('ProductDAO.js: Initialization took '+(Date.now()-initStartTime)+' ms. SessionId='+_this30._settings.userId);_this30._logMessage('ProductDAO.js: Get products by Ids. SessionId='+_this30._settings.userId);loadProductsStartTime=Date.now();return _this30._getProductsByIds(uniqueIds,subqueryInfo);}).then(function(products){_this30._logMessage('ProductDAO.js: Getting products by ids took '+(Date.now()-loadProductsStartTime)+' ms. SessionId='+_this30._settings.userId);return products;}).catch(function(err){var errHeader=_this30._settings.labels.msg_amendrenew_err_loading_products;return Promise.reject(errHeader+(err.message||err));});}},{key:"_getProductsByIds",value:function _getProductsByIds(ids,subqueryInfo){var outerCacheKey=subqueryInfo?subqueryInfo._getHashKey():'default';var productsRequiringQuery=[];var cachedResultsForSubquery=this._cache.get(outerCacheKey);if(!cachedResultsForSubquery){this._cache.set(outerCacheKey,new IdToValueCache());productsRequiringQuery=ids;}else{productsRequiringQuery=ids.filter(function(id){return!cachedResultsForSubquery.has(id);});}if(productsRequiringQuery.length>0){return this._queryAndCacheProducts(productsRequiringQuery,subqueryInfo,outerCacheKey);}else{return Promise.resolve(cachedResultsForSubquery);}}},{key:"_queryAndCacheProducts",value:function _queryAndCacheProducts(productIds,subqueryDescriptor,cacheKey){var _this31=this;var productFields=DAOHelperMethods.properlyPrefixFields(this._prefix,PRODUCT_FIELDS);if(this._settings.isMultiCurrencyOrg){productFields.push('CurrencyIsoCode');}productFields=productFields.concat(this._mappableFields);var whereClause="Id IN ('"+productIds.join("', '")+"')";return this._constructAndPerformQuery('Product2',productFields,whereClause,subqueryDescriptor).then(function(products){var precachedResults=_this31._cache.get(cacheKey);products.forEach(function(product){precachedResults.set(product.Id,product);});return precachedResults;});}}]);return ProductDAO;}(BaseDAO);module.exports.DAO=ProductDAO;module.exports.SubqueryDescriptor=ProductSubqueryDescriptor;},{"../common/IdToValueCache.js":18,"./BaseDAO.js":2,"./DAOHelperMethods.js":4,"js-logger":38,"qtc-js-utils":57}],8:[function(require,module,exports){'use strict';var DataChangeTrackerInvoker=require('../cleaners/DataChangeTrackerInvoker.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var logger=require('js-logger').logger.getLogger('JSAR Perf');var QuoteDAO=function(_BaseDAO6){_inherits(QuoteDAO,_BaseDAO6);function QuoteDAO(conn,settings){_classCallCheck(this,QuoteDAO);var _this32=_possibleConstructorReturn(this,(QuoteDAO.__proto__||Object.getPrototypeOf(QuoteDAO)).call(this,conn));_this32._settings=settings;_this32._salesCloudPrefix=settings.salesCloudPrefix;var restResourcePrefix=_this32._salesCloudPrefix===''?'':'/SBQQ';_this32._serviceRouterUrl=restResourcePrefix+'/ServiceRouter';_this32._quoteCreateReloadProvider='QuoteServiceProvider.CreateAndReloadQuoteRecord';_this32._quoteSaveProvider='QuoteServiceProvider.SaveQuoteRecords';_this32._lineSaveProvider='QuoteLineEditorServiceProvider.SaveLineRecords';_this32._groupSaveProvider='QuoteLineEditorServiceProvider.SaveGroupRecords';_this32._quoteDeleteProvider='QuoteServiceProvider.DeleteQuoteRecords';_this32._quoteUncheckPrimaryProvider='QuoteServiceProvider.UncheckPrimaryQuoteRecords';_this32._logger=logger;return _this32;}_createClass(QuoteDAO,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"createAndReloadQuote",value:function createAndReloadQuote(unsavedRecord,extraFields){var _this33=this;var model={quoteRecord:unsavedRecord,fieldsToReload:extraFields};return this._performCallout(this._quoteCreateReloadProvider,model,this._settings.labels.msg_amendrenew_err_creating_quote).then(function(rec){var oppId=rec[_this33._salesCloudPrefix+'Opportunity2__c'];DataChangeTrackerInvoker.storeCreatedRecordIds([rec.Id],rec.attributes.type,[oppId]);return rec;});}},{key:"saveQuotes",value:function saveQuotes(qvos){var _this34=this;var msgHeader=this._settings.labels.msg_amendrenew_err_saving_quotes;this._logMessage('QuoteDAO.js: Save quote. SessionId='+this._settings.userId);var saveChildRecordsStartTime=Date.now();var saveRecordsStartTime=Date.now();return this._saveRecords(this._quoteSaveProvider,qvos.map(function(qvo){return qvo.record;}),msgHeader).then(function(){_this34._logMessage('QuoteDAO.js: Saving quote took '+(Date.now()-saveRecordsStartTime)+' ms. SessionId='+_this34._settings.userId);_this34._logMessage('QuoteDAO.js: Save quote children records. SessionId='+_this34._settings.userId);return _this34._saveChildRecords(qvos).then(function(updatedVos){_this34._logMessage('QuoteDAO.js: Saving quote childdren records took '+(Date.now()-saveChildRecordsStartTime)+' ms. SessionId='+_this34._settings.userId);return updatedVos;});});}},{key:"deleteQuotes",value:function deleteQuotes(qvos){var _this35=this;var msgHeader=this._settings.labels.msg_amendrenew_err_deleting_quotes;var records=[];qvos.forEach(function(qvo){if(qvo.record.Id){records.push({Id:qvo.record.Id});}});this._logMessage('QuoteDAO.js: Delete quote. SessionId='+this._settings.userId);var deleteQuoteStartTime=Date.now();return this._performCallout(this._quoteDeleteProvider,records,msgHeader).then(function(){_this35._logMessage('QuoteDAO.js: Deleting quote took '+(Date.now()-deleteQuoteStartTime)+' ms. SessionId='+_this35._settings.userId);DataChangeTrackerInvoker.unstoreCreatedRecordIds(qvos.map(function(qvo){return qvo.record.Id;}));return qvos;});}},{key:"_saveChildRecords",value:function _saveChildRecords(qvos){var _this36=this;var updatedVos=[];var saveQuoteChildrenRecursively=function saveQuoteChildrenRecursively(index){var saveGroupsStartTime=void 0;var saveLinesStartTime=void 0;if(index>=qvos.length){_this36._logMessage('QuoteDAO.js: Saving quote children recursively took '+(Date.now()-saveQuoteChildrenRecursivelyStartTime)+' ms. SessionId='+_this36._settings.userId);return Promise.resolve(updatedVos);}else{_this36._logMessage('QuoteDAO.js: Save groups. SessionId='+_this36._settings.userId);saveGroupsStartTime=Date.now();return _this36._saveGroups(qvos[index]).then(function(qvo){_this36._logMessage('QuoteDAO.js: Saving groups took '+(Date.now()-saveGroupsStartTime)+' ms. SessionId='+_this36._settings.userId);_this36._logMessage('QuoteDAO.js: Save Lines. SessionId='+_this36._settings.userId);saveLinesStartTime=Date.now();return _this36._saveLines(qvo);}).then(function(qvo){_this36._logMessage('QuoteDAO.js: Saving Lines took '+(Date.now()-saveLinesStartTime)+' ms. SessionId='+_this36._settings.userId);_this36._logMessage('QuoteDAO.js: Saving quote children recursively took '+(Date.now()-saveQuoteChildrenRecursivelyStartTime)+' ms. SessionId='+_this36._settings.userId);updatedVos.push(qvo);_this36._logMessage('QuoteDAO.js: Save quote children recursively. SessionId='+_this36._settings.userId);saveQuoteChildrenRecursivelyStartTime=Date.now();return saveQuoteChildrenRecursively(index+1);});}};this._logMessage('QuoteDAO.js: Save quote children recursively. SessionId='+this._settings.userId);var saveQuoteChildrenRecursivelyStartTime=Date.now();return saveQuoteChildrenRecursively(0);}},{key:"_saveGroups",value:function _saveGroups(qvo){var _this37=this;if(!qvo.lineItemGroups||qvo.lineItemGroups.length===0){return Promise.resolve(qvo);}var msgHeader=this._settings.labels.msg_amendrenew_err_saving_quote_groups;return this._saveRecords(this._groupSaveProvider,qvo.lineItemGroups.map(function(gvo){return gvo.record;}),msgHeader).then(function(newGroupIds){_this37._assignGroupIdsToGroupsAndContainedLines(qvo,newGroupIds);return qvo;});}},{key:"_assignGroupIdsToGroupsAndContainedLines",value:function _assignGroupIdsToGroupsAndContainedLines(qvo,idsOfNewGroups){var groupIdsByKey=new Map();for(var i=0;i<qvo.lineItemGroups.length;i++){var groupVo=qvo.lineItemGroups[i];var id=idsOfNewGroups[i];groupVo.record.Id=id;groupIdsByKey.set(groupVo.key,id);}for(var _i=0;_i<qvo.lineItems.length;_i++){var lineVo=qvo.lineItems[_i];lineVo.record[this._salesCloudPrefix+'Group__c']=groupIdsByKey.get(lineVo.parentGroupKey);}}},{key:"_saveLines",value:function _saveLines(qvo){var _this38=this;if(!qvo.lineItems||qvo.lineItems.length===0){return Promise.resolve(qvo);}var msgHeader=this._settings.labels.msg_amendrenew_err_saving_quote_lines;return this._saveRecords(this._lineSaveProvider,qvo.lineItems.map(function(lvo){return lvo.record;}),msgHeader).then(function(newLineIds){_this38._assignIdsAndParentIdsToLines(qvo,newLineIds);var parentLineIdField=_this38._salesCloudPrefix+'RequiredBy__c';var recordsWithParentInfo=qvo.lineItems.map(function(lvo){return _defineProperty({Id:lvo.record.Id},parentLineIdField,lvo.record[parentLineIdField]);});return _this38._saveRecords(_this38._lineSaveProvider,recordsWithParentInfo,msgHeader);}).then(function(){return qvo;});}},{key:"_assignIdsAndParentIdsToLines",value:function _assignIdsAndParentIdsToLines(qvo,newLineIds){var _this39=this;var lineIdsByKey=new Map();for(var i=0;i<qvo.lineItems.length;i++){var lvo=qvo.lineItems[i];var newLineId=newLineIds[i];lineIdsByKey.set(lvo.key,newLineId);lvo.record.Id=newLineId;}qvo.lineItems.forEach(function(lvo){lvo.record[_this39._salesCloudPrefix+'RequiredBy__c']=lvo.parentItemKey?lineIdsByKey.get(lvo.parentItemKey):null;});}},{key:"uncheckPrimaryQuotes",value:function uncheckPrimaryQuotes(quoteIdsToUpdate){var _this40=this;var originalRecords=[];var updatedRecords=[];var primaryField=this._settings.salesCloudPrefix+'Primary__c';quoteIdsToUpdate.forEach(function(qId){originalRecords.push(_defineProperty({attributes:{type:_this40._settings.salesCloudPrefix+'Quote__c'},Id:qId},primaryField,true));updatedRecords.push(_defineProperty({Id:qId},primaryField,false));});return this._saveRecords(this._quoteUncheckPrimaryProvider,updatedRecords,this._settings.labels.msg_amendrenew_err_saving_quotes).then(function(){DataChangeTrackerInvoker.storeChangedRecords(originalRecords);});}},{key:"_saveRecords",value:function _saveRecords(saveProvider,records,errMsgHeader){var _this41=this;var ids=[];var batchSize=200;var performCalloutRecursively=function performCalloutRecursively(index){if(index>=records.length){_this41._logMessage('QuoteDAO.js: Saving record recursively took '+(Date.now()-performCalloutRecursivelyStartTime)+' ms. SessionId='+_this41._settings.userId);return Promise.resolve(ids);}else{return _this41._performCallout(saveProvider,records.slice(index,index+batchSize),errMsgHeader).then(function(newIds){_this41._logMessage('QuoteDAO.js: Saving record recursively took '+(Date.now()-performCalloutRecursivelyStartTime)+' ms. SessionId='+_this41._settings.userId);ids=ids.concat(newIds);_this41._logMessage('QuoteDAO.js: Save record recursively. SessionId='+_this41._settings.userId);performCalloutRecursivelyStartTime=Date.now();return performCalloutRecursively(index+batchSize);});}};this._logMessage('QuoteDAO.js: Save record recursively. SessionId='+this._settings.userId);var performCalloutRecursivelyStartTime=Date.now();return performCalloutRecursively(0);}},{key:"_performCallout",value:function _performCallout(saveProvider,model,errMsgHeader){var _this42=this;this._logMessage('QuoteDAO.js: APEX Rest API Call Out ('+saveProvider+'). SessionId='+this._settings.userId);var apexRestCallOutStartTime=Date.now();return this._conn.apex.post(this._serviceRouterUrl,{saver:saveProvider,model:JSON.stringify(model)}).then(function(res){_this42._logMessage('QuoteDAO.js: APEX Rest API Call Out ('+saveProvider+') took '+(Date.now()-apexRestCallOutStartTime)+' ms. SessionId='+_this42._settings.userId);if(res.toLowerCase()==='success'){return[];}else{return JSON.parse(res);}},function(err){var msg=err.message||err;return Promise.reject(errMsgHeader+msg);});}}]);return QuoteDAO;}(BaseDAO);module.exports=QuoteDAO;},{"../cleaners/DataChangeTrackerInvoker.js":17,"./BaseDAO.js":2,"js-logger":38}],9:[function(require,module,exports){'use strict';var IdToValueCache=require('../common/IdToValueCache.js');var DAOHelperMethods=require('./DAOHelperMethods.js');var BaseDAO=require('./BaseDAO.js').BaseDAO;var BaseSubqueryDescriptor=require('./BaseDAO.js').BaseSubqueryDescriptor;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var cacheManager=require('qtc-js-utils').cacheManager;var SUB_CLI_ASSET_FIELDS=['Id','ChargeType__c','BillingType__c','BillingFrequency__c','DynamicOptionId__c','Product__c','ProductOption__c','RequiredById__c','RequiredByProduct__c','DiscountSchedule__c','TermDiscountSchedule__c','ComponentDiscountedByPackage__c','OptionLevel__c','OptionType__c','OptionDiscount__c','OptionDiscountAmount__c','Bundled__c','Bundle__c','PartnerDiscount__c','DistributorDiscount__c','Discount__c','UnitCost__c','OriginalUnitCost__c','MarkupRate__c','MarkupAmount__c','DiscountScheduleType__c','AdditionalDiscountAmount__c','RootId__c','SegmentKey__c'];var SUB_CLI_FIELDS=['RenewalQuantity__c','ProrateMultiplier__c','ListPrice__c','RenewalUpliftRate__c','RenewalPrice__c','CustomerPrice__c','ProductId__c','RenewalProductId__c','RenewalProductOptionId__c','RenewalProductOptionProductId__c','RevisedSubscription__c','Account__c','TerminatedDate__c'];var SUB_ONLY_FIELDS=['Quantity__c','StartDate__c','EndDate__c','Contract__c'];var CLI_ONLY_FIELDS=['Quantity','StartDate','EndDate','ServiceContractId'];var ASSET_ONLY_FIELDS=['Id','Product2Id'];var SUBSCRIBED_ASSET_FIELDS=['Subscription__c','Asset__c'];var ENTITLEMENT_FIELDS=['ContractLineItemId','AssetId'];var CACHE_NAME='SourceRecordCache';var SubscribedAssetSubqueryDescriptor=function(_BaseSubqueryDescript2){_inherits(SubscribedAssetSubqueryDescriptor,_BaseSubqueryDescript2);function SubscribedAssetSubqueryDescriptor(subscribedAssetFields,subscribedAssetRelationship){_classCallCheck(this,SubscribedAssetSubqueryDescriptor);var _this43=_possibleConstructorReturn(this,(SubscribedAssetSubqueryDescriptor.__proto__||Object.getPrototypeOf(SubscribedAssetSubqueryDescriptor)).call(this));_this43._fields=subscribedAssetFields;_this43._relationship=subscribedAssetRelationship;return _this43;}_createClass(SubscribedAssetSubqueryDescriptor,[{key:"addSubqueriesToQuery",value:function addSubqueriesToQuery(query){if(this._fields&&this._relationship){query=query.include(this._relationship).select(this._fields.join(', ')).end();}}}]);return SubscribedAssetSubqueryDescriptor;}(BaseSubqueryDescriptor);var SourceRecordDAO=function(_BaseDAO7){_inherits(SourceRecordDAO,_BaseDAO7);function SourceRecordDAO(conn,settings,services){_classCallCheck(this,SourceRecordDAO);var _this44=_possibleConstructorReturn(this,(SourceRecordDAO.__proto__||Object.getPrototypeOf(SourceRecordDAO)).call(this,conn));_this44._settings=settings;_this44._isServiceCloudEnabled=_this44._settings.isServiceCloudEnabled;_this44._salesCloudPrefix=_this44._settings.salesCloudPrefix;_this44._serviceCloudPrefix=_this44._settings.serviceCloudPrefix;_this44._services=services;_this44._cache=cacheManager.getCache(CACHE_NAME);_this44._initialized=false;_this44._logger=jsLogger;return _this44;}_createClass(SourceRecordDAO,[{key:"_identifyUncachedKeys",value:function _identifyUncachedKeys(innerKeys,innerCacheName,innerCacheConstructor){var cachedResults=this._cache.get(innerCacheName);if(!cachedResults){cachedResults=new(innerCacheConstructor||Map)();this._cache.set(innerCacheName,cachedResults);return innerKeys;}else{return innerKeys.filter(function(key){return!cachedResults.has(key);});}}},{key:"loadSourceRecordsRelatedToContracts",value:function loadSourceRecordsRelatedToContracts(contracts){var _this45=this;var resultObject={};var getSubsByContractIdsStartTime=void 0;var getAssetsBySubAndContractStartTime=void 0;var initStartTime=Date.now();this._logMessage('SourceRecordDAO.js: Initialization. SessionId='+this._settings.userId);return this._init().then(function(){_this45._logMessage('SourceRecordDAO.js: Initialization took '+(Date.now()-initStartTime)+' ms. SessionId='+_this45._settings.userId);var cIds=contracts.map(function(contract){return contract.Id;});_this45._logMessage('SourceRecordDAO.js: Get subs by contract Ids. SessionId='+_this45._settings.userId);getSubsByContractIdsStartTime=Date.now();return _this45._getSubsByContractIds(cIds);}).then(function(subsByContractId){_this45._logMessage('SourceRecordDAO.js: Getting subs by contract Ids took '+(Date.now()-getSubsByContractIdsStartTime)+' ms. SessionId='+_this45._settings.userId);resultObject.subsByContractId=subsByContractId;_this45._logMessage('SourceRecordDAO.js: Get assets by sub and contract. SessionId='+_this45._settings.userId);getAssetsBySubAndContractStartTime=Date.now();return _this45._getAssetsBySubAndContract(contracts,subsByContractId);}).then(function(assets){_this45._logMessage('SourceRecordDAO.js: Getting assets by sub and contract took '+(Date.now()-getAssetsBySubAndContractStartTime)+' ms. SessionId='+_this45._settings.userId);return resultObject;}).catch(function(err){var errHeader=_this45._settings.labels.msg_amendrenew_err_loading_source_recs;return Promise.reject(errHeader+(err.message||err));});}},{key:"loadSourceRecordsRelatedToSubscriptions",value:function loadSourceRecordsRelatedToSubscriptions(selectedSubIds){var _this46=this;var selectedSubsArray=void 0;var referencedSubsMap=void 0;var initStartTime=void 0;var getSelectedSubsByIdsStartTime=void 0;var getReferencedSubsStartTime=void 0;var getReferencedAssetsStartTime=void 0;this._logMessage('SourceRecordDAO.js: Initialization. SessionId='+this._settings.userId);initStartTime=Date.now();return this._init().then(function(){_this46._logMessage('SourceRecordDAO.js: Initialization took '+(Date.now()-initStartTime)+' ms. SessionId='+_this46._settings.userId);getSelectedSubsByIdsStartTime=Date.now();return _this46._getSubsByOriginalIdsAsArray(selectedSubIds);}).then(function(returnedSubsArray){_this46._logMessage('SourceRecordDAO.js: Getting subs by their IDs took '+(Date.now()-getSelectedSubsByIdsStartTime)+' ms. SessionId = '+_this46._settings.userId);selectedSubsArray=returnedSubsArray;getReferencedSubsStartTime=Date.now();return _this46._getReferencedSubsByRootIdAndContractId(selectedSubsArray);}).then(function(returnedSubsByRootId){_this46._logMessage('SourceRecordDAO.js: Loading related subs by their Root IDs took '+(Date.now()-getReferencedSubsStartTime)+' ms. SessionId='+_this46._settings.userId);referencedSubsMap=returnedSubsByRootId;getReferencedAssetsStartTime=Date.now();return _this46._getAssetsReferencedBy(selectedSubsArray,referencedSubsMap);}).then(function(returnedAssets){_this46._logMessage('SourceRecordDAO.js: Loading referenced assets by their ID and RootAssetId took '+(Date.now()-getReferencedAssetsStartTime)+' ms. SessionId='+_this46._settings.userId);var resultsObject={subs:[],assets:returnedAssets};var addedSubIds=new Set();var addSubToResults=function addSubToResults(sub){if(!addedSubIds.has(sub.Id)){resultsObject.subs.push(sub);addedSubIds.add(sub.Id);}var subscribedAssets=sub[_this46._subscribedAssetRelationshipName];if(subscribedAssets&&subscribedAssets.totalSize){var assetField=_this46._isServiceCloudEnabled?'AssetId':_this46._salesCloudPrefix+'Asset__c';subscribedAssets.records.forEach(function(sa){if(sa[assetField]){_this46._logWarning(_this46._subRecType+' ['+sub.Id+'] has subscribed assets. Assets are not currently supported in the Advanced Amendment/Renewal Services.');}});}};selectedSubsArray.forEach(addSubToResults);referencedSubsMap.forEach(function(subs){subs.forEach(addSubToResults);});return resultsObject;}).catch(function(err){var errHeader='Could not load source records for QLE amend/renew: ';return Promise.reject(errHeader+(err.message||err));});}},{key:"_init",value:function _init(){var _this47=this;if(this._initialized){return Promise.resolve();}else{var lineType=this._salesCloudPrefix+'QuoteLine__c';var promises=[];promises.push(this._services.fieldMetadataService.getSharedMappableFieldNames(this._subRecType,lineType));promises.push(this._services.fieldMetadataService.getSharedMappableFieldNames('Asset',lineType));return Promise.all(promises).then(function(res){_this47._subMappableFields=res[0];_this47._assetMappableFields=res[1];_this47._initialized=true;});}}},{key:"_getAssetsBySubAndContract",value:function _getAssetsBySubAndContract(contracts,subsByContractId){var _this48=this;var contractCount=contracts.length;var _loop=function _loop(i){var c=contracts[i];var preserveBundle=c.PreserveBundleStructureUponRenewals__c;var subs=subsByContractId.get(c.Id);var subCount=subs.length;var _loop2=function _loop2(j){var subscribedAssets=subs[j][_this48._subscribedAssetRelationshipName];if(subscribedAssets&&subscribedAssets.totalSize){var assetField=_this48._isServiceCloudEnabled?'AssetId':_this48._salesCloudPrefix+'Asset__c';subscribedAssets.records.forEach(function(sa){if(sa[assetField]){_this48._logWarning(_this48._subRecType+' ['+subs[j].Id+'] has subscribed assets. Assets are not currently supported in the Advanced Amendment/Renewal Services.');}});}};for(var j=0;j<subCount;j++){_loop2(j);}};for(var i=0;i<contractCount;i++){_loop(i);}return Promise.resolve();}},{key:"_getSubsByContractIds",value:function _getSubsByContractIds(cIds){var _this49=this;var idsWithoutCachedResult=this._identifyUncachedKeys(cIds,'subsByContractId',IdToValueCache);var missingRecordsPromise=idsWithoutCachedResult.length>0?this._queryAndCacheSubscriptionsOnMissingContracts(idsWithoutCachedResult):Promise.resolve();return missingRecordsPromise.then(function(){var results=new IdToValueCache();cIds.forEach(function(cId){results.set(cId,_this49._cache.get('subsByContractId').get(cId)||[]);});return results;});}},{key:"_getSubsByOriginalIdsAsArray",value:function _getSubsByOriginalIdsAsArray(subIds){var _this50=this;var idsWithoutCachedResult=this._identifyUncachedKeys(subIds,'subsByOriginalId',IdToValueCache);var missingRecordsPromise=idsWithoutCachedResult.length>0?this._queryAndCacheSubscriptionsByOriginalIds(idsWithoutCachedResult):Promise.resolve();return missingRecordsPromise.then(function(){var results=[];subIds.forEach(function(subId){var cachedSubs=_this50._cache.get('subsByOriginalId').get(subId)||[];results=results.concat(cachedSubs);});return results;});}},{key:"_getReferencedSubsByRootIdAndContractId",value:function _getReferencedSubsByRootIdAndContractId(selectedSubs){var _this51=this;var contractRootPairSet=new Set();var rootIdField=(this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix)+'RootId__c';var rootIdsByCacheKey=new Map();selectedSubs.forEach(function(sub){var contractId=sub[_this51._subLookupToContract].slice(0,15);if(sub[rootIdField]){var mainKey=contractId+'_'+sub[rootIdField].slice(0,15);contractRootPairSet.add(mainKey);rootIdsByCacheKey.set(mainKey,sub[rootIdField]);}var subscribedAssets=sub[_this51._subscribedAssetRelationshipName];if(subscribedAssets&&subscribedAssets.totalSize){var assetField=_this51._isServiceCloudEnabled?'AssetId':_this51._salesCloudPrefix+'Asset__c';subscribedAssets.records.forEach(function(sa){if(sa[assetField]){_this51._logWarning(_this51._subRecType+' ['+sub.Id+'] has subscribed assets. Assets are not currently supported in the Advanced Amendment/Renewal Services.');}});}});var contractRootPairArray=[].concat(_toConsumableArray(contractRootPairSet));var pairingsWithoutCachedResult=this._identifyUncachedKeys(contractRootPairArray,'subsByContractRootPair');var missingRecordsPromise=void 0;if(pairingsWithoutCachedResult.length>0){var rootIdsByContractId=new IdToValueCache();pairingsWithoutCachedResult.forEach(function(key){var contractId=key.split('_')[0];var rootId=rootIdsByCacheKey.get(key);if(rootIdsByContractId.has(contractId)){rootIdsByContractId.get(contractId).push(rootId);}else{rootIdsByContractId.set(contractId,[rootId]);}});missingRecordsPromise=this._queryAndCacheReferencedSubscriptionsByRootIdsAndContractIds(rootIdsByContractId);}else{missingRecordsPromise=Promise.resolve();}return missingRecordsPromise.then(function(){var results=new IdToValueCache();contractRootPairArray.forEach(function(pair){var cachedRecords=_this51._cache.get('subsByContractRootPair').get(pair);var rootId=pair.split('_')[1];var premappedRecords=results.get(rootId)||[];results.set(rootId,premappedRecords.concat(cachedRecords));});return results;});}},{key:"_getAssetsReferencedBy",value:function _getAssetsReferencedBy(){return[];}},{key:"_queryAndCacheSubscriptionsByOriginalIds",value:function _queryAndCacheSubscriptionsByOriginalIds(sIds){var _this52=this;var subPrefix=this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;var revisedIdField=subPrefix+'RevisedSubscription__c';var inExpr=" IN ('"+sIds.join("', '")+"')";var originalIdClause="Id"+inExpr;var revisedIdClause=revisedIdField+inExpr;var clauseArray=[originalIdClause,revisedIdClause];var callback=function callback(subs){var cachedSubsByOriginalId=_this52._cache.get('subsByOriginalId');subs.forEach(function(sub){var idKey=void 0;if(sub[revisedIdField]){idKey=sub[revisedIdField];}else{idKey=sub.Id;}if(cachedSubsByOriginalId.has(idKey)){cachedSubsByOriginalId.get(idKey).push(sub);}else{cachedSubsByOriginalId.set(idKey,[sub]);}});};var whereClause="Id IN ('"+sIds.join("', '")+"')";return this._querySubscriptionsAndRunCallback(this._constructAndPerformQuery,whereClause,callback);}},{key:"_queryAndCacheSubscriptionsOnMissingContracts",value:function _queryAndCacheSubscriptionsOnMissingContracts(cIds){var _this53=this;var callback=function callback(subs){var cachedSubsByContract=_this53._cache.get('subsByContractId');subs.forEach(function(sub){var cId=sub[_this53._subLookupToContract];if(cachedSubsByContract.has(cId)){cachedSubsByContract.get(cId).push(sub);}else{cachedSubsByContract.set(cId,[sub]);}});};var whereClause=this._subLookupToContract+" IN ('"+cIds.join("', '")+"')";return this._querySubscriptionsAndRunCallback(this._constructAndPerformQuery,whereClause,callback);}},{key:"_queryAndCacheReferencedSubscriptionsByRootIdsAndContractIds",value:function _queryAndCacheReferencedSubscriptionsByRootIdsAndContractIds(rootIdsByContractId){var _this54=this;var subPrefix=this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;var rootIdField=subPrefix+"RootId__c";var revisedSubIdField=subPrefix+'RevisedSubscription__c';var revisedRootIdField=revisedSubIdField.slice(0,-1)+'r.'+rootIdField;var contractPreservesBundle=(this._isServiceCloudEnabled?'ServiceContract':subPrefix+'Contract__r')+'.'+subPrefix+'PreserveBundleStructureUponRenewals__c = true';var clauseArray=[];var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=rootIdsByContractId[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var _step4$value=_slicedToArray(_step4.value,2),_contractId=_step4$value[0],rootIds=_step4$value[1];var contractEqExpr=this._subLookupToContract+" = '"+_contractId+"'";var rootIdsInExpr=" IN ('"+rootIds.join("', '")+"')";var rootIdInSet=rootIdField+rootIdsInExpr;var revisedRootIdInSet=revisedRootIdField+rootIdsInExpr;var clause="("+contractPreservesBundle+" AND "+contractEqExpr+" AND ("+rootIdInSet+" OR "+revisedRootIdInSet+"))";clauseArray.push(clause);}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}var whereClause=clauseArray.join(" OR ");var callback=function callback(subs){var cachedSubsByContractRootPair=_this54._cache.get('subsByContractRootPair');var revisionsByOriginalId=new IdToValueCache();var rootIdsByOriginalId=new IdToValueCache();subs.forEach(function(sub){var rootId=void 0;var contractId=sub[_this54._subLookupToContract];if(sub[rootIdField]){rootId=sub[rootIdField];var newResults=revisionsByOriginalId.has(sub.Id)?[sub].concat(revisionsByOriginalId.get(sub.Id)):[sub];var cacheKey=contractId.slice(0,15)+'_'+rootId.slice(0,15);var existingResults=cachedSubsByContractRootPair.get(cacheKey)||[];cachedSubsByContractRootPair.set(cacheKey,existingResults.concat(newResults));rootIdsByOriginalId.set(sub.Id,rootId);}else{var revisedSubId=sub[revisedSubIdField];if(rootIdsByOriginalId.has(revisedSubId)){rootId=rootIdsByOriginalId.get(revisedSubId).slice(0,15);var _cacheKey=contractId.slice(0,15)+'_'+rootId;cachedSubsByContractRootPair.get(_cacheKey).push(sub);}else if(revisionsByOriginalId.has(revisedSubId)){revisionsByOriginalId.get(revisedSubId).push(sub);}else{revisionsByOriginalId.set(revisedSubId,[sub]);}}});var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{var _loop3=function _loop3(){var _step5$value=_slicedToArray(_step5.value,2),contractId=_step5$value[0],rootIds=_step5$value[1];rootIds.forEach(function(rootId){var cacheKey=contractId.slice(0,15)+'_'+rootId.slice(0,15);if(!cachedSubsByContractRootPair.has(cacheKey)){cachedSubsByContractRootPair.set(cacheKey,[]);}});};for(var _iterator5=rootIdsByContractId[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){_loop3();}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}};return this._querySubscriptionsAndRunCallback(this._constructAndPerformQuery,whereClause,callback);}},{key:"_getSelectedSubscriptionFields",value:function _getSelectedSubscriptionFields(){var subPrefix=this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;var selectedSubFields=SUB_CLI_ASSET_FIELDS.concat(SUB_CLI_FIELDS,this._isServiceCloudEnabled?CLI_ONLY_FIELDS:SUB_ONLY_FIELDS);selectedSubFields=DAOHelperMethods.properlyPrefixFields(subPrefix,selectedSubFields);selectedSubFields.push(subPrefix+'QuoteLine__r.'+this._salesCloudPrefix+'Description__c');if(this._settings.isMultiCurrencyOrg){selectedSubFields.push('CurrencyIsoCode');}return selectedSubFields.concat(this._subMappableFields);}},{key:"_querySubscriptionsAndRunCallback",value:function _querySubscriptionsAndRunCallback(baseQueryMethod,whereClause,callback){var defaultCallback=function defaultCallback(res){return res;};var selectedSubFields=this._getSelectedSubscriptionFields();var subPrefix=this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;var selectedSubscribedAssetFields=this._isServiceCloudEnabled?ENTITLEMENT_FIELDS:SUBSCRIBED_ASSET_FIELDS;selectedSubscribedAssetFields=DAOHelperMethods.properlyPrefixFields(subPrefix,selectedSubscribedAssetFields);if(this._settings.isMultiCurrencyOrg){selectedSubscribedAssetFields.push('CurrencyIsoCode');}var sasd=new SubscribedAssetSubqueryDescriptor(selectedSubscribedAssetFields,this._subscribedAssetRelationshipName);var argArray=[this._subRecType,selectedSubFields,whereClause,sasd,['CreatedDate','ASC']];return baseQueryMethod.apply(this,argArray).then(callback||defaultCallback);}},{key:"_subRecType",get:function get(){return this._isServiceCloudEnabled?'ContractLineItem':this._salesCloudPrefix+'Subscription__c';}},{key:"_subLookupToContract",get:function get(){return this._isServiceCloudEnabled?'ServiceContractId':this._salesCloudPrefix+'Contract__c';}},{key:"_subscribedAssetRelationshipName",get:function get(){return this._isServiceCloudEnabled?'Entitlements':this._salesCloudPrefix+'SubscribedAssets__r';}}]);return SourceRecordDAO;}(BaseDAO);module.exports=SourceRecordDAO;},{"../common/IdToValueCache.js":18,"./BaseDAO.js":2,"./DAOHelperMethods.js":4,"js-logger":38,"qtc-js-utils":57}],10:[function(require,module,exports){var parse=require("node-sqlparser").parse;var stringify=require("node-sqlparser").stringify;var WhereClauseSplitter=function(){function WhereClauseSplitter(){_classCallCheck(this,WhereClauseSplitter);this._overallSpecificityPreserved=true;this._semiJoinRegex=/\s+IN\s+\(\s*SELECT\s+.*?FROM/ig;this._semiJoinMap=new Map();this._semiJoinCounter=0;this._semiJoinReplacementFormat="'____SEMI-JOIN_%____'";this._unescapedDateRegex=/\d{4}-\d{2}-\d{2}(?:(?:T\d{2}:\d{2}:\d{2})(?:Z|[\+\-]\d{2}:\d{2}))?/gi;this._unescapedDateMap=new Map();this._unescapedDateCounter=0;this._unescapedDateReplacementFormat="'____UNESCAPED_DATE_%____'";this._nestedLookupRegex=/\w+\.\w+\.\w+(?:\.\w+)*/gi;this._nestedLookupMap=new Map();this._nestedLookupCounter=0;this._nestedLookupReplacementFormat="'____NESTED_LOOKUP_%____'";}_createClass(WhereClauseSplitter,[{key:"_resetModificationInformation",value:function _resetModificationInformation(){this._overallSpecificityPreserved=true;this._semiJoinMap=new Map();this._semiJoinCounter=0;this._unescapedDateMap=new Map();this._unescapedDateCounter=0;this._nestedLookupMap=new Map();this._nestedLookupCounter=0;}},{key:"splitWhereClause",value:function splitWhereClause(whereClause,maxLength){var _this55=this;var results={clauses:[],specificityPreserved:true};var whereLength=whereClause.length;if(whereLength<=maxLength){results.clauses.push(whereClause);return results;}var treatedWhereClause=this._makeWhereClauseParsable(whereClause);var fakeQueryString='SELECT * FROM SomeTable WHERE '+treatedWhereClause;var fullAst=void 0;try{fullAst=parse(fakeQueryString);}catch(e){throw Error('Failed to parse WHERE clause: '+(e.message||e));}var whereAst=fullAst.where;this._recursivelySetLengthOnAstNodes(whereAst);var preserveOverallSpecificity=true;this._recursivelySetMinLengthOnAstNodes(whereAst,preserveOverallSpecificity);if(whereAst.minLength>maxLength){preserveOverallSpecificity=false;this._recursivelySetMinLengthOnAstNodes(whereAst,preserveOverallSpecificity);if(whereAst.minLength>maxLength){throw Error('WHERE clause cannot be shrunk below maximum acceptable length of '+maxLength+'. WHERE CLAUSE: '+whereClause);}}var splitWhereAsts=this._recursivelySplitUntilTargetSizeReached(whereAst,maxLength,preserveOverallSpecificity);var splitWhereClauses=[];splitWhereAsts.forEach(function(splitWhereAst){fullAst.where=splitWhereAst;var splitWhereClause=stringify(fullAst).slice(30);splitWhereClauses.push(_this55._restoreUnparsableCharacters(splitWhereClause));});results.clauses=splitWhereClauses;results.specificityPreserved=this._overallSpecificityPreserved;return results;}},{key:"_makeWhereClauseParsable",value:function _makeWhereClauseParsable(whereClause){this._resetModificationInformation();return this._storeAndReplaceNestedLookups(this._storeAndReplaceUnescapedDates(this._storeAndReplaceSemiJoins(whereClause)));}},{key:"_restoreUnparsableCharacters",value:function _restoreUnparsableCharacters(whereClause){var modifiedWhereClause=whereClause;var mapList=[this._unescapedDateMap,this._nestedLookupMap,this._semiJoinMap];var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=mapList[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var map=_step6.value;var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=map[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var _step7$value=_slicedToArray(_step7.value,2),replacementString=_step7$value[0],original=_step7$value[1];var replacementFindingRegex=new RegExp(replacementString,'g');modifiedWhereClause=modifiedWhereClause.replace(replacementFindingRegex,original);}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}return modifiedWhereClause;}},{key:"_storeAndReplaceSemiJoins",value:function _storeAndReplaceSemiJoins(whereClause){var matchesByIndex=new Map();var match=void 0;while((match=this._semiJoinRegex.exec(whereClause))!==null){matchesByIndex.set(match.index,match);}if(matchesByIndex.size===0){return whereClause;}var semiJoinLengthsByStartIndex=new Map();var whereClauseIterator=whereClause[Symbol.iterator]();var idx=0;var iter=void 0;var stringDelimiterArray=[];var parenBalance=void 0;var capturingSemiJoin=false;var semiJoinLength=void 0;var semiJoinStartIndex=void 0;var matchesProcessed=0;while(!(iter=whereClauseIterator.next()).done){if(matchesByIndex.has(idx)){if(!capturingSemiJoin&&stringDelimiterArray.length===0){capturingSemiJoin=true;parenBalance=0;}matchesProcessed++;}else if(stringDelimiterArray.length>0&&iter.value===stringDelimiterArray[0]){stringDelimiterArray.shift();}else if(iter.value==='"'||iter.value==="'"){stringDelimiterArray.unshift(iter.value);}else if(stringDelimiterArray.length===0&&capturingSemiJoin){if(iter.value==='('){if(parenBalance++===0){semiJoinStartIndex=idx+1;semiJoinLength=-1;}}else if(iter.value===')'){if(--parenBalance===0){semiJoinLengthsByStartIndex.set(semiJoinStartIndex,semiJoinLength);capturingSemiJoin=false;if(matchesProcessed===matchesByIndex.size){break;}}}}if(capturingSemiJoin&&parenBalance>0){semiJoinLength++;}idx++;}if(semiJoinLengthsByStartIndex.size===0){return whereClause;}var modifiedWhereClause='';var sliceStartPoint=0;var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{for(var _iterator8=semiJoinLengthsByStartIndex.entries()[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){var _step8$value=_slicedToArray(_step8.value,2),_idx=_step8$value[0],len=_step8$value[1];modifiedWhereClause+=whereClause.slice(sliceStartPoint,_idx);var semiJoin=whereClause.slice(_idx,_idx+len);var semiJoinReplacement=this._semiJoinReplacementFormat.replace('%',++this._semiJoinCounter);modifiedWhereClause+=semiJoinReplacement;this._semiJoinMap.set(semiJoinReplacement,semiJoin);sliceStartPoint=_idx+len;}}catch(err){_didIteratorError8=true;_iteratorError8=err;}finally{try{if(!_iteratorNormalCompletion8&&_iterator8.return){_iterator8.return();}}finally{if(_didIteratorError8){throw _iteratorError8;}}}modifiedWhereClause+=whereClause.slice(sliceStartPoint);return modifiedWhereClause;}},{key:"_storeAndReplaceUnescapedDates",value:function _storeAndReplaceUnescapedDates(whereClause){return this._storeAndReplaceUnparsableSubstrings(whereClause,this._unescapedDateRegex,this._unescapedDateReplacementFormat,this._unescapedDateMap,this._unescapedDateCounter);}},{key:"_storeAndReplaceNestedLookups",value:function _storeAndReplaceNestedLookups(whereClause){return this._storeAndReplaceUnparsableSubstrings(whereClause,this._nestedLookupRegex,this._nestedLookupReplacementFormat,this._nestedLookupMap,this._nestedLookupCounter);}},{key:"_storeAndReplaceUnparsableSubstrings",value:function _storeAndReplaceUnparsableSubstrings(whereClause,regex,replacementFormat,storedValueMap,storedValueCounter){var matchesByIndex=new Map();var match=void 0;while((match=regex.exec(whereClause))!==null){matchesByIndex.set(match.index,match);}if(matchesByIndex.size===0){return whereClause;}var whereIterator=whereClause[Symbol.iterator]();var idx=0;var stringDelimiterArray=[];var sliceStartPoint=0;var modifiedWhereClause="";var iter=void 0;var matchCounter=0;while(!(iter=whereIterator.next()).done){if(matchesByIndex.has(idx)){if(stringDelimiterArray.length===0){var _match=matchesByIndex.get(idx);var unparsableValue=_match[0];var replacementValue=replacementFormat.replace('%',++storedValueCounter);storedValueMap.set(replacementValue,unparsableValue);modifiedWhereClause+=whereClause.slice(sliceStartPoint,idx)+replacementValue;sliceStartPoint=idx+unparsableValue.length;}if(++matchCounter===matchesByIndex.size){break;}}else if(stringDelimiterArray.length>0&&iter.value===stringDelimiterArray[0]){stringDelimiterArray.shift();}else if(iter.value==='"'||iter.value==="'"){stringDelimiterArray.unshift(iter.value);}idx++;}modifiedWhereClause+=whereClause.slice(sliceStartPoint);return modifiedWhereClause;}},{key:"_recursivelySetLengthOnAstNodes",value:function _recursivelySetLengthOnAstNodes(ast){var _this56=this;var length=0;switch(ast.type){case"binary_expr":var leftLength=this._recursivelySetLengthOnAstNodes(ast.left);var rightLength=this._recursivelySetLengthOnAstNodes(ast.right);var operatorLength=ast.operator.length;length=leftLength+rightLength+operatorLength+2;break;case"expr_list":length=-2;ast.value.forEach(function(valueNode){_this56._recursivelySetLengthOnAstNodes(valueNode);length+=valueNode.length+2;});length+=2;break;case"column_ref":length=ast.column.length;if(ast.table.length>0){length+=ast.table.length+1;}break;case"string":var prospectiveReplacementKey="'"+ast.value+"'";if(this._semiJoinMap.has(prospectiveReplacementKey)){length=this._semiJoinMap.get(prospectiveReplacementKey).length;}else if(this._unescapedDateMap.has(prospectiveReplacementKey)){length=this._unescapedDateMap.get(prospectiveReplacementKey).length;}else if(this._nestedLookupMap.has(prospectiveReplacementKey)){length=this._nestedLookupMap.get(prospectiveReplacementKey).length;}else{length=ast.value.length+2;}break;case"number":length=ast.value.toString().length;break;case"bool":length=ast.value?4:5;break;default:throw Error('Unexpected node type '+ast.type);}if(ast.paren===true){length+=2;}ast.length=length;return length;}},{key:"_recursivelySetMinLengthOnAstNodes",value:function _recursivelySetMinLengthOnAstNodes(ast,preserveOverallSpecificity){var _this57=this;var effectiveMinimumSize=void 0;switch(ast.type){case'expr_list':var lengths=ast.value.map(function(subAst){return _this57._recursivelySetMinLengthOnAstNodes(subAst,preserveOverallSpecificity)+2;});effectiveMinimumSize=Math.max.apply(this,lengths);break;case'binary_expr':var performDefaultSplit=true;switch(ast.operator){case'AND':if(preserveOverallSpecificity){break;}case'OR':var minLeftOrLength=this._recursivelySetMinLengthOnAstNodes(ast.left,preserveOverallSpecificity);var minRightOrLength=this._recursivelySetMinLengthOnAstNodes(ast.right,preserveOverallSpecificity);var largerMin=Math.max(minLeftOrLength,minRightOrLength);if(ast.paren){largerMin+=2;}effectiveMinimumSize=largerMin;performDefaultSplit=false;break;}if(!performDefaultSplit){break;}var inherentLength=ast.length-(ast.left.length+ast.right.length);var minLeftLength=this._recursivelySetMinLengthOnAstNodes(ast.left,preserveOverallSpecificity);var minRightLength=this._recursivelySetMinLengthOnAstNodes(ast.right,preserveOverallSpecificity);effectiveMinimumSize=inherentLength+minLeftLength+minRightLength;break;default:effectiveMinimumSize=ast.length;}ast.minLength=effectiveMinimumSize;return effectiveMinimumSize;}},{key:"_recursivelySplitUntilTargetSizeReached",value:function _recursivelySplitUntilTargetSizeReached(ast,targetSize,preserveOverallSpecificity){if(ast.length<=targetSize){return[ast];}switch(ast.type){case'expr_list':var partialLists=[[]];var currentPartialListSize=-2;var currentPartialListIndex=0;ast.value.forEach(function(valueNode){if(valueNode.length+2+currentPartialListSize>targetSize){partialLists.push([valueNode]);currentPartialListIndex++;currentPartialListSize=valueNode.length;}else{partialLists[currentPartialListIndex].push(valueNode);currentPartialListSize+=valueNode.length+2;}});var splitListExpressions=[];for(var i=0;i<partialLists.length;i++){var copiedListExpression=JSON.parse(JSON.stringify(ast));copiedListExpression.value=partialLists[i];splitListExpressions.push(copiedListExpression);}return splitListExpressions;case'binary_expr':switch(ast.operator){case'AND':if(preserveOverallSpecificity){var leftTargetLength=void 0;var rightTargetLength=void 0;var splitLeftAsts=void 0;var splitRightAsts=void 0;var leftSideSplitSufficient=targetSize>ast.length-ast.left.length+ast.left.minLength;var rightSideSplitSufficient=targetSize>ast.length-ast.right.length+ast.right.minLength;if(leftSideSplitSufficient){leftTargetLength=targetSize-(ast.length-ast.left.length);splitLeftAsts=this._recursivelySplitUntilTargetSizeReached(ast.left,leftTargetLength,preserveOverallSpecificity);splitRightAsts=[ast.right];}else if(rightSideSplitSufficient){rightTargetLength=targetSize-(ast.length-ast.right.length);splitLeftAsts=[ast.left];splitRightAsts=this._recursivelySplitUntilTargetSizeReached(ast.right,rightTargetLength,preserveOverallSpecificity);}else{var fullLeftSplit=ast.left.minLength<targetSize/2;leftTargetLength=fullLeftSplit?ast.left.minLength:Math.max(ast.left.minLength,targetSize/2);rightTargetLength=fullLeftSplit?Math.max(ast.right.minLength,targetSize/2):ast.right.minLength;splitLeftAsts=this._recursivelySplitUntilTargetSizeReached(ast.left,leftTargetLength,preserveOverallSpecificity);splitRightAsts=this._recursivelySplitUntilTargetSizeReached(ast.right,rightTargetLength,preserveOverallSpecificity);}var combinedAnds=[];splitLeftAsts.forEach(function(left){splitRightAsts.forEach(function(right){var copiedAnd=JSON.parse(JSON.stringify(ast));copiedAnd.left=left;copiedAnd.right=right;combinedAnds.push(copiedAnd);});});return combinedAnds;}this._overallSpecificityPreserved=false;case'OR':var targetOrSize=ast.paren?targetSize-2:targetSize;var splitLeftSide=this._recursivelySplitUntilTargetSizeReached(ast.left,targetOrSize,preserveOverallSpecificity);var splitRightSide=this._recursivelySplitUntilTargetSizeReached(ast.right,targetOrSize,preserveOverallSpecificity);var splitOrs=[].concat(_toConsumableArray(splitLeftSide),_toConsumableArray(splitRightSide));if(ast.paren){splitOrs.forEach(function(or){or.paren=true;});}return splitOrs;case'IN':var inherentInLength=ast.length-ast.right.length;var splitLists=this._recursivelySplitUntilTargetSizeReached(ast.right,targetSize-inherentInLength,preserveOverallSpecificity);var splitIns=[];splitLists.forEach(function(list){var copiedIn=JSON.parse(JSON.stringify(ast));copiedIn.right=list;splitIns.push(copiedIn);});return splitIns;}default:return[ast];}}}]);return WhereClauseSplitter;}();module.exports=WhereClauseSplitter;},{"node-sqlparser":47}],11:[function(require,module,exports){var JSARSettings=function JSARSettings(orgPrefix,rawSettings){_classCallCheck(this,JSARSettings);this.orgPrefix=orgPrefix;this.isServiceCloudEnabled=rawSettings.scSettings.isServiceCloudEnabled;this.salesCloudPrefix=rawSettings.scSettings.salesCloudPrefix;this.serviceCloudPrefix=rawSettings.scSettings.serviceCloudPrefix;this.prefix=rawSettings.scSettings.prefix;this.isMultiCurrencyOrg=rawSettings.calcSettings.isMultiCurrencyOrg;this.calcSettings=rawSettings.calcSettings;this.scSettings=rawSettings.scSettings;this.labels=rawSettings.labels;this.userId=rawSettings.userId;this.isTest=rawSettings.isTest;this.isSubscriptionTermUnitDay=rawSettings.calcSettings.subscriptionTermUnitIsDay;};module.exports=JSARSettings;},{}],12:[function(require,module,exports){var LineCalculationManager=function(){function LineCalculationManager(calcVersion){_classCallCheck(this,LineCalculationManager);this._calcConstructor=typeof window!=='undefined'?window.SB.JSQC:require('../../../../jsqc/'+calcVersion+'/client/calc/jsqc.js');}_createClass(LineCalculationManager,[{key:"calculateQuotes",value:function calculateQuotes(quotes,settings,primaryConn,customerConn){var _this58=this;var calcPromises=[];quotes.forEach(function(qvo){calcPromises.push(_this58._calculateQuote(qvo,settings,primaryConn,customerConn));});return Promise.all(calcPromises);}},{key:"_calculateQuote",value:function _calculateQuote(qvo,settings,primaryConn,customerConn){var jsqc=new this._calcConstructor(settings.calcSettings,qvo);jsqc.setConnection(primaryConn);jsqc.setCustomerOnlyConnection(customerConn);return jsqc.onCalc().catch(function(err){var msgTemplate=settings.labels.msg_amendrenew_err_calcing_quote;var msg=msgTemplate.replace('{0}',qvo.record.Id)+(err.message||err);return Promise.reject(msg);});}}]);return LineCalculationManager;}();module.exports=LineCalculationManager;},{}],13:[function(require,module,exports){'use strict';var ProductDAO=require('./DAO/ProductDAO.js').DAO;var ProductSubqueryDescriptor=require('./DAO/ProductDAO.js').SubqueryDescriptor;var SourceRecordDAO=require('./DAO/SourceRecordDAO.js');var ContractDAO=require('./DAO/ContractDAO.js');var AccountDAO=require('./DAO/AccountDAO.js');var LineItemConvertibleGenerator=require('./common/LineItemConvertibleGenerator.js');var LineItemConvertibleProcessor=require('./common/LineItemConvertibleProcessor.js');var IdToValueCache=require('./common/IdToValueCache.js');var RenewedSubscription=require('./renewal/RenewedSubscription.js');var AmendedSubscription=require('./amendment/AmendedSubscription.js');var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var LineGenerationManager=function(){function LineGenerationManager(conn,settings,services){_classCallCheck(this,LineGenerationManager);this._conn=conn;this._settings=settings;this._services=services;this._logger=jsLogger;}_createClass(LineGenerationManager,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"amendContractToQuote",value:function amendContractToQuote(contract,quote){return this._addContractsToQuote([contract],quote,null,false,{sub:AmendedSubscription});}},{key:"renewContractsToQuote",value:function renewContractsToQuote(contracts,quote,groupsByContract){return this._addContractsToQuote(contracts,quote,groupsByContract,true,{sub:RenewedSubscription});}},{key:"amendSubscriptionsToQuote",value:function amendSubscriptionsToQuote(subIds,quote){return this._addSubscriptionsToQuote(subIds,quote,false,{sub:AmendedSubscription});}},{key:"renewSubscriptionsToQuote",value:function renewSubscriptionsToQuote(subIds,quote){return this._addSubscriptionsToQuote(subIds,quote,true,{sub:RenewedSubscription});}},{key:"_addSubscriptionsToQuote",value:function _addSubscriptionsToQuote(subIds,quote,isRenewal,constructors){var _this59=this;var srDao=new SourceRecordDAO(this._conn,this._settings,this._services);var accDao=new AccountDAO(this._conn,this._settings,this._services);var contractDao=new ContractDAO(this._conn,this._settings,this._services);var prodDao=new ProductDAO(this._conn,this._settings,this._services);var subsSortedByContractId=new IdToValueCache();var sourceRecLoadStartTime=void 0;var userId=this._settings.userId;this._logMessage("LineGenerationManager.js: Load Source Records by subscription ID. SessionId="+userId);sourceRecLoadStartTime=Date.now();return srDao.loadSourceRecordsRelatedToSubscriptions(subIds).then(function(srcRecObject){_this59._logMessage("LineGenerationManager.js: Loading Source Records by Subscription ID took "+(Date.now()-sourceRecLoadStartTime)+" ms. SessionId="+userId);var productIdSet=new Set();var contractIdSet=new Set();var accountIdSet=new Set();var subPrefix=_this59._settings.isServiceCloudEnabled?_this59._settings.serviceCloudPrefix:_this59._settings.salesCloudPrefix;var prodIdField=subPrefix+'ProductId__c';var renewalProductIdField=subPrefix+'RenewalProductId__c';var renewalProductOptionProductIdField=subPrefix+'RenewalProductOptionProductId__c';var contractIdField=_this59._settings.isServiceCloudEnabled?'ServiceContractId':subPrefix+'Contract__c';var accountIdField=subPrefix+'Account__c';srcRecObject.subs.forEach(function(sub){productIdSet.add(sub[prodIdField]);if(sub[renewalProductIdField]){productIdSet.add(sub[renewalProductIdField]);}if(sub[renewalProductOptionProductIdField]){productIdSet.add(sub[renewalProductOptionProductIdField]);}var contractId=sub[contractIdField];contractIdSet.add(contractId);if(!subsSortedByContractId.has(contractId)){subsSortedByContractId.set(contractId,[sub]);}else{subsSortedByContractId.get(contractId).push(sub);}accountIdSet.add(sub[accountIdField]);if(sub[subPrefix+'SegmentKey__c']){throw Error('ERROR: '+sub.attributes.type+' ['+sub.Id+'] is an MDQ Segment. MDQ is currently unsupported in the Advanced Amendment/Renewal Services.');}});var prodSubquery=new ProductSubqueryDescriptor(_this59._settings);prodSubquery.includeCosts();var pricebookIds=[quote.record[_this59._settings.salesCloudPrefix+'PricebookId__c']];var currencyCodes=quote.record.CurrencyIsoCode?[quote.record.CurrencyIsoCode]:[];prodSubquery.includePriceEntriesFilteredByPricebookAndCurrency(pricebookIds,currencyCodes);var productQueryPromise=prodDao.loadProductsByIds([].concat(_toConsumableArray(productIdSet)),prodSubquery);var contractQueryPromise=contractDao.loadContractsByIds([].concat(_toConsumableArray(contractIdSet)));var accountQueryPromise=accDao.getAccountsByIds([].concat(_toConsumableArray(accountIdSet)));return Promise.all([productQueryPromise,contractQueryPromise,accountQueryPromise]);}).then(function(queryResults){var productsById=queryResults[0];var contractsById=queryResults[1];var accountsById=queryResults[2];var args={contractRecordArray:[].concat(_toConsumableArray(contractsById.values())),accountsById:accountsById,productsById:productsById,sourceRecordObject:{subsByContractId:subsSortedByContractId,assets:[]},quote:quote,groupsByContract:null,isRenewal:isRenewal,constructors:constructors};return _this59._generateAndProcessContractBasedConvertibles(args);});}},{key:"_addContractsToQuote",value:function _addContractsToQuote(contracts,quote,groupsByContract,isRenewal,constructors){var _this60=this;var accDao=new AccountDAO(this._conn,this._settings);var srDao=new SourceRecordDAO(this._conn,this._settings,this._services);var prodDao=new ProductDAO(this._conn,this._settings,this._services);var accountsById=null;var accPromise=accDao.getAccountsByIds(contracts.map(function(contract){return contract.AccountId;})).then(function(accsById){_this60._logMessage('LineGenerationManager.js: Getting accounts by ids took '+(Date.now()-promiseAllStartTime)+' ms. SessionId='+_this60._settings.userId);accountsById=accsById;});var srcRecObject=null;var prodsById=null;var loadProductsByIdsStartTime=void 0;var srcRecPromiseChain=srDao.loadSourceRecordsRelatedToContracts(contracts).then(function(results){_this60._logMessage('LineGenerationManager.js: Loading subscriptions related to contracts took '+(Date.now()-promiseAllStartTime)+' ms. SessionId='+_this60._settings.userId);srcRecObject=results;var productIds=[];var subPrefix=_this60._settings.isServiceCloudEnabled?_this60._settings.serviceCloudPrefix:_this60._settings.salesCloudPrefix;var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{for(var _iterator9=results.subsByContractId.values()[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){var subList=_step9.value;subList.forEach(function(sub){productIds.push(sub[subPrefix+'ProductId__c']);var renProdId=sub[subPrefix+'RenewalProductId__c'];if(renProdId){productIds.push(renProdId);}var renOpProdId=sub[subPrefix+'RenewalProductOptionProductId__c'];if(renOpProdId){productIds.push(renOpProdId);}});}}catch(err){_didIteratorError9=true;_iteratorError9=err;}finally{try{if(!_iteratorNormalCompletion9&&_iterator9.return){_iterator9.return();}}finally{if(_didIteratorError9){throw _iteratorError9;}}}var prodSubquery=new ProductSubqueryDescriptor(_this60._settings);prodSubquery.includeCosts();var pricebookIds=[quote.record[_this60._settings.salesCloudPrefix+'PricebookId__c']];var currencyCodes=quote.record.CurrencyIsoCode?[quote.record.CurrencyIsoCode]:[];prodSubquery.includePriceEntriesFilteredByPricebookAndCurrency(pricebookIds,currencyCodes);_this60._logMessage('LineGenerationManager.js: Load products by ids. SessionId='+_this60._settings.userId);loadProductsByIdsStartTime=Date.now();return prodDao.loadProductsByIds(productIds,prodSubquery);}).then(function(productsById){_this60._logMessage('LineGenerationManager.js: Loading products by ids took '+(Date.now()-loadProductsByIdsStartTime)+' ms. SessionId='+_this60._settings.userId);prodsById=productsById;});this._logMessage('LineGenerationManager.js: Load subscriptions related to contracts. SessionId='+this._settings.userId);this._logMessage('LineGenerationManager.js: Get accounts by ids. SessionId='+this._settings.userId);var promiseAllStartTime=Date.now();return Promise.all([accPromise,srcRecPromiseChain]).then(function(){var args={contractRecordArray:contracts,accountsById:accountsById,productsById:prodsById,sourceRecordObject:srcRecObject,quote:quote,groupsByContract:groupsByContract,isRenewal:isRenewal,constructors:constructors};return _this60._generateAndProcessContractBasedConvertibles(args);});}},{key:"_generateAndProcessContractBasedConvertibles",value:function _generateAndProcessContractBasedConvertibles(argBundle){var _this61=this;var contractRecordArray=argBundle.contractRecordArray;var accountsById=argBundle.accountsById;var productsById=argBundle.productsById;var sourceRecordObject=argBundle.sourceRecordObject;var quote=argBundle.quote;var groupsByContract=argBundle.groupsByContract;var isRenewal=argBundle.isRenewal;var constructors=argBundle.constructors;var licg=new LineItemConvertibleGenerator(this._settings,this._services);var licp=new LineItemConvertibleProcessor(this._settings);var contractPrefix=this._settings.isServiceCloudEnabled?this._settings.serviceCloudPrefix:this._settings.salesCloudPrefix;var promiseChainStartTime=void 0;var nthContractStartTime=void 0;var processNthTreeListStartTime=void 0;var processContractsIteratively=function processContractsIteratively(n){if(contractRecordArray.length<=n){_this61._logMessage('LineGenerationManager.js: Processing all contracts took '+(Date.now()-promiseChainStartTime)+' ms. SessionId='+_this61._settings.userId);return Promise.resolve(quote);}else{_this61._logMessage('LineGenerationManager.js: Process contract '+(n+1)+' of '+contractRecordArray.length+'. SessionId='+_this61._settings.userId);nthContractStartTime=Date.now();var contract=contractRecordArray[n];var _subs=sourceRecordObject.subsByContractId.get(contract.Id);var assets=[];var acc=accountsById.get(contract.AccountId);var group=groupsByContract?groupsByContract.get(contract.Id):null;var relatedObjects={quote:quote.record,group:group?group.record:null,account:acc,contract:contract,productsById:productsById};var processOptions={isRenewal:isRenewal,preserveBundleStructure:contract[contractPrefix+'PreserveBundleStructureUponRenewals__c'],combineSubscriptionQuantities:contract[contractPrefix+'SubscriptionQuantitiesCombined__c']};var convertibles=licg.generateConvertibles(_subs,assets,constructors,relatedObjects,processOptions);processNthTreeListStartTime=Date.now();return licp.processConvertibleTrees(convertibles,quote,group).then(function(){_this61._logMessage('LineGenerationManager.js: Processing convertibles for contract '+(n+1)+' of '+contractRecordArray.length+' took '+(Date.now()-processNthTreeListStartTime)+' ms. SessionId='+_this61._settings.userId);_this61._logMessage('LineGenerationManager.js: Processing contract '+(n+1)+' of '+contractRecordArray.length+' took '+(Date.now()-nthContractStartTime)+' ms. SessionId='+_this61._settings.userId);return processContractsIteratively(n+1);});}};this._logMessage('LineGenerationManager.js: Process contracts iteratively. SessionId='+this._settings.userId);promiseChainStartTime=Date.now();return processContractsIteratively(0);}}]);return LineGenerationManager;}();module.exports=LineGenerationManager;},{"./DAO/AccountDAO.js":1,"./DAO/ContractDAO.js":3,"./DAO/ProductDAO.js":7,"./DAO/SourceRecordDAO.js":9,"./amendment/AmendedSubscription.js":16,"./common/IdToValueCache.js":18,"./common/LineItemConvertibleGenerator.js":20,"./common/LineItemConvertibleProcessor.js":21,"./renewal/RenewedSubscription.js":33,"js-logger":38}],14:[function(require,module,exports){var FieldMetadataService=require('./data/FieldMetadataService.js');var ServicesManager=function ServicesManager(conn,settings){_classCallCheck(this,ServicesManager);this.fieldMetadataService=new FieldMetadataService(conn,settings);};module.exports=ServicesManager;},{"./data/FieldMetadataService.js":24}],15:[function(require,module,exports){'use strict';var LineItemConvertible=require('../common/LineItemConvertible.js');var AmendedItem=function(_LineItemConvertible){_inherits(AmendedItem,_LineItemConvertible);function AmendedItem(){_classCallCheck(this,AmendedItem);return _possibleConstructorReturn(this,(AmendedItem.__proto__||Object.getPrototypeOf(AmendedItem)).apply(this,arguments));}_createClass(AmendedItem,[{key:"_setValuesFromOrigin",value:function _setValuesFromOrigin(lineVO){_get(AmendedItem.prototype.__proto__||Object.getPrototypeOf(AmendedItem.prototype),"_setValuesFromOrigin",this).call(this,lineVO);var record=lineVO.record;var quoteLinePrefix=this._salesCloudPrefix;var sourcePrefix=this._sourceRecPrefix;var sourceRec=this._sourceRecord;record[quoteLinePrefix+'PriorQuantity__c']=record[quoteLinePrefix+'Quantity__c'];record[quoteLinePrefix+'Existing__c']=true;record[quoteLinePrefix+'PartnerDiscount__c']=sourceRec[sourcePrefix+'PartnerDiscount__c'];record[quoteLinePrefix+'DistributorDiscount__c']=sourceRec[sourcePrefix+'DistributorDiscount__c'];record[quoteLinePrefix+'Discount__c']=sourceRec[sourcePrefix+'Discount__c'];record[quoteLinePrefix+'UnitCost__c']=sourceRec[sourcePrefix+'UnitCost__c'];record[quoteLinePrefix+'OriginalUnitCost__c']=sourceRec[sourcePrefix+'OriginalUnitCost__c'];record[quoteLinePrefix+'MarkupRate__c']=sourceRec[sourcePrefix+'MarkupRate__c'];record[quoteLinePrefix+'Markup__c']=sourceRec[sourcePrefix+'MarkupAmount__c'];var blockPriced=(record[quoteLinePrefix+'PricingMethod__c']||'list').toLowerCase()==='block';var slabDiscounted=(sourceRec[sourcePrefix+'DiscountScheduleType__c']||'').toLowerCase()==='slab';if(blockPriced||slabDiscounted){record[quoteLinePrefix+'Discount__c']=sourceRec[sourcePrefix+'Discount__c'];}else{record[quoteLinePrefix+'Discount__c']=sourceRec[sourcePrefix+'Discount__c'];record[quoteLinePrefix+'AdditionalDiscountAmount__c']=sourceRec[sourcePrefix+'AdditionalDiscountAmount__c'];}}}]);return AmendedItem;}(LineItemConvertible);module.exports=AmendedItem;},{"../common/LineItemConvertible.js":19}],16:[function(require,module,exports){'use strict';var AmendedItem=require('./AmendedItem.js');var AmendedSubscription=function(_AmendedItem){_inherits(AmendedSubscription,_AmendedItem);function AmendedSubscription(){_classCallCheck(this,AmendedSubscription);return _possibleConstructorReturn(this,(AmendedSubscription.__proto__||Object.getPrototypeOf(AmendedSubscription)).apply(this,arguments));}_createClass(AmendedSubscription,[{key:"_getSummedQuantity",value:function _getSummedQuantity(){var _this64=this;var sum=0;var allRecs=this._originalRecords.concat(this._revisions);allRecs.forEach(function(rec){sum+=rec[_this64._qtyField];});return sum;}},{key:"_shouldGenerateLines",value:function _shouldGenerateLines(){if(!_get(AmendedSubscription.prototype.__proto__||Object.getPrototypeOf(AmendedSubscription.prototype),"_shouldGenerateLines",this).call(this)){return false;}var sourceRec=this._sourceRecord;var prefix=this._sourceRecPrefix;if(sourceRec[prefix+'TerminatedDate__c']){return false;}var endDate=sourceRec[this._sourceEndDateField];var today=new Date().toISOString();if(endDate&&!(today<endDate)){return false;}return true;}},{key:"_setValuesFromProduct",value:function _setValuesFromProduct(lineVO){_get(AmendedSubscription.prototype.__proto__||Object.getPrototypeOf(AmendedSubscription.prototype),"_setValuesFromProduct",this).call(this,lineVO);var record=lineVO.record;var prefix=this._salesCloudPrefix;var product=this._product;if(record[prefix+'SubscriptionPricing__c'].toLowerCase()==='percent of total'){record[prefix+'ListPrice__c']=0;}else if(!record[prefix+'PriceEditable__c']){var listPrice=null;var pricebook=this._quote[prefix+'PricebookId__c'];var currencyCode=record['CurrencyIsoCode'];if(product.PricebookEntries){var entryCount=product.PricebookEntries.records.length;for(var i=0;i<entryCount;i++){var entry=product.PricebookEntries.records[i];if(entry.Pricebook2Id.slice(0,15)===pricebook.slice(0,15)){if(!this._settings.isMultiCurrencyOrg||entry.CurrencyIsoCode===currencyCode){listPrice=entry.UnitPrice;break;}}}}record[prefix+'ListPrice__c']=listPrice;}}},{key:"_setValuesFromOrigin",value:function _setValuesFromOrigin(lineVO){_get(AmendedSubscription.prototype.__proto__||Object.getPrototypeOf(AmendedSubscription.prototype),"_setValuesFromOrigin",this).call(this,lineVO);var record=lineVO.record;var quoteLinePrefix=this._salesCloudPrefix;var sourcePrefix=this._sourceRecPrefix;var sourceRec=this._sourceRecord;record[this._amendedItemField]=sourceRec.Id;var notPercentOfTotal=record[quoteLinePrefix+'SubscriptionPricing__c'].toLowerCase()!=='percent of total';var priceEditable=record[quoteLinePrefix+'PriceEditable__c'];if(notPercentOfTotal&&priceEditable){var prorateMultiplier=sourceRec[sourcePrefix+'ProrateMultiplier__c'];var subListPrice=sourceRec[sourcePrefix+'ListPrice__c'];record[quoteLinePrefix+'ListPrice__c']=prorateMultiplier?subListPrice/prorateMultiplier:subListPrice;}var sourceStartDate=sourceRec[this._sourceStartDateField];var quoteStartDate=this._quote[this._salesCloudPrefix+'StartDate__c'];if(sourceStartDate>quoteStartDate){record[quoteLinePrefix+'StartDate__c']=sourceStartDate;}var sourceEndDate=sourceRec[this._sourceEndDateField];var quoteEndDate=this._quote[this._salesCloudPrefix+'EndDate__c'];if(sourceEndDate!==quoteEndDate){record[quoteLinePrefix+'EndDate__c']=sourceEndDate;}var rpm=(this._account[this._salesCloudPrefix+'RenewalPricingMethod__c']||'same').toLowerCase();if(rpm==='uplift'&&!this._isPriceHoldInEffect()){if(record[quoteLinePrefix+'SubscriptionPricing__c'].toLowerCase()==='percent of total'){record[quoteLinePrefix+'SubscriptionPercent__c']*=(100+(upliftRate||0))/100;}}}},{key:"_sourceRecPrefix",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix:this._serviceCloudPrefix;}},{key:"_qtyField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'Quantity__c':'Quantity';}},{key:"_amendedItemField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'UpgradedSubscription__c':this._serviceCloudPrefix+'UpgradedContractLine__c';}},{key:"_sourceStartDateField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'StartDate__c':'StartDate';}},{key:"_sourceEndDateField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'EndDate__c':'EndDate';}}]);return AmendedSubscription;}(AmendedItem);module.exports=AmendedSubscription;},{"./AmendedItem.js":15}],17:[function(require,module,exports){(function(process){var logger=require('js-logger').logger.getLogger("AR Data Tracker");function _sendDataChangesToParent(changeType,changeArgs){if(process&&process.send){process.send({changeType:changeType,changeArgs:changeArgs});}else{logger.error('No parent process exists to whom change data should be sent.');}}var DELETE='delete';var CREATE='create';var UNCREATE='uncreate';var CHANGE='change';module.exports.DELETE=DELETE;module.exports.CREATE=CREATE;module.exports.UNCREATE=UNCREATE;module.exports.CHANGE=CHANGE;module.exports.storeDeletedRecordIds=function(ids,sobjectType){_sendDataChangesToParent(DELETE,[ids,sobjectType]);};module.exports.storeCreatedRecordIds=function(ids,sobjectType,parentIds){_sendDataChangesToParent(CREATE,[ids,sobjectType,parentIds]);};module.exports.storeChangedRecords=function(records){_sendDataChangesToParent(CHANGE,[records]);};module.exports.unstoreCreatedRecordIds=function(ids){_sendDataChangesToParent(UNCREATE,[ids]);};}).call(this,require('_process'));},{"_process":52,"js-logger":38}],18:[function(require,module,exports){'use strict';var IdToValueCache=function(){function IdToValueCache(){_classCallCheck(this,IdToValueCache);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}this._innerMap=new Map(args);}_createClass(IdToValueCache,[{key:"has",value:function has(key){return this._innerMap.has(key!=null?key.slice(0,15):key);}},{key:"get",value:function get(key){return this._innerMap.get(key!=null?key.slice(0,15):key);}},{key:"set",value:function set(key,val){return this._innerMap.set(key!=null?key.slice(0,15):key,val);}},{key:"forEach",value:function forEach(callback){return this._innerMap.forEach(callback);}},{key:"entries",value:function entries(){return this._innerMap.entries();}},{key:"values",value:function values(){return this._innerMap.values();}},{key:"clear",value:function clear(){return this._innerMap.clear();}},{key:"delete",value:function _delete(key){return this._innerMap.delete(key!=null?key.slice(0,15):key);}},{key:"keys",value:function keys(){return this._innerMap.keys();}},{key:Symbol.iterator,value:function value(){return this._innerMap.entries();}}]);return IdToValueCache;}();module.exports=IdToValueCache;},{}],19:[function(require,module,exports){(function(process){'use strict';var LineItemConvertible=function(){function LineItemConvertible(key,settings,objMap,services){_classCallCheck(this,LineItemConvertible);this._salesCloudPrefix=settings.salesCloudPrefix||'';this._serviceCloudPrefix=settings.serviceCloudPrefix||'';this._key=key;this._settings=settings;this._account=objMap.account;this._contract=objMap.contract;this._product=objMap.product;this._quote=objMap.quote;this._group=objMap.group;this._services=services;this._parent=null;this._children=[];this._originalRecords=[];this._revisions=[];this._createdLines=[];this._initialized=false;}_createClass(LineItemConvertible,[{key:"_initialize",value:function _initialize(){var _this65=this;if(this._initialized){return Promise.resolve();}else{var prodMappedFields=this._services.fieldMetadataService.getSharedMappableFieldNames('Product2',this._salesCloudPrefix+'QuoteLine__c');var sourceRecType=this._sourceRecord.attributes.type;var sourceMappedFields=this._services.fieldMetadataService.getSharedMappableFieldNames(sourceRecType,this._salesCloudPrefix+'QuoteLine__c');return Promise.all([prodMappedFields,sourceMappedFields]).then(function(results){_this65._mappedProductFields=results[0];_this65._mappedSourceFields=results[1];_this65._initialized=true;});}}},{key:"addOriginalRecord",value:function addOriginalRecord(rec){this._originalRecords.push(rec);}},{key:"addRevision",value:function addRevision(rec){this._revisions.push(rec);}},{key:"addParent",value:function addParent(parent){this._parent=parent;}},{key:"addChild",value:function addChild(child){this._children.push(child);}},{key:"process",value:function process(){var _this66=this;if(!this._shouldGenerateLines()){return Promise.resolve();}return this._createVO().then(function(){return Promise.all(_this66._processChildren());});}},{key:"_processChildren",value:function _processChildren(){var childPromiseArray=[];this._children.forEach(function(child){childPromiseArray.push(child.process());});return childPromiseArray;}},{key:"_shouldGenerateLines",value:function _shouldGenerateLines(){return this._getSummedQuantity()>0;}},{key:"_isPriceHoldInEffect",value:function _isPriceHoldInEffect(){var priceHoldDateString=this._account[this._salesCloudPrefix+'PriceHoldEnd__c'];if(!priceHoldDateString){return false;}var parts=priceHoldDateString.split('-');var priceHoldDate=Date.UTC(parts[0],parts[1]-1,parts[2]);var now=Date.now();return priceHoldDate>now;}},{key:"_getSummedQuantity",value:function _getSummedQuantity(){throw new Error('LineItemConvertible._getSummedQuantity() should be overridden by child classes, and never invoked directly.');}},{key:"_createVO",value:function _createVO(){var _this67=this;if(this.lineVO){return Promise.resolve();}else{return this._initialize().then(function(){var lineVO={dirty:false,record:{attributes:{type:_this67._salesCloudPrefix+'QuoteLine__c'}}};_this67._setValuesFromQuote(lineVO);_this67._setValuesFromGroup(lineVO);_this67._setValuesFromProduct(lineVO);_this67._setValuesFromOrigin(lineVO);_this67.lineVO=lineVO;});}}},{key:"_setValuesFromQuote",value:function _setValuesFromQuote(vo){var record=vo.record;var quote=this._quote;if(this._settings.isMultiCurrencyOrg){record['CurrencyIsoCode']=quote['CurrencyIsoCode'];}record[this._salesCloudPrefix+'Quote__c']=quote.Id;}},{key:"_setValuesFromGroup",value:function _setValuesFromGroup(vo){var record=vo.record;var prefix=this._salesCloudPrefix;record[prefix+'SubscriptionScope__c']=this._group?'Group':'Quote';}},{key:"_setValuesFromProduct",value:function _setValuesFromProduct(vo){var record=vo.record;var product=this._product;var prefix=this._salesCloudPrefix;record[prefix+'Product__c']=product.Id;if(product[prefix+'BatchQuantity__c']!=null){record[prefix+'BatchQuantity__c']=product[prefix+'BatchQuantity__c'];}record[prefix+'PriceEditable__c']=product[prefix+'PriceEditable__c'];record[prefix+'CostEditable__c']=product[prefix+'CostEditable__c'];record[prefix+'PricingMethodEditable__c']=product[prefix+'PricingMethodEditable__c'];record[prefix+'PricingMethod__c']=product[prefix+'PricingMethod__c']||'List';record[prefix+'NonDiscountable__c']=product[prefix+'NonDiscountable__c'];record[prefix+'NonPartnerDiscountable__c']=product[prefix+'NonPartnerDiscountable__c'];record[prefix+'CompoundDiscountRate__c']=product[prefix+'CompoundDiscountRate__c'];record[prefix+'AllowAssetRefund__c']=false;record[prefix+'Optional__c']=product[prefix+'Optional__c'];record[prefix+'Hidden__c']=product[prefix+'Hidden__c'];record[prefix+'Taxable__c']=product[prefix+'Taxable__c'];record[prefix+'SubscriptionPricing__c']=product[prefix+'SubscriptionPricing__c'];if((product[prefix+'SubscriptionPricing__c']||'').toLowerCase()==='percent of total'){var errMessage='ERROR: Subscription ['+this._sourceRecord.Id+'] represents Product ['+product.Id+'], which is a Percent of Total Subscription.'+' Percent of Total Subscriptions are unsupported in the Advanced Amendment/Renewal Service.';throw Error(errMessage);}record[prefix+'SubscriptionPercent__c']=product[prefix+'SubscriptionPercent__c'];record[prefix+'DefaultSubscriptionTerm__c']=product[prefix+'SubscriptionTerm__c'];record[prefix+'SubscriptionBase__c']=product[prefix+'SubscriptionBase__c'];record[prefix+'SubscriptionCategory__c']=product[prefix+'SubscriptionCategory__c'];record[prefix+'TaxCode__c']=product[prefix+'TaxCode__c'];var defaultListPrice=null;if(product.PricebookEntries&&product.PricebookEntries.records.length===1){defaultListPrice=product.PricebookEntries.records[0].UnitPrice;}record[prefix+'ListPrice__c']=defaultListPrice;record[prefix+'OriginalPrice__c']=defaultListPrice;if(product[prefix+'DynamicPricingConstraint__c']){switch(product[prefix+'DynamicPricingConstraint__c'].toLowerCase()){case'list price is minimum':record[prefix+'MinimumPrice__c']=record[prefix+'ListPrice__c'];break;case'list price is maximum':record[prefix+'MaximumPrice__c']=record[prefix+'ListPrice__c'];break;}}if(product[prefix+'Costs__r']&&product[prefix+'Costs__r'].records.length>0){var costId=null;for(var i=0;i<product[prefix+'Costs__r'].records.length;i++){var cost=product[prefix+'Costs__r'].records[i];if(!this._settings.isMultiCurrencyOrg){costId=cost.Id;break;}else if(cost['CurrencyIsoCode']===record['CurrencyIsoCode']){costId=cost.Id;break;}}record[prefix+'Cost__c']=costId;}if(record[prefix+'PricingMethod__c'].toLowerCase()==='custom'){record[prefix+'CustomerPrice__c']=record[prefix+'ListPrice__c'];}vo.subscriptionTargetId=product[prefix+'SubscriptionTarget__c'];vo.subscriptionExists=product[prefix+'SubscriptionPricing__c']!=null;vo.hasConfigAttrs=product[prefix+'HasConfigurationAttributes__c'];vo.reconfigurationDisabled=product[prefix+'ReconfigurationDisabled__c'];vo.descriptionLocked=product[prefix+'DescriptionLocked__c'];vo.configurationType=product[prefix+'ConfigurationType__c'];vo.configurationEvent=product[prefix+'ConfigurationEvent__c'];vo.productQuantityEditable=product[prefix+'QuantityEditable__c'];vo.productQuantityScale=product[prefix+'QuantityScale__c'];this._mappedProductFields.forEach(function(field){record[field]=product[field];});}},{key:"_getEffectiveOptionId",value:function _getEffectiveOptionId(sourceRec){return sourceRec[this._sourceRecPrefix+'ProductOption__c'];}},{key:"_preserveBundleStructure",value:function _preserveBundleStructure(){if(this._contract){var contractPrefix=this._settings.isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;return this._contract[contractPrefix+'PreserveBundleStructureUponRenewals__c']||false;}else{return this._account[this._salesCloudPrefix+'PreserveBundle__c']||false;}}},{key:"_setValuesFromOrigin",value:function _setValuesFromOrigin(vo){var record=vo.record;var quoteLinePrefix=this._salesCloudPrefix;record[quoteLinePrefix+'Quantity__c']=this._getSummedQuantity();var sourcePrefix=this._sourceRecPrefix;var sourceRec=this._sourceRecord;record[quoteLinePrefix+'ChargeType__c']=sourceRec[sourcePrefix+'ChargeType__c'];record[quoteLinePrefix+'BillingType__c']=sourceRec[sourcePrefix+'BillingType__c'];record[quoteLinePrefix+'BillingFrequency__c']=sourceRec[sourcePrefix+'BillingFrequency__c'];record[quoteLinePrefix+'DiscountSchedule__c']=sourceRec[sourcePrefix+'DiscountSchedule__c'];record[quoteLinePrefix+'TermDiscountSchedule__c']=sourceRec[sourcePrefix+'TermDiscountSchedule__c'];if(this._preserveBundleStructure()){record[quoteLinePrefix+'ProductOption__c']=this._getEffectiveOptionId(sourceRec);var dynOpId=sourceRec[sourcePrefix+'DynamicOptionId__c'];if(dynOpId){var dynOpParts=dynOpId.split(':');if(dynOpParts.length===1||dynOpParts[1]===record[quoteLinePrefix+'Product__c']){record[quoteLinePrefix+'DynamicOptionId__c']=dynOpId;}else if(dynOpParts.length>1){var featureId=this._parent.lineVO.record[quoteLinePrefix+'Product__c']===sourceRec[sourcePrefix+'RequiredByProduct__c']?dynOpParts[0]:'null';record[quoteLinePrefix+'DynamicOptionId__c']=featureId+':'+record[quoteLinePrefix+'Product__c'];}}record[quoteLinePrefix+'OptionLevel__c']=sourceRec[sourcePrefix+'OptionLevel__c'];record[quoteLinePrefix+'OptionType__c']=sourceRec[sourcePrefix+'OptionType__c'];record[quoteLinePrefix+'OptionDiscount__c']=sourceRec[sourcePrefix+'OptionDiscount__c'];record[quoteLinePrefix+'OptionDiscountAmount__c']=sourceRec[sourcePrefix+'OptionDiscountAmount__c'];record[quoteLinePrefix+'Bundle__c']=sourceRec[sourcePrefix+'Bundle__c'];record[quoteLinePrefix+'Bundled__c']=sourceRec[sourcePrefix+'Bundled__c'];record[quoteLinePrefix+'ComponentDiscountedByPackage__c']=sourceRec[sourcePrefix+'ComponentDiscountedByPackage__c'];switch(record[quoteLinePrefix+'OptionType__c']){case'Component':var parentQty=this._parent.lineVO.record[quoteLinePrefix+'Quantity__c'];record[quoteLinePrefix+'BundledQuantity__c']=record[quoteLinePrefix+'Quantity__c']/parentQty;break;case'Accessory':record[quoteLinePrefix+'BundledQuantity__c']=record[quoteLinePrefix+'Quantity__c'];break;}}if(sourceRec[sourcePrefix+'QuoteLine__r']){record[quoteLinePrefix+'Description__c']=sourceRec[sourcePrefix+'QuoteLine__r'][quoteLinePrefix+'Description__c'];}this._mappedSourceFields.forEach(function(field){record[field]=sourceRec[field];});}},{key:"key",get:function get(){return this._key;}},{key:"children",get:function get(){return this._children;}},{key:"parent",get:function get(){return this._parent;}},{key:"conversionResults",get:function get(){return this.lineVO;}},{key:"_sourceRecord",get:function get(){return this._originalRecords[0];}},{key:"_sourceRecType",get:function get(){return this._sourceRecord.attributes.type;}},{key:"_sourceRecPrefix",get:function get(){throw new Error('LineItemConvertible._sourceRecPrefix should be overridden by child classes, and never invoked directly.');}}]);return LineItemConvertible;}();module.exports=LineItemConvertible;}).call(this,require('_process'));},{"_process":52}],20:[function(require,module,exports){'use strict';var LineItemConvertibleGenerator=function(){function LineItemConvertibleGenerator(settings,services){_classCallCheck(this,LineItemConvertibleGenerator);this._settings=settings;this._isServiceCloudEnabled=settings.isServiceCloudEnabled;this._salesCloudPrefix=settings.salesCloudPrefix;this._serviceCloudPrefix=settings.serviceCloudPrefix;this._subPrefix=this._isServiceCloudEnabled?this._serviceCloudPrefix:this._salesCloudPrefix;this._subscriptionType=this._isServiceCloudEnabled?'ContractLineItem':this._salesCloudPrefix+'Subscription__c';this._services=services;this._rootKeyset=new Set();this._rootArray=[];this._convertiblesByKey=new Map();this._convertibleKeysByRecordId=new Map();this._orphanConvertiblesByParentId=new Map();this._orphanIdsByParentId=new Map();}_createClass(LineItemConvertibleGenerator,[{key:"generateConvertibles",value:function generateConvertibles(subscriptions,assets,constructorMap,relatedObjects,processOptions){var _this68=this;this._rootArray=[];this._rootKeyset=new Set();if(processOptions.preserveBundleStructure&&processOptions.combineSubscriptionQuantities){throw Error('ERROR: "Preserve Bundle Structure" and "Combine Subscription Quantities" cannot be active simultaneously.');}var argArray=[subscriptions,this._subPrefix,this._subPrefix+'RevisedSubscription__c',{standard:constructorMap.sub,mdq:constructorMap.mdq},processOptions];var rfArg=this._subPrefix+'RevisedSubscription__c';var constrArg={standard:constructorMap.sub,mdq:constructorMap.mdq};this._processRecords(subscriptions,this._subPrefix,rfArg,constrArg,relatedObjects,processOptions);if(assets&&assets.length>0){throw Error('ERROR: Assets currently unsupported in Advanced Amendment/Renewal Services.');}if(this._orphanIdsByParentId.size!==0){var firstAvailablePair=this._orphanIdsByParentId.entries().next().value;var parentId=firstAvailablePair[0];var firstOrphanId=firstAvailablePair[1][0];var firstAvailableOrphanConvertible=this._orphanConvertiblesByParentId.get(parentId)[0];if(parentId.slice(0,3)!==firstOrphanId.slice(0,3)){throw Error('ERROR: Subscription ['+firstOrphanId+'] is a child of Asset ['+parentId+']. Assets are currently unsupported in Advanced Amendment/Renewal Services.');}var errMsg=this._settings.labels.msg_amendrenew_err_parent_record_not_found.replace('{0}',firstAvailableOrphanConvertible._sourceRecType).replace('{1}',firstOrphanId).replace('{2}',parentId);throw Error(errMsg);}this._rootKeyset.forEach(function(rootKey){_this68._rootArray.push(_this68._convertiblesByKey.get(rootKey));});return this._rootArray;}},{key:"_processRecords",value:function _processRecords(records,prefix,revisionField,constructors,relatedObjects,processOptions){var recCount=records.length;for(var i=0;i<recCount;i++){var rec=records[i];if(this._convertibleKeysByRecordId.has(rec.Id)){continue;}var conKey=this._determineConvertibleKey(rec,prefix,revisionField,processOptions);var convertible=void 0;var convertibleCreatedFromScratch=true;if(this._convertiblesByKey.has(conKey)){convertibleCreatedFromScratch=false;convertible=this._convertiblesByKey.get(conKey);}else if(conKey.startsWith('MDQ_')){throw Error('ERROR: '+rec.attributes.type+' ['+rec.Id+'] is an MDQ Segment. MDQ is currently unsupported in the Advanced Amendment/Renewal Services.');}else{var relatedRecordBundle=this._createRelatedRecordBundle(rec,prefix,relatedObjects,processOptions);convertible=new constructors.standard(conKey,this._settings,relatedRecordBundle,this._services);this._convertiblesByKey.set(conKey,convertible);}if(rec[revisionField]){convertible.addRevision(rec);}else{convertible.addOriginalRecord(rec);}if(convertibleCreatedFromScratch&&(!rec[prefix+'RequiredById__c']||!processOptions.preserveBundleStructure)){this._rootKeyset.add(conKey);}this._convertibleKeysByRecordId.set(rec.Id,conKey);if(!processOptions.preserveBundleStructure){continue;}this._matchOrphansToParent(convertible,rec.Id);var parentId=rec[prefix+'RequiredById__c'];if(parentId&&!convertible.parent){if(!convertibleCreatedFromScratch){this._rootKeyset.delete(conKey);}if(this._convertibleKeysByRecordId.has(parentId)){var parentKey=this._convertibleKeysByRecordId.get(parentId);var parentConvertible=this._convertiblesByKey.get(parentKey);convertible.addParent(parentConvertible);parentConvertible.addChild(convertible);}else{if(this._orphanConvertiblesByParentId.has(parentId)){this._orphanConvertiblesByParentId.get(parentId).push(convertible);}else{this._orphanConvertiblesByParentId.set(parentId,[convertible]);}if(this._orphanIdsByParentId.has(parentId)){this._orphanIdsByParentId.get(parentId).push(rec.Id);}else{this._orphanIdsByParentId.set(parentId,[rec.Id]);}}}}}},{key:"_determineConvertibleKey",value:function _determineConvertibleKey(record,prefix,revisionField,processOptions){if(record[prefix+'SegmentKey__c']){return'MDQ_'+record[prefix+'SegmentKey__c'];}else if(processOptions.combineSubscriptionQuantities&&record.attributes.type===this._subscriptionType){var effectiveProductId=record[prefix+'ProductId__c'];if(processOptions.isRenewal){effectiveProductId=record[prefix+'RenewalProductId__c']||effectiveProductId;}var endDateField=this._isServiceCloudEnabled?'EndDate':this._salesCloudPrefix+'EndDate__c';return effectiveProductId+'_'+record[endDateField];}else{return record[revisionField]||record.Id;}}},{key:"_createRelatedRecordBundle",value:function _createRelatedRecordBundle(record,prefix,relatedObjects,processOptions){var relatedRecords={quote:relatedObjects.quote,group:relatedObjects.group,account:relatedObjects.account,contract:relatedObjects.contract};var productsById=relatedObjects.productsById;var effectiveProductId=null;if(record.attributes.type==='Asset'){effectiveProductId=record.Product2Id;}else if(processOptions.isRenewal){var renewalOptionProduct=processOptions.preserveBundleStructure?record[prefix+'RenewalProductOptionProductId__c']:null;var renewalProduct=!processOptions.preserveBundleStructure||record[prefix+'ProductOption__c']==null?record[prefix+'RenewalProductId__c']:null;effectiveProductId=renewalOptionProduct||renewalProduct||record[prefix+'ProductId__c'];}else{effectiveProductId=record[prefix+'ProductId__c'];}relatedRecords.product=productsById.get(effectiveProductId);return relatedRecords;}},{key:"_matchOrphansToParent",value:function _matchOrphansToParent(parent,id){if(this._orphanConvertiblesByParentId.has(id)){var orphans=this._orphanConvertiblesByParentId.get(id);var orphanCount=orphans.length;for(var j=0;j<orphanCount;j++){var orphan=orphans[j];if(orphan.parent){if(orphan.parent.key!==parent.key){var err=this._settings.labels.msg_amendrenew_err_two_parent_convs.replace('{0}',orphan.key).replace('{1}',orphan.parent.key).replace('{2}',parent.key);throw Error(err);}}else{parent.addChild(orphan);orphan.addParent(parent);}}this._orphanConvertiblesByParentId.delete(id);this._orphanIdsByParentId.delete(id);}}}]);return LineItemConvertibleGenerator;}();module.exports=LineItemConvertibleGenerator;},{}],21:[function(require,module,exports){'use strict';var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var LineItemConvertibleProcessor=function(){function LineItemConvertibleProcessor(settings){_classCallCheck(this,LineItemConvertibleProcessor);this._salesCloudPrefix=settings.salesCloudPrefix;this._effectiveLineNumber=0;this._knownSegmentKeysToLineNumbers=new Map();this._logger=jsLogger;}_createClass(LineItemConvertibleProcessor,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"processConvertibleTrees",value:function processConvertibleTrees(convertibleTrees,quoteVO,groupVO){var _this69=this;this._determineNextLineNumber(quoteVO);var promiseArray=[];convertibleTrees.forEach(function(tree){promiseArray.push(tree.process());});this._logMessage('LineItemConvertibleProcessor.js: Process LineItemConvertibles.');var processLineItemConvertiblesStartTime=Date.now();var addLineItemConveriblesToQuoteStartTime=void 0;var addLineItemConveribleToQuoteStartTime=void 0;return Promise.all(promiseArray).then(function(){_this69._logMessage('LineGenerationManager.js: Processing LineItemConvertibles took '+(Date.now()-processLineItemConvertiblesStartTime)+' ms.');_this69._logMessage('LineItemConvertibleProcessor.js: Add LineItemConvertibles to quote.');addLineItemConveriblesToQuoteStartTime=Date.now();convertibleTrees.forEach(function(tree){_this69._logMessage('LineItemConvertibleProcessor.js: Add LineItemConvertible to quote.');addLineItemConveribleToQuoteStartTime=Date.now();_this69._recursivelyAddTreeToQuote(tree,null,quoteVO,groupVO);_this69._logMessage('LineGenerationManager.js: Adding LineItemConvertible to quote took '+(Date.now()-addLineItemConveriblesToQuoteStartTime)+' ms.');});_this69._logMessage('LineGenerationManager.js: Adding LineItemConvertibles to quote took '+(Date.now()-addLineItemConveriblesToQuoteStartTime)+' ms.');});}},{key:"_recursivelyAddTreeToQuote",value:function _recursivelyAddTreeToQuote(lineConvertible,parentLineVO,quoteVO,groupVO){var _this70=this;var conversionResults=lineConvertible.conversionResults;if(!conversionResults||conversionResults.length===0){return;}else if(!conversionResults.length){this._addLineToQuote(conversionResults,parentLineVO,quoteVO,groupVO);var children=lineConvertible.children;if(children.length>0){children.forEach(function(child){_this70._recursivelyAddTreeToQuote(child,conversionResults,quoteVO,groupVO);});}}else if(conversionResults.length>=1){conversionResults.forEach(function(lineVO){_this70._addLineToQuote(lineVO,parentLineVO,quoteVO,groupVO);});}}},{key:"_addLineToQuote",value:function _addLineToQuote(lineVO,parentLineVO,quoteVO,groupVO){lineVO.key=++quoteVO.nextKey;var lineSegKey=lineVO.record[this._salesCloudPrefix+'SegmentKey__c'];if(!lineSegKey||!this._knownSegmentKeysToLineNumbers.has(lineSegKey)){lineVO.record[this._salesCloudPrefix+'Number__c']=++this._effectiveLineNumber;if(lineSegKey){this._knownSegmentKeysToLineNumbers.set(lineSegKey,this._effectiveLineNumber);}}else{lineVO.record[this._salesCloudPrefix+'Number__c']=this._knownSegmentKeysToLineNumbers.get(lineSegKey);}if(groupVO){lineVO.parentGroupKey=groupVO.key;}else{lineVO.parentGroupKey=null;}if(parentLineVO){lineVO.parentItemKey=parentLineVO.key;}else{lineVO.parentItemKey=null;}quoteVO.lineItems.push(lineVO);}},{key:"_determineNextLineNumber",value:function _determineNextLineNumber(quoteVO){var _this71=this;var effectiveNumber=1;quoteVO.lineItems.forEach(function(line){if(line.record[_this71._salesCloudPrefix+'Number__c']>effectiveNumber){effectiveNumber=line.record[_this71._salesCloudPrefix+'Number__c'];}});this._effectiveLineNumber=effectiveNumber;}}]);return LineItemConvertibleProcessor;}();module.exports=LineItemConvertibleProcessor;},{"js-logger":38}],22:[function(require,module,exports){'use strict';var ContractModel=require('../models/ContractModel.js');var OpportunityModel=require('../models/OpportunityModel.js');var OpportunityDAO=require('../DAO/OpportunityDAO.js');var ContractDAO=require('../DAO/ContractDAO.js');var QuoteDAO=require('../DAO/QuoteDAO.js');var RenewalOpportunity=require('../renewal/RenewalOpportunity.js');var IdToValueCache=require('./IdToValueCache.js');var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var OpportunityGenerator=function(){function OpportunityGenerator(conn,settings,services,contractModelsById){_classCallCheck(this,OpportunityGenerator);this._conn=conn;this._settings=settings;this._services=services;this._labels=settings.labels;this._opportunityDAO=new OpportunityDAO(conn,settings,services);this._contractMap=contractModelsById;this._logger=jsLogger;}_createClass(OpportunityGenerator,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"generateAmendmentOpps",value:function generateAmendmentOpps(){var _this72=this;var amendmentOppGenerationPromises=[];var _iteratorNormalCompletion10=true;var _didIteratorError10=false;var _iteratorError10=undefined;try{var _loop4=function _loop4(){var contractModel=_step10.value;amendmentOppGenerationPromises.push(_this72._generateOpp('Amendment',contractModel).then(function(oppModel){oppModel.Name=_this72._labels['lbl_amendment_opportunity_name'].replace("{0}",contractModel.ContractNumber);oppModel.CloseDate=oppModel.calculateAmendmentCloseDate(contractModel.AmendmentStartDate__c,contractModel.StartDate);oppModel['Amended'+ContractModel.getSObjectType(_this72._settings.isServiceCloudEnabled)+'__c']=contractModel.Id;if(_this72._settings.isTest){return oppModel.getOpportunity();}_this72._logMessage('AMENDMENT OpportunityGenerator.js: Create opportunity record. Contract='+contractModel.Id+' SessionId='+_this72._settings.userId);var createOppRecordStartTime=Date.now();return _this72._opportunityDAO.createOpportunityRecord(oppModel).then(function(opptyModel){_this72._logMessage('AMENDMENT OpportunityGenerator.js: Creating opportunity record took '+(Date.now()-createOppRecordStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this72._settings.userId);return opptyModel;});}));};for(var _iterator10=this._contractMap.values()[Symbol.iterator](),_step10;!(_iteratorNormalCompletion10=(_step10=_iterator10.next()).done);_iteratorNormalCompletion10=true){_loop4();}}catch(err){_didIteratorError10=true;_iteratorError10=err;}finally{try{if(!_iteratorNormalCompletion10&&_iterator10.return){_iterator10.return();}}finally{if(_didIteratorError10){throw _iteratorError10;}}}return Promise.all(amendmentOppGenerationPromises).catch(function(err){return Promise.reject(err.message||err);});}},{key:"generateRenewalOpps",value:function generateRenewalOpps(opportunityOnly){var _this73=this;var renewalOppGenerationPromises=[];var oppsToLoad=[];var renewalOpps=void 0;var calRenewalStartDateStartTime=void 0;var createOppRecrodStartTime=void 0;var _iteratorNormalCompletion11=true;var _didIteratorError11=false;var _iteratorError11=undefined;try{var _loop5=function _loop5(){var contractModel=_step11.value;if(!contractModel.RenewalOpportunity__c){var oppModel=void 0;renewalOppGenerationPromises.push(_this73._generateOpp('Renewal',contractModel).then(function(basicOppModel){oppModel=basicOppModel;oppModel.Name=_this73._labels['lbl_renewal_opportunity'];oppModel.Renewal__c=true;oppModel['Renewed'+ContractModel.getSObjectType(_this73._settings.isServiceCloudEnabled)+'__c']=contractModel.Id;_this73._logMessage('RENEWAL OpportunityGenerator.js: Calculate renewal start date. Contract='+contractModel.Id+' SessionId='+_this73._settings.userId);calRenewalStartDateStartTime=Date.now();return contractModel.calculateRenewalStartDate();}).then(function(startDate){_this73._logMessage('RENEWAL OpportunityGenerator.js: Calculating renewal start date took '+(Date.now()-calRenewalStartDateStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this73._settings.userId);oppModel.CloseDate=oppModel.calculateRenewalCloseDate(startDate);if(_this73._settings.isTest){return oppModel.getOpportunity();}_this73._logMessage('RENEWAL OpportunityGenerator.js: Create opportunity record. Contract='+contractModel.Id+' SessionId='+_this73._settings.userId);createOppRecrodStartTime=Date.now();return _this73._opportunityDAO.createOpportunityRecord(oppModel);}).then(function(savedOpptyModel){_this73._logMessage('RENEWAL OpportunityGenerator.js: Creating opportunity record took '+(Date.now()-createOppRecrodStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this73._settings.userId);_this73._assignRenewalOpportunityToContract(contractModel,savedOpptyModel.Id,opportunityOnly);return new RenewalOpportunity(contractModel,savedOpptyModel);}));}else{oppsToLoad.push(contractModel.RenewalOpportunity__c);}};for(var _iterator11=this._contractMap.values()[Symbol.iterator](),_step11;!(_iteratorNormalCompletion11=(_step11=_iterator11.next()).done);_iteratorNormalCompletion11=true){_loop5();}}catch(err){_didIteratorError11=true;_iteratorError11=err;}finally{try{if(!_iteratorNormalCompletion11&&_iterator11.return){_iterator11.return();}}finally{if(_didIteratorError11){throw _iteratorError11;}}}return Promise.all(renewalOppGenerationPromises).then(function(newlyGeneratedOpps){renewalOpps=newlyGeneratedOpps;return _this73._opportunityDAO.loadOppsByIds(oppsToLoad);}).then(function(preexistingOpps){var primaryQuoteIds=[];var _iteratorNormalCompletion12=true;var _didIteratorError12=false;var _iteratorError12=undefined;try{for(var _iterator12=preexistingOpps[Symbol.iterator](),_step12;!(_iteratorNormalCompletion12=(_step12=_iterator12.next()).done);_iteratorNormalCompletion12=true){var _step12$value=_slicedToArray(_step12.value,2),oppId=_step12$value[0],opp=_step12$value[1];var oppModel=new OpportunityModel(_this73._settings,opp);var renewedContractField=_this73._settings.isServiceCloudEnabled?'RenewedServiceContract__c':'RenewedContract__c';var _contractModel=_this73._contractMap.get(oppModel[renewedContractField]);_this73._assignRenewalOpportunityToContract(_contractModel,oppId,opportunityOnly);if(oppModel.PrimaryQuote__c){primaryQuoteIds.push(oppModel.PrimaryQuote__c);}renewalOpps.push(new RenewalOpportunity(_contractModel,oppModel));}}catch(err){_didIteratorError12=true;_iteratorError12=err;}finally{try{if(!_iteratorNormalCompletion12&&_iterator12.return){_iterator12.return();}}finally{if(_didIteratorError12){throw _iteratorError12;}}}if(_this73._settings.isTest||primaryQuoteIds.length<1){return;}return new QuoteDAO(_this73._conn,_this73._settings).uncheckPrimaryQuotes(primaryQuoteIds);}).then(function(){return renewalOpps;}).catch(function(err){return Promise.reject(err.message||err);});}},{key:"_generateOpp",value:function _generateOpp(type,contractModel){var _this74=this;var genOppStartTime=Date.now();this._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Generate opportunity. Contract='+contractModel.Id+' SessionId='+this._settings.userId);var oppModel=new OpportunityModel(this._settings,{});var checkOppIsCreateableStartTime=Date.now();var checkOppHasRecordTypeFieldStartTime=void 0;var getOppStageNameStartTime=void 0;var mapCustomFieldsStartTime=void 0;this._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Check if opportunity is createable. Contract='+contractModel.Id+' SessionId='+this._settings.userId);return this._opportunityDAO.isCreateable().then(function(isCreateable){_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Checking if opportunity is createable took '+(Date.now()-checkOppIsCreateableStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);if(!isCreateable){return Promise.reject(_this74._labels['msg_opportunity_not_creatable']);}oppModel.OwnerId=contractModel[type+'Owner__c']||_this74._settings.userId;oppModel.AccountId=contractModel.AccountId;oppModel.Pricebook2Id=contractModel[type+'PricebookId__c']||contractModel.OpportunityPricebookId__c;if(_this74._settings.isMultiCurrencyOrg){oppModel.CurrencyIsoCode=contractModel.CurrencyIsoCode;}checkOppHasRecordTypeFieldStartTime=Date.now();_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Check if opportunity has RecordType field. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);return _this74._opportunityDAO.hasRecordTypeField();}).then(function(hasRecordTypeField){_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Checking if opportunity has RecordType field took '+(Date.now()-checkOppHasRecordTypeFieldStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);if(hasRecordTypeField){oppModel.RecordTypeId=contractModel[type+'OpportunityRecordTypeId__c'];}getOppStageNameStartTime=Date.now();_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Get opportunity stage name. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);return contractModel[type+'OpportunityStage__c']?contractModel[type+'OpportunityStage__c']:_this74._opportunityDAO.getOppStage1MasterLabel();}).then(function(oppStageName){_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Getting opportunity stage name took '+(Date.now()-getOppStageNameStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);oppModel.StageName=oppStageName;mapCustomFieldsStartTime=Date.now();_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Map custom fields from contract to opportunity. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);return _this74._opportunityDAO.mapCustomFields(contractModel.getContract(),oppModel.getOpportunity());}).then(function(){_this74._logMessage(type.toUpperCase()+': Mapping custom fields from contract to opportunity'+(Date.now()-mapCustomFieldsStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);_this74._logMessage(type.toUpperCase()+' OpportunityGenerator.js: Generating opportunity took '+(Date.now()-genOppStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this74._settings.userId);return oppModel;});}},{key:"_assignRenewalOpportunityToContract",value:function _assignRenewalOpportunityToContract(contractModel,oppId,opportunityOnly){contractModel.RenewalOpportunity__c=oppId;contractModel.RenewalForecast__c=true;contractModel.RenewalQuoted__c=contractModel.RenewalQuoted__c||!opportunityOnly;}}]);return OpportunityGenerator;}();module.exports=OpportunityGenerator;},{"../DAO/ContractDAO.js":3,"../DAO/OpportunityDAO.js":5,"../DAO/QuoteDAO.js":8,"../models/ContractModel.js":27,"../models/OpportunityModel.js":28,"../renewal/RenewalOpportunity.js":31,"./IdToValueCache.js":18,"js-logger":38}],23:[function(require,module,exports){'use strict';var ContractModel=require('../models/ContractModel.js');var QuoteModel=require('../models/QuoteModel.js');var AccountDAO=require('../DAO/AccountDAO.js');var QuoteDAO=require('../DAO/QuoteDAO.js');var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var QuoteGenerator=function(){function QuoteGenerator(conn,settings,services){_classCallCheck(this,QuoteGenerator);this._conn=conn;this._settings=settings;this._services=services;this._accountDAO=new AccountDAO(conn,settings);this._applyAddDiscLastField=null;this._applyPartnerDiscFirstField=null;this._channelDiscOffListField=null;this._logger=jsLogger;}_createClass(QuoteGenerator,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"generateAmendmentQuote",value:function generateAmendmentQuote(contractModel,oppModel){var _this75=this;var quoteModel=this._generateGenericQuote(contractModel,oppModel);quoteModel.Type__c='Amendment';quoteModel.PriceBook__c=quoteModel.PricebookId__c;var masterContractField='Master'+ContractModel.getSObjectType(this._settings.isServiceCloudEnabled)+'__c';quoteModel[masterContractField]=contractModel.Id;quoteModel.StartDate__c=oppModel.CloseDate;var renewalModel=void 0;var quoteVO=void 0;var calcAmendmentEndDateStartTime=Date.now();var getAccsByIdStartTime=void 0;var getRequiredQuoteFieldsStartTime=void 0;var saveAndReloadRecordStartTime=void 0;this._logMessage('AMENDMENT QuoteGenerator.js: Calculate amendment end date. Contract='+contractModel.Id+' SessionId='+this._settings.userId);var calcEndDatePromise=contractModel.DisableAmendmentCoTerm__c?Promise.resolve(null):contractModel.calculateAmendmentEndDate();return calcEndDatePromise.then(function(endDate){_this75._logMessage('AMENDMENT QuoteGenerator.js: Calculating amendment end date took '+(Date.now()-calcAmendmentEndDateStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);quoteModel.EndDate__c=endDate;getAccsByIdStartTime=Date.now();_this75._logMessage('AMENDMENT: Get accounts by Ids. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);return _this75._accountDAO.getAccountsByIds([contractModel.AccountId]);}).then(function(accountsById){_this75._logMessage('AMENDMENT QuoteGenerator.js: Getting accounts by Ids took '+(Date.now()-getAccsByIdStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);renewalModel=accountsById.get(contractModel.AccountId)[_this75._settings.salesCloudPrefix+'RenewalModel__c'];getRequiredQuoteFieldsStartTime=Date.now();_this75._logMessage('AMENDMENT QuoteGenerator.js: Get required quote fields. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);return _this75._getRequiredQuoteFields();}).then(function(fields){_this75._logMessage('AMENDMENT QuoteGenerator.js: Getting required quote fields took '+(Date.now()-getRequiredQuoteFieldsStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);quoteModel.setSalesRep(oppModel.OwnerId);saveAndReloadRecordStartTime=Date.now();_this75._logMessage('AMENDMENT QuoteGenerator.js: Save and reload quote record. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);return _this75._saveAndReloadRecord(quoteModel.getQuote(),fields);}).then(function(rec){_this75._logMessage('AMENDMENT QuoteGenerator.js: Saving and reloading quote record took '+(Date.now()-saveAndReloadRecordStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this75._settings.userId);console.log('AMENDMENT QuoteGenerator.js: Quote -  '+rec.Id+' was successfully created');var applyAddDiscLast=void 0;var applyPartnerDiscFirst=void 0;var channelDiscOffList=void 0;if(_this75._applyAddDiscLastField&&contractModel.Quote__r){var originalValue=contractModel.Quote__r[_this75._applyAddDiscLastField];rec[_this75._applyAddDiscLastField]=originalValue;applyAddDiscLast=!!originalValue;}else{applyAddDiscLast=false;}if(_this75._applyPartnerDiscFirstField&&contractModel.Quote__r){var _originalValue=contractModel.Quote__r[_this75._applyPartnerDiscFirstField];rec[_this75._applyPartnerDiscFirstField]=_originalValue;applyPartnerDiscFirst=!!_originalValue;}else{applyPartnerDiscFirst=false;}if(_this75._channelDiscOffListField&&contractModel.Quote__r){var _originalValue2=contractModel.Quote__r[_this75._channelDiscOffListField];rec[_this75._channelDiscOffListField]=_originalValue2;channelDiscOffList=!!_originalValue2;}else{channelDiscOffList=false;}quoteVO=_this75._createQuoteVO(rec,renewalModel,applyAddDiscLast,applyPartnerDiscFirst,channelDiscOffList);oppModel.PrimaryQuote__c=rec.Id;return quoteVO;}).catch(function(err){return Promise.reject(err.message||err);});}},{key:"generateRenewalQuotes",value:function generateRenewalQuotes(renewalOpps){var _this76=this;var quoteGenPromises=[];renewalOpps.forEach(function(renOpp){quoteGenPromises.push(_this76._generateRenewalQuote(renOpp));});return Promise.all(quoteGenPromises);}},{key:"_generateRenewalQuote",value:function _generateRenewalQuote(renewalOpp){var _this77=this;var oppModel=renewalOpp.opportunityModel;var contractModel=renewalOpp.masterContractModel;this._logMessage('RENEWAL QuoteGenerator.js: Generate renewal quote. Contract='+contractModel.Id+' SessionId='+this._settings.userId);var genRenewalQuoteStartTime=Date.now();var quoteModel=this._generateGenericQuote(contractModel,oppModel);quoteModel.Type__c='Renewal';var renewalModel=void 0;var quoteVO=void 0;var calcRenewalEndDateStartTime=void 0;var getAccountByIdsStartTime=void 0;var getRequiredQuoteFieldsStartTime=void 0;var saveAndReloadRecordStartTime=void 0;this._logMessage('RENEWAL QuoteGenerator.js: Calculate renewal start date. Contract='+contractModel.Id+' SessionId='+this._settings.userId);var calRenewalStartDateStartTime=Date.now();return contractModel.calculateRenewalStartDate().then(function(startDate){_this77._logMessage('RENEWAL QuoteGenerator.js: Calculating renewal start date took '+(Date.now()-calRenewalStartDateStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);quoteModel.StartDate__c=startDate;_this77._logMessage('RENEWAL QuoteGenerator.js: Calculate renewal end date. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);calcRenewalEndDateStartTime=Date.now();return contractModel.calculateRenewalEndDate(_this77._settings.isSubscriptionTermUnitDay);}).then(function(endDate){_this77._logMessage('RENEWAL QuoteGenerator.js: Calculating renewal end date took '+(Date.now()-calcRenewalEndDateStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);quoteModel.EndDate__c=endDate;_this77._logMessage('RENEWAL QuoteGenerator.js: Get accounts by ids. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);getAccountByIdsStartTime=Date.now();return _this77._accountDAO.getAccountsByIds([contractModel.AccountId]);}).then(function(accounts){_this77._logMessage('RENEWAL QuoteGenerator.js: Getting accounts by ids took '+(Date.now()-getAccountByIdsStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);renewalModel=accounts.get(contractModel.AccountId)[_this77._settings.salesCloudPrefix+'RenewalModel__c'];_this77._logMessage('RENEWAL QuoteGenerator.js: Get required quote fields. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);getRequiredQuoteFieldsStartTime=Date.now();return _this77._getRequiredQuoteFields();}).then(function(fields){_this77._logMessage('RENEWAL QuoteGenerator.js: Getting required quote ids took '+(Date.now()-getRequiredQuoteFieldsStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);_this77._logMessage('RENEWAL QuoteGenerator.js: Save and reload record. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);saveAndReloadRecordStartTime=Date.now();return _this77._saveAndReloadRecord(quoteModel.getQuote(),fields);}).then(function(rec){_this77._logMessage('RENEWAL QuoteGenerator.js: Saving and reloading record took '+(Date.now()-getRequiredQuoteFieldsStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);_this77._logMessage('RENEWAL QuoteGenerator.js: Quote: '+rec.Id+' was successfully created');var applyAddDiscLast=void 0;var applyPartnerDiscFirst=void 0;var channelDiscOffList=void 0;if(_this77._applyAddDiscLastField&&contractModel.Quote__r){var originalValue=contractModel.Quote__r[_this77._applyAddDiscLastField];rec[_this77._applyAddDiscLastField]=originalValue;applyAddDiscLast=!!originalValue;}else{applyAddDiscLast=false;}if(_this77._applyPartnerDiscFirstField&&contractModel.Quote__r){var _originalValue3=contractModel.Quote__r[_this77._applyPartnerDiscFirstField];rec[_this77._applyPartnerDiscFirstField]=_originalValue3;applyPartnerDiscFirst=!!_originalValue3;}else{applyPartnerDiscFirst=false;}if(_this77._channelDiscOffListField&&contractModel.Quote__r){var _originalValue4=contractModel.Quote__r[_this77._channelDiscOffListField];rec[_this77._channelDiscOffListField]=_originalValue4;channelDiscOffList=!!_originalValue4;}else{channelDiscOffList=false;}quoteVO=_this77._createQuoteVO(rec,renewalModel,applyAddDiscLast,applyPartnerDiscFirst,channelDiscOffList);oppModel.PrimaryQuote__c=rec.Id;_this77._logMessage('RENEWAL QuoteGenerator.js: Generating renewal quote took '+(Date.now()-genRenewalQuoteStartTime)+' ms. Contract='+contractModel.Id+' SessionId='+_this77._settings.userId);return quoteVO;}).catch(function(err){return Promise.reject(err.message||err);});}},{key:"_generateGenericQuote",value:function _generateGenericQuote(contractModel,oppModel){var quoteModel=new QuoteModel(this._settings);quoteModel.createEmptyQuote();quoteModel.Primary__c=true;quoteModel.RenewalTerm__c=contractModel.RenewalTerm__c;quoteModel.RenewalUpliftRate__c=contractModel.RenewalUpliftRate__c;quoteModel.Opportunity2__c=oppModel.Id;quoteModel.Account__c=oppModel.AccountId;quoteModel.PricebookId__c=oppModel.Pricebook2Id;if(this._settings.isMultiCurrencyOrg){quoteModel.CurrencyIsoCode=oppModel.CurrencyIsoCode;}return quoteModel;}},{key:"_getRequiredQuoteFields",value:function _getRequiredQuoteFields(){var _this78=this;var fields=QuoteModel.getFields(this._settings);fields=fields.concat(this._settings.calcSettings.referencedFieldMap.Quote);var quoteType=this._settings.salesCloudPrefix+'Quote__c';this._logMessage('QuoteGenerator.js: Check existence of fields on quote. SessionId='+this._settings.userId);var checkExistenceOfFieldsStartTime=Date.now();return this._services.fieldMetadataService.checkExistenceOfFields(quoteType,QuoteModel.getMagicFields()).then(function(magicFields){_this78._logMessage('QuoteGenerator.js: Checking existence of fields took '+(Date.now()-checkExistenceOfFieldsStartTime)+' ms. SessionId='+_this78._settings.userId);_this78._applyAddDiscLastField=magicFields['ApplyAdditionalDiscountLast__c'];_this78._applyPartnerDiscFirstField=magicFields['ApplyPartnerDiscountFirst__c'];_this78._channelDiscOffListField=magicFields['ChannelDiscountsOffList__c'];Object.keys(magicFields).forEach(function(magicFieldReference){if(magicFields[magicFieldReference]){fields.push(magicFields[magicFieldReference]);}});return fields;});}},{key:"_saveAndReloadRecord",value:function _saveAndReloadRecord(rec,fields){return this._settings.isTest?Promise.resolve(rec):new QuoteDAO(this._conn,this._settings).createAndReloadQuote(rec,fields);}},{key:"_createQuoteVO",value:function _createQuoteVO(rec,renewalModel,addtnlDiscLast,partnerDiscFirst,channelDiscOffList){return{record:rec,nextKey:1,lineItems:[],lineItemGroups:[],localizationByFieldByDimensionId:null,accountRenewalModel:renewalModel,applyAdditionalDiscountLast:addtnlDiscLast,applyPartnerDiscountFirst:partnerDiscFirst,channelDiscountsOffList:channelDiscOffList};}}]);return QuoteGenerator;}();module.exports=QuoteGenerator;},{"../DAO/AccountDAO.js":1,"../DAO/QuoteDAO.js":8,"../models/ContractModel.js":27,"../models/QuoteModel.js":29,"js-logger":38}],24:[function(require,module,exports){'use strict';var globalCache=new Map();var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var FieldMetadataService=function(){function FieldMetadataService(conn,settings){_classCallCheck(this,FieldMetadataService);this._conn=conn;this._settings=settings;this._salesCloudPrefix=settings.salesCloudPrefix?settings.salesCloudPrefix.toLowerCase():"";this._serviceCloudPrefix=settings.serviceCloudPrefix?settings.serviceCloudPrefix.toLowerCase():'';var inBrowser=typeof window!=='undefined';this._cache=inBrowser?globalCache:new Map();this._logger=jsLogger;}_createClass(FieldMetadataService,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"getSharedMappableFieldNames",value:function getSharedMappableFieldNames(srcType,destType){var _this79=this;var cacheKey=srcType+':'+destType;if(this._cache.has(cacheKey)){return Promise.resolve(this._cache.get(cacheKey));}var srcPromise=this.getMappableFields(srcType);var destPromise=this.getMappableFields(destType);this._logMessage('FieldMetadataService.js: Get mappable fields. SessionId='+this._settings.userId);var getMappableFields=Date.now();return Promise.all([srcPromise,destPromise]).then(function(arrs){_this79._logMessage('FieldMetadataService.js: Getting mappable fields took '+(Date.now()-getMappableFields)+' ms. SessionId='+_this79._settings.userId);var sharedFields=[];var srcFields=arrs[0].fieldArray;var destFields=arrs[1].fieldMap;var srcFieldCount=srcFields.length;for(var i=0;i<srcFieldCount;i++){var srcField=srcFields[i];var destField=destFields.get(srcField.name);if(destField&&_this79._fieldsAreCompatible(srcField,destField)){sharedFields.push(destField.name);}}_this79._cache.set(cacheKey,sharedFields);return sharedFields;},function(reason){throw new Error(reason);});}},{key:"getMappableFields",value:function getMappableFields(objType){var _this80=this;if(this._cache.has('mappableFields')&&this._cache.get('mappableFields')[objType]){return Promise.resolve(this._cache.get('mappableFields')[objType]);}else{if(!this._cache.has('mappableFields')){this._cache.set('mappableFields',{});}}return this._getObjectDescribe(objType).then(function(objDescribe){var mappableFieldSummary=_this80._sweepDescribeForMappableFields(objDescribe);_this80._cache.get('mappableFields')[objType]=mappableFieldSummary;return mappableFieldSummary;},function(err){var header=_this80._settings.labels.msg_could_not_retrieve_mappable_fields.replace('{0}',objType);return Promise.reject(header+(err.message||err));});}},{key:"checkExistenceOfFields",value:function checkExistenceOfFields(objType,fieldArray){var _this81=this;var cachedApiNamesByGenericName={};if(this._cache.has('fieldExistence')&&this._cache.get('fieldExistence')[objType]){cachedApiNamesByGenericName=this._cache.get('fieldExistence')[objType];}else if(!this._cache.has('fieldExistence')){this._cache.set('fieldExistence',{});}var existentFieldsMap={};var unknownFields=[];fieldArray.forEach(function(field){if(cachedApiNamesByGenericName[field]){existentFieldsMap[field]=cachedApiNamesByGenericName[field];}else if(cachedApiNamesByGenericName[field]===undefined){unknownFields.push(field);}});if(unknownFields.length===0){return Promise.resolve(existentFieldsMap);}else{return this._getObjectDescribe(objType).then(function(objDesc){var fieldCount=objDesc.fields.length;var _loop6=function _loop6(i){var fieldDesc=objDesc.fields[i];var indexOfMatchingUnknownField=unknownFields.findIndex(function(f){return fieldDesc.name.endsWith(f);});if(indexOfMatchingUnknownField!==-1){var matchingUnknownField=unknownFields[indexOfMatchingUnknownField];cachedApiNamesByGenericName[matchingUnknownField]=fieldDesc.name;existentFieldsMap[matchingUnknownField]=fieldDesc.name;unknownFields=unknownFields.filter(function(el,index){return index!==indexOfMatchingUnknownField;});}};for(var i=0;i<fieldCount;i++){_loop6(i);}unknownFields.forEach(function(nonexistentField){cachedApiNamesByGenericName[nonexistentField]=false;});_this81._cache.get('fieldExistence')[objType]=cachedApiNamesByGenericName;return existentFieldsMap;});}}},{key:"getFieldDescribe",value:function getFieldDescribe(objType,fieldName){var _this82=this;if(this._cache.has('fieldDescribe')&&this._cache.get('fieldDescribe')[objType+fieldName]){return Promise.resolve(this._cache.get('fieldDescribe')[objType+fieldName]);}else if(!this._cache.has('fieldDescribe')){this._cache.set('fieldDescribe',{});}return this._getObjectDescribe(objType).then(function(objDescribe){var fieldDescribe=objDescribe.fields.find(function(field){return field.name===fieldName;});if(fieldDescribe){_this82._cache.get('fieldDescribe')[objType+fieldName]=fieldDescribe;return fieldDescribe;}else{var noSuchFieldMessage=_this82._settings.labels.msg_no_such_field.replace('{0}',fieldName).replace('{1}',objType);return Promise.reject(noSuchFieldMessage);}},function(err){var msgHeader=_this82._settings.labels.msg_could_not_retrieve_field_describe.replace('{0}',objType).replace('{1}',fieldName);return Promise.reject(msgHeader+(err.message||err));});}},{key:"isObjectUpdateable",value:function isObjectUpdateable(objType){var _this83=this;if(!this._cache.has('objectPermissions')){this._cache.set('objectPermissions',{});}if(!this._cache.get('objectPermissions')[objType]){this._cache.get('objectPermissions')[objType]={};}else if(this._cache.get('objectPermissions')[objType].updateable!='undefined'){return Promise.resolve(this._cache.get('objectPermissions')[objType].updateable);}return this._getObjectDescribe(objType).then(function(objDescribe){_this83._cache.get('objectPermissions')[objType].updateable=objDescribe.updateable;return objDescribe.updateable;},function(err){var msgHeader=_this83._settings.labels.msg_could_not_retrieve_crud.replace('{0}',objType);return Promise.reject(msgHeader+(err.message||err));});}},{key:"_getObjectDescribe",value:function _getObjectDescribe(objType){var _this84=this;if(this._cache.has(objType)){return Promise.resolve(this._cache.get(objType));}else{var jsForceStartTime=Date.now();this._logMessage('FieldMetadataService.js: JSForce call for object describe on '+objType+'. SessionId='+this._settings.userId);return this._conn.sobject(objType).describe().then(function(res){_this84._logMessage('FieldMetadataService.js: JSForce call for object describe on '+objType+' took '+(Date.now()-jsForceStartTime)+' ms. SessionId='+_this84._settings.userId);_this84._cache.set(objType,res);return res;});}}},{key:"_sweepDescribeForMappableFields",value:function _sweepDescribeForMappableFields(sobjectData){var fields=sobjectData.fields;var mfArray=[];var mfMap=new Map();var fieldCount=fields.length;for(var i=0;i<fieldCount;i++){var field=fields[i];if(this._isFieldMappable(field)){mfArray.push(field);mfMap.set(field.name,field);}}return{'fieldArray':mfArray,'fieldMap':mfMap};}},{key:"_isFieldMappable",value:function _isFieldMappable(field){if(!field.custom){return false;}var lcName=field.name.toLowerCase();if(lcName.startsWith(this._salesCloudPrefix+'sbcustom')||lcName.startsWith(this._serviceCloudPrefix+'sbcustom')){return true;}var lacksSalesPrefix=this._salesCloudPrefix!==''&&!lcName.startsWith(this._salesCloudPrefix);var lacksServicePrefix=this._serviceCloudPrefix!==''&&!lcName.startsWith(this._serviceCloudPrefix);return lacksSalesPrefix&&lacksServicePrefix;}},{key:"_fieldsAreCompatible",value:function _fieldsAreCompatible(srcField,destField){if(!destField.updateable){return false;}if(srcField.type!==destField.type){return false;}if(srcField.type.toLowerCase()==='reference'){return srcField.referenceTo[0]===destField.referenceTo[0];}return true;}}]);return FieldMetadataService;}();module.exports=FieldMetadataService;},{"js-logger":38}],25:[function(require,module,exports){'use strict';var ContractDAO=require('./DAO/ContractDAO.js');var AccountDAO=require('./DAO/AccountDAO.js');var OpportunityDAO=require('./DAO/OpportunityDAO.js');var OpportunityGenerator=require('./common/OpportunityGenerator.js');var QuoteGenerator=require('./common/QuoteGenerator.js');var FieldMetadataService=require('./data/FieldMetadataService.js');var LineGenerationManager=require('./LineGenerationManager.js');var LineCalculationManager=require('./LineCalculationManager.js');var QuoteDAO=require('./DAO/QuoteDAO.js');var OpportunityLineGenerator=require('./renewal/OpportunityLineGenerator.js');var OpportunityLineDAO=require('./DAO/OpportunityLineDAO.js');var ContractModel=require('./models/ContractModel.js');var IdToValueCache=require('./common/IdToValueCache.js');var JSARSettings=require('./JSARSettings.js');var ServicesManager=require('./ServicesManager.js');var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var Main=function(){function Main(conn,customerConn,calcVersion,orgPrefix,rawSettings){_classCallCheck(this,Main);this._conn=conn;this._customerConn=customerConn;this._calcVersion=calcVersion;this._settings=this._initSettings(orgPrefix,rawSettings);this._services=this._initServices();this._logger=jsLogger;}_createClass(Main,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"_initSettings",value:function _initSettings(orgPrefix,rawSettings){return new JSARSettings(orgPrefix,rawSettings);}},{key:"_initServices",value:function _initServices(){return new ServicesManager(this._conn,this._settings);}},{key:"loadContractsByIds",value:function loadContractsByIds(contractIds){var _this85=this;var contractDAO=new ContractDAO(this._conn,this._settings,this._services);return contractDAO.loadContractsByIds(contractIds).then(function(contracts){var contractsMap=new IdToValueCache();var _iteratorNormalCompletion13=true;var _didIteratorError13=false;var _iteratorError13=undefined;try{for(var _iterator13=contracts[Symbol.iterator](),_step13;!(_iteratorNormalCompletion13=(_step13=_iterator13.next()).done);_iteratorNormalCompletion13=true){var _step13$value=_slicedToArray(_step13.value,2),_contractId2=_step13$value[0],contract=_step13$value[1];contractsMap.set(_contractId2,new ContractModel(_this85._conn,_this85._settings,_this85._services,contract));}}catch(err){_didIteratorError13=true;_iteratorError13=err;}finally{try{if(!_iteratorNormalCompletion13&&_iterator13.return){_iterator13.return();}}finally{if(_didIteratorError13){throw _iteratorError13;}}}return contractsMap;});}},{key:"amendContract",value:function amendContract(cId){var _this86=this;var c=void 0;var o=void 0;var q=void 0;var loadContractsStartTime=Date.now();var genOppStartTime=void 0;var genQuoteStartTime=void 0;var genLinesStartTime=void 0;var postProcessQuoteStartTime=void 0;this._logMessage('AMENDMENT main.js: Load Contracts. Contract='+cId+' SessionId='+this._settings.userId);return this.loadContractsByIds([cId]).then(function(contractsById){_this86._logMessage('AMENDMENT Loading contracts took '+(Date.now()-loadContractsStartTime)+' ms. Contract='+cId+' SessionId='+_this86._settings.userId);c=contractsById.get(cId);_this86._logMessage('AMENDMENT main.js: Creating amendment opportunities. Contract='+cId+' SessionId='+_this86._settings.userId);genOppStartTime=Date.now();return _this86.generateAmendmentOpps(contractsById);}).then(function(opps){_this86._logMessage('AMENDMENT main.js: Creating amendment opportunities took '+(Date.now()-genOppStartTime)+' ms. Contract='+cId+' SessionId='+_this86._settings.userId);o=opps[0];_this86._logMessage('AMENDMENT main.js: Creating amendment quotes. Contract='+cId+' SessionId='+_this86._settings.userId);genQuoteStartTime=Date.now();return _this86.generateAmendmentQuote(c,o);}).then(function(quote){_this86._logMessage('AMENDMENT main.js: Creating amendment quotes took '+(Date.now()-genQuoteStartTime)+' ms. Contract='+cId+' SessionId='+_this86._settings.userId);q=quote;_this86._logMessage('AMENDMENT main.js: Create and add amendment lines. Contract='+cId+' SessionId='+_this86._settings.userId);genLinesStartTime=Date.now();return new LineGenerationManager(_this86._conn,_this86._settings,_this86._services).amendContractToQuote(c.getContract(),q);}).then(function(poppedQuote){_this86._logMessage('AMENDMENT main.js: Creating and adding amendment lines took '+(Date.now()-genLinesStartTime)+' ms. Contract='+cId+' SessionId='+_this86._settings.userId);_this86._logMessage('AMENDMENT main.js: Post processing quotes. Contract='+cId+' SessionId='+_this86._settings.userId);postProcessQuoteStartTime=Date.now();return _this86.postProcessQuotes([poppedQuote],[o],true,false);}).then(function(finalQuotes){_this86._logMessage('AMENDMENT main.js: Post processing quotes took '+(Date.now()-postProcessQuoteStartTime)+' ms. Contract='+cId+' SessionId='+_this86._settings.userId);return finalQuotes;});}},{key:"generateAmendmentOpps",value:function generateAmendmentOpps(contractsById){return new OpportunityGenerator(this._conn,this._settings,this._services,contractsById).generateAmendmentOpps();}},{key:"generateAmendmentQuote",value:function generateAmendmentQuote(contract,opp){return new QuoteGenerator(this._conn,this._settings,this._services).generateAmendmentQuote(contract,opp);}},{key:"renewContracts",value:function renewContracts(contractIds,masterContractId){return this._handleContractRenewalFlow(contractIds,masterContractId,false);}},{key:"forecastContracts",value:function forecastContracts(contractIds,masterContractId){return this._handleContractRenewalFlow(contractIds,masterContractId,true);}},{key:"_handleContractRenewalFlow",value:function _handleContractRenewalFlow(contractIds,masterContractId,opportunityOnly){var _this87=this;var contractMap=void 0;var opps=void 0;var loadContractsStartTime=Date.now();var genOppStartTime=void 0;var genQuoteStartTime=void 0;var genLinesStartTime=void 0;var postProcessQuoteStartTime=void 0;var updateContractsStartTime=void 0;this._logMessage('RENEWAL main.js: Load Contracts. Contracts='+contractIds+' SessionId='+this._settings.userId);return this.loadContractsByIds(contractIds).then(function(contractsByIds){_this87._logMessage('RENEWAL main.js: Loading contracts took '+(Date.now()-loadContractsStartTime)+' ms in total');contractMap=contractsByIds;genOppStartTime=Date.now();return _this87.generateRenewalOpps(contractsByIds,opportunityOnly);}).then(function(renewalOpps){_this87._logMessage('RENEWAL main.js: Creating renewal opportunities took '+(Date.now()-genOppStartTime)+' ms. Contracts='+contractIds+' SessionId='+_this87._settings.userId);opps=renewalOpps;_this87._logMessage('RENEWAL main.js: Creating renewal quotes. Contracts='+contractIds+' SessionId='+_this87._settings.userId);genQuoteStartTime=Date.now();return _this87.generateRenewalQuotes(opps);}).then(function(quotes){_this87._logMessage('RENEWAL main.js: Creating renewal quotes took '+(Date.now()-genQuoteStartTime)+' ms. Contracts='+contractIds+' SessionId='+_this87._settings.userId);var quotePopulationPromises=[];var lgm=new LineGenerationManager(_this87._conn,_this87._settings,_this87._services);var quoteCount=quotes.length;for(var i=0;i<quoteCount;i++){var opp=opps[i];var quote=quotes[i];var contractRecords=opp.contractModels.map(function(cModel){return cModel.getContract();});quotePopulationPromises.push(lgm.renewContractsToQuote(contractRecords,quote,null));}_this87._logMessage('RENEWAL main.js: Create and add renewal lines. Contracts='+contractIds+' SessionId='+_this87._settings.userId);genLinesStartTime=Date.now();return Promise.all(quotePopulationPromises);}).then(function(populatedQuotes){_this87._logMessage('RENEWAL main.js: Creating and adding renewal lines took '+(Date.now()-genLinesStartTime)+' ms. Contracts='+contractIds+' SessionId='+_this87._settings.userId);_this87._logMessage('RENEWAL main.js: Post processing quotes. Contracts='+contractIds+' SessionId='+_this87._settings.userId);postProcessQuoteStartTime=Date.now();return _this87.postProcessQuotes(populatedQuotes,opps.map(function(opp){return opp.opportunityModel;}),!opportunityOnly,true);}).then(function(){_this87._logMessage('RENEWAL main.js: Post processing quotes took '+(Date.now()-postProcessQuoteStartTime)+' ms. Contracts='+contractIds+' SessionId='+_this87._settings.userId);var contractsArray=[];var _iteratorNormalCompletion14=true;var _didIteratorError14=false;var _iteratorError14=undefined;try{for(var _iterator14=contractMap.values()[Symbol.iterator](),_step14;!(_iteratorNormalCompletion14=(_step14=_iterator14.next()).done);_iteratorNormalCompletion14=true){var contract=_step14.value;contractsArray.push(contract.getContract());}}catch(err){_didIteratorError14=true;_iteratorError14=err;}finally{try{if(!_iteratorNormalCompletion14&&_iterator14.return){_iterator14.return();}}finally{if(_didIteratorError14){throw _iteratorError14;}}}_this87._logMessage('RENEWAL main.js: Update contracts. Contracts='+contractIds+' SessionId='+_this87._settings.userId);updateContractsStartTime=Date.now();return new ContractDAO(_this87._conn,_this87._settings,_this87._services).updateRecords(contractsArray);}).then(function(saveResults){_this87._logMessage('RENEWAL main.js: Updating contracts took '+(Date.now()-updateContractsStartTime)+' ms. Contracts='+contractIds+' SessionId='+_this87._settings.userId);return saveResults;}).catch(function(err){console.log('renewContracts failed: ',err);return Promise.reject(err.message||err);});}},{key:"generateRenewalOpps",value:function generateRenewalOpps(contractsByIds,opportunityOnly){return new OpportunityGenerator(this._conn,this._settings,this._services,contractsByIds).generateRenewalOpps(opportunityOnly);}},{key:"generateRenewalQuotes",value:function generateRenewalQuotes(renOpps){return new QuoteGenerator(this._conn,this._settings,this._services).generateRenewalQuotes(renOpps);}},{key:"postProcessQuotes",value:function postProcessQuotes(qvos,opps,persistQuotes,createOpptyLines){var _this88=this;var calcManager=new LineCalculationManager(this._calcVersion);var finalQuotes=void 0;var processQuoteStartTime=void 0;var createOpptyLineStartTime=void 0;var updateOpptyStartTime=void 0;this._logMessage('main.js: Calculate quote. SessionId='+this._settings.userId);var calculateQuoteStartTime=Date.now();return calcManager.calculateQuotes(qvos,this._settings,this._conn,this._customerConn).then(function(calcedQuotes){_this88._logMessage('main.js: Calculating quote took '+(Date.now()-calculateQuoteStartTime)+' ms. SessionId='+_this88._settings.userId);var qdao=new QuoteDAO(_this88._conn,_this88._settings);_this88._logMessage('main.js: Save/Delete quote. SessionId='+_this88._settings.userId);processQuoteStartTime=Date.now();return persistQuotes?qdao.saveQuotes(calcedQuotes):qdao.deleteQuotes(calcedQuotes);}).then(function(processedQuotes){_this88._logMessage('main.js: Saving/Deleting quote took '+(Date.now()-processQuoteStartTime)+' ms. SessionId='+_this88._settings.userId);finalQuotes=processedQuotes;_this88._logMessage('main.js: Generate and save opportunity lines. SessionId='+_this88._settings.userId);createOpptyLineStartTime=Date.now();return createOpptyLines?_this88._generateAndSaveOpptyLines(processedQuotes):Promise.resolve();}).then(function(){if(createOpptyLines){_this88._logMessage('main.js: Generating and saving opportunity lines took '+(Date.now()-createOpptyLineStartTime)+' ms. SessionId='+_this88._settings.userId);}var opptyRecords=opps.map(function(opp){if(!persistQuotes){opp.PrimaryQuote__c=null;}return opp.getOpportunity();});_this88._logMessage('main.js: Update opportunity. SessionId='+_this88._settings.userId);updateOpptyStartTime=Date.now();return new OpportunityDAO(_this88._conn,_this88._settings,_this88._services).updateRecords(opptyRecords);}).then(function(){_this88._logMessage('main.js: Updating opportunity took '+(Date.now()-updateOpptyStartTime)+' ms. SessionId='+_this88._settings.userId);return finalQuotes;});}},{key:"_generateAndSaveOpptyLines",value:function _generateAndSaveOpptyLines(quotes){var _this89=this;this._logMessage('main.js: Generate opportunity lines. SessionId='+this._settings.userId);var saveOppLinesByOppIdStartTime=void 0;var genOppStartTime=Date.now();return new OpportunityLineGenerator(this._conn,this._settings,this._services).generateOppLines(quotes).then(function(oppLinesByOppId){_this89._logMessage('main.js: Generating opportunity lines took '+(Date.now()-genOppStartTime)+' ms. SessionId='+_this89._settings.userId);_this89._logMessage('main.js: Save opportunity lines by opportunity id. SessionId='+_this89._settings.userId);saveOppLinesByOppIdStartTime=Date.now();return new OpportunityLineDAO(_this89._conn,_this89._settings).saveOppLinesByOppId(oppLinesByOppId);}).then(function(saveResults){_this89._logMessage('main.js: Saving opportunity lines by opportunity id took '+(Date.now()-genOppStartTime)+' ms. SessionId='+_this89._settings.userId);return saveResults;});}}]);return Main;}();if(typeof window!=='undefined'&&window){window.SB=window.SB||{};window.SB.JSARSettings=JSARSettings;window.SB.JSARServices=ServicesManager;window.SB.JSARLineGenManager=LineGenerationManager;}else{module.exports=Main;}},{"./DAO/AccountDAO.js":1,"./DAO/ContractDAO.js":3,"./DAO/OpportunityDAO.js":5,"./DAO/OpportunityLineDAO.js":6,"./DAO/QuoteDAO.js":8,"./JSARSettings.js":11,"./LineCalculationManager.js":12,"./LineGenerationManager.js":13,"./ServicesManager.js":14,"./common/IdToValueCache.js":18,"./common/OpportunityGenerator.js":22,"./common/QuoteGenerator.js":23,"./data/FieldMetadataService.js":24,"./models/ContractModel.js":27,"./renewal/OpportunityLineGenerator.js":30,"js-logger":38}],26:[function(require,module,exports){'use strict';var PROTOTYPE_INITIALIZED=false;var FIELDS_INITIALIZED=false;var FIELDS=['Id','RenewalModel__c','RenewalPricingMethod__c','PreserveBundle__c','PriceHoldEnd__c'];var PREFIXED_FIELDS=[];var AccountModel=function(){function AccountModel(prefix,account){_classCallCheck(this,AccountModel);initPrototype(prefix);if(account){this._account=account;}}_createClass(AccountModel,null,[{key:"getFields",value:function getFields(prefix){if(!FIELDS_INITIALIZED){initializeFields(prefix);}return PREFIXED_FIELDS;}}]);return AccountModel;}();function initPrototype(prefix){if(!FIELDS_INITIALIZED){initializeFields(prefix);}if(!PROTOTYPE_INITIALIZED){for(var i=0;i<FIELDS.length;i++){defineGet(FIELDS[i],PREFIXED_FIELDS[i]);}PROTOTYPE_INITIALIZED=true;}}function initializeFields(prefix){for(var i=0;i<FIELDS.length;i++){initializeField(FIELDS[i],prefix);}FIELDS_INITIALIZED=true;}function initializeField(field,prefix){if(field.endsWith('__c')){PREFIXED_FIELDS.push(prefix+field);}else{PREFIXED_FIELDS.push(field);}}function defineGet(field,prefixedField){Object.defineProperty(AccountModel.prototype,field,{get:function get(){return this._account[prefixedField];}});}module.exports=AccountModel;},{}],27:[function(require,module,exports){'use strict';var PROTOTYPE_INITIALIZED=false;var FIELDS_INITIALIZED=false;var SourceRecordDAO=require('../DAO/SourceRecordDAO.js');var DateUtils=require('qtc-js-utils').DateUtils;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var FIELDS=['Id','ContractNumber','AccountId','AmendmentStartDate__c','StartDate','EndDate','AmendmentOwner__c','AmendmentOpportunityStage__c','AmendmentOpportunityRecordTypeId__c','AmendmentPricebookId__c','OpportunityPricebookId__c','RenewalPricebookId__c','RenewalOpportunityRecordTypeId__c','RenewalOpportunityStage__c','SubscriptionQuantitiesCombined__c','PreserveBundleStructureUponRenewals__c','RenewalTerm__c','RenewalOwner__c','RenewalUpliftRate__c','MasterContract__c','DisableAmendmentCoTerm__c','AmendmentRenewalBehavior__c','Quote__c','RenewalOpportunity__c','RenewalForecast__c','RenewalQuoted__c'];var PREFIXED_FIELDS=[];var ContractModel=function(){function ContractModel(conn,settings,services,contract){_classCallCheck(this,ContractModel);this._settings=settings;this._isServiceCloudEnabled=settings.isServiceCloudEnabled;this._sourceRecordDAO=new SourceRecordDAO(conn,settings,services);this._logger=jsLogger;initPrototype(settings);if(contract){this._contract=contract;}}_createClass(ContractModel,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"getContract",value:function getContract(){return this._contract;}},{key:"getQuote",value:function getQuote(){if(this.Quote__c){var prefix=this._isServiceCloudEnabled?this._settings.serviceCloudPrefix:this._settings.salesCloudPrefix;return this._contract[prefix+'Quote__r'];}else{return null;}}},{key:"calculateRenewalEndDate",value:function calculateRenewalEndDate(isSubscriptionTermUnitDay){var _this90=this;var renewalTerm=this.calculateRenewalTerm();this._logMessage('ContractModel.js: Calculate renewal start date. SessionId='+this._settings.userId);var calcRenewalStartDateStartTime=Date.now();return this.calculateRenewalStartDate().then(function(startDate){_this90._logMessage('ContractModel.js: Calculating amendment end date took '+(Date.now()-calcRenewalStartDateStartTime)+' ms. SessionId='+_this90._settings.userId);var startDateArray=startDate.split('-');startDate=new Date(startDateArray[0],startDateArray[1]-1,startDateArray[2]);if(isSubscriptionTermUnitDay){startDate=DateUtils.addDays(startDate,renewalTerm-1);}else{startDate=DateUtils.addMonths(startDate,renewalTerm);startDate=DateUtils.addDays(startDate,-1);}return DateUtils.toApexDate(startDate);});}},{key:"calculateRenewalStartDate",value:function calculateRenewalStartDate(){var _this91=this;var amendmentRenewalBehavior=this._getAmendmentRenewalBehavior();if(amendmentRenewalBehavior!=null&&this._contract[amendmentRenewalBehavior]){return Promise.resolve(this._contract[amendmentRenewalBehavior]);}else{this._logMessage('ContractModel.js: Calculate amendment end date. SessionId='+this._settings.userId);var calcAmendmentEndDateStartTime=Date.now();return this.calculateAmendmentEndDate().then(function(amendmentEndDate){_this91._logMessage('ContractModel.js: Calculating amendment end date took '+(Date.now()-calcAmendmentEndDateStartTime)+' ms. SessionId='+_this91._settings.userId);var amendmentEndDateArray=amendmentEndDate.split('-');var startDate=new Date(amendmentEndDateArray[0],amendmentEndDateArray[1]-1,amendmentEndDateArray[2]);startDate=DateUtils.addDays(startDate,1);return DateUtils.toApexDate(startDate);});}}},{key:"calculateRenewalTerm",value:function calculateRenewalTerm(){var renewalTerm=this.RenewalTerm__c;if(this.RenewalTerm__c==null){if(this.StartDate==null||this.EndDate==null){renewalTerm=this._settings.isSubscriptionTermUnitDay?365:12;}else{var endDateArray=this.EndDate.split('-');var endDate=new Date(endDateArray[0],endDateArray[0]-1,endDateArray[2]);endDate=DateUtils.addDays(endDate,1);if(this._settings.isSubscriptionTermUnitDay){renewalTerm=DateUtils.daysBetween(this.StartDate,endDate);}else{renewalTerm=DateUtils.monthsBetween(this.StartDate,endDate);}}}return parseInt(renewalTerm);}},{key:"calculateAmendmentEndDate",value:function calculateAmendmentEndDate(){var _this92=this;var amendmentRenewalBehavior=this._getAmendmentRenewalBehavior();var endDate=this._calculateEndDate();var loadSubsRelatedToContractsStartTime=Date.now();this._logMessage('ContractModel.js: Load subscriptions related to contracts. Contract='+this.Id+' SessionId='+this._settings.userId);return this._sourceRecordDAO.loadSourceRecordsRelatedToContracts([this.getContract()]).then(function(subsByContractId){_this92._logMessage('ContractModel.js: Loading subscriptions related to contracts took '+(Date.now()-loadSubsRelatedToContractsStartTime)+' ms. Contract='+_this92.Id+' SessionId='+_this92._settings.userId);subsByContractId=subsByContractId['subsByContractId'];var subscriptions=subsByContractId.get(_this92.Id);var endDateField=_this92._isServiceCloudEnabled?'EndDate':_this92._settings.salesCloudPrefix+'EndDate__c';if(amendmentRenewalBehavior.toLowerCase()==='latest end date'){subscriptions.forEach(function(subscription){if(subscription[endDateField]>endDate){endDate=subscription[endDateField];}});}else if(amendmentRenewalBehavior.toLowerCase()==='earliest end date'){subscriptions.forEach(function(subscription){if(subscription[endDateField]<endDate){endDate=subscription[endDateField];}});}else if(amendmentRenewalBehavior!=null){endDate=_this92._contract[amendmentRenewalBehavior];}return endDate;});}},{key:"_getAmendmentRenewalBehavior",value:function _getAmendmentRenewalBehavior(){var value=this.AmendmentRenewalBehavior__c;return value!=null?value:'Latest End Date';}},{key:"_calculateEndDate",value:function _calculateEndDate(){var endDate=this.EndDate;if(endDate){return endDate;}var startDateArray=this.StartDate.split('-');var term=parseInt(this[this._getTermField()]);endDate=new Date(startDateArray[0],startDateArray[1]-1,startDateArray[2]);endDate=DateUtils.addDays(endDate,-1);endDate=DateUtils.addMonths(endDate,term);endDate=DateUtils.toApexDate(endDate);return endDate;}},{key:"_getTermField",value:function _getTermField(){return this._isServiceCloudEnabled?'Term':'ContractTerm';}}],[{key:"getSObjectType",value:function getSObjectType(isServiceCloudEnabled){if(isServiceCloudEnabled){return'ServiceContract';}return'Contract';}},{key:"getFields",value:function getFields(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}return PREFIXED_FIELDS;}}]);return ContractModel;}();function initPrototype(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}if(!PROTOTYPE_INITIALIZED){for(var i=0;i<FIELDS.length;i++){defineGet(FIELDS[i],PREFIXED_FIELDS[i]);}defineGet('Quote__r',settings.prefix+'Quote__r');PROTOTYPE_INITIALIZED=true;}}function initializeFields(settings){if(settings.isMultiCurrencyOrg){FIELDS.push('CurrencyIsoCode');}if(settings.isServiceCloudEnabled){FIELDS.push('Term');}else{FIELDS.push('ContractTerm');}for(var i=0;i<FIELDS.length;i++){initializeField(FIELDS[i],settings.prefix);}FIELDS_INITIALIZED=true;}function initializeField(field,prefix){if(field.endsWith('__c')){PREFIXED_FIELDS.push(prefix+field);}else{PREFIXED_FIELDS.push(field);}}function defineGet(field,prefixedField){Object.defineProperty(ContractModel.prototype,field,{get:function get(){return this._contract[prefixedField];},set:function set(v){this._contract[prefixedField]=v;}});}module.exports=ContractModel;},{"../DAO/SourceRecordDAO.js":9,"js-logger":38,"qtc-js-utils":57}],28:[function(require,module,exports){'use strict';var ContractModel=require('./ContractModel.js');var DateUtils=require('qtc-js-utils').DateUtils;var PROTOTYPE_INITIALIZED=false;var FIELDS_INITIALIZED=false;var FIELDS=['Id','AccountId','Pricebook2Id','CloseDate','Name','OwnerId','StageName','RecordTypeId','Renewal__c','PrimaryQuote__c'];var PREFIXED_FIELDS=[];var OpportunityModel=function(){function OpportunityModel(settings,opportunity){_classCallCheck(this,OpportunityModel);this._opportunity=opportunity;this._labels=settings.labels;initPrototype(settings);}_createClass(OpportunityModel,[{key:"hasOpp",value:function hasOpp(){if(this._opportunity){return true;}return false;}},{key:"createEmptyOpp",value:function createEmptyOpp(){this._opportunity={};}},{key:"calculateAmendmentCloseDate",value:function calculateAmendmentCloseDate(amendmentStartDate,startDate){var closeDate=this._getCurrentDate();if(amendmentStartDate&&amendmentStartDate<startDate){throw Error(this._labels['msg_contract_amendment_start_date_before_actual_start_date']);}if(amendmentStartDate){closeDate=amendmentStartDate;}else if(startDate>closeDate){closeDate=startDate;}return closeDate;}},{key:"calculateRenewalCloseDate",value:function calculateRenewalCloseDate(closeDate){var closeDateArray=closeDate.split('-');closeDate=new Date(closeDateArray[0],closeDateArray[1]-1,closeDateArray[2]);closeDate=DateUtils.addDays(closeDate,-1);return DateUtils.toApexDate(closeDate);}},{key:"_getCurrentDate",value:function _getCurrentDate(){var today=new Date();return DateUtils.toApexDate(today);}},{key:"getOpportunity",value:function getOpportunity(){return this._opportunity;}}],[{key:"getFields",value:function getFields(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}return PREFIXED_FIELDS;}}]);return OpportunityModel;}();function initPrototype(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}if(!PROTOTYPE_INITIALIZED){for(var i=0;i<FIELDS.length;i++){defineGetAndSet(FIELDS[i],PREFIXED_FIELDS[i]);}PROTOTYPE_INITIALIZED=true;}}function initializeFields(settings){if(settings.isMultiCurrencyOrg){FIELDS.push('CurrencyIsoCode');}FIELDS.push('Amended'+ContractModel.getSObjectType(settings.isServiceCloudEnabled)+'__c');FIELDS.push('Renewed'+ContractModel.getSObjectType(settings.isServiceCloudEnabled)+'__c');for(var i=0;i<FIELDS.length;i++){initializeField(FIELDS[i],settings);}FIELDS_INITIALIZED=true;}function initializeField(field,settings){if(field.endsWith('__c')){var prefix=settings.salesCloudPrefix;switch(field){case'RenewedServiceContract__c':case'AmendedServiceContract__c':prefix=settings.serviceCloudPrefix;break;}PREFIXED_FIELDS.push(prefix+field);}else{PREFIXED_FIELDS.push(field);}}function defineGetAndSet(field,prefixedField){Object.defineProperty(OpportunityModel.prototype,field,{get:function get(){return this._opportunity[prefixedField];},set:function set(v){this._opportunity[prefixedField]=v;}});}module.exports=OpportunityModel;},{"./ContractModel.js":27,"qtc-js-utils":57}],29:[function(require,module,exports){'use strict';var ContractModel=require('./ContractModel.js');var PROTOTYPE_INITIALIZED=false;var FIELDS_INITIALIZED=false;var FIELDS=['Name','Id','Opportunity2__c','Type__c','Primary__c','Account__c','PricebookId__c','StartDate__c','RenewalTerm__c','RenewalUpliftRate__c','EndDate__c','ExpirationDate__c','LineItemsGrouped__c','DefaultGroupName__c','NetAmount__c','TargetCustomerAmount__c','CustomerDiscount__c','SubscriptionTerm__c','DistributorDiscount__c',"PartnerDiscount__c","MarkupRate__c","FirstSegmentTermEndDate__c","ListAmount__c","CustomerAmount__c","RegularAmount__c","LineItemCount__c",'SalesRep__c','PriceBook__c'];var MAGIC_FIELDS=['ApplyAdditionalDiscountLast__c','ApplyPartnerDiscountFirst__c','ChannelDiscountsOffList__c','DefaultSalesRepId__c'];var PREFIXED_FIELDS=[];var QuoteModel=function(){function QuoteModel(settings){_classCallCheck(this,QuoteModel);initPrototype(settings);}_createClass(QuoteModel,[{key:"setSalesRep",value:function setSalesRep(oppOwnerId){if(!this.SalesRep__c){if(this.DefaultSalesRepId__c){this.SalesRep__c=this.DefaultSalesRepId__c;}else{this.SalesRep__c=oppOwnerId;}}}},{key:"createEmptyQuote",value:function createEmptyQuote(){this._quote={};}},{key:"getQuote",value:function getQuote(){return this._quote;}}],[{key:"getFields",value:function getFields(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}return PREFIXED_FIELDS;}},{key:"getMagicFields",value:function getMagicFields(){return MAGIC_FIELDS;}}]);return QuoteModel;}();function initPrototype(settings){if(!FIELDS_INITIALIZED){initializeFields(settings);}if(!PROTOTYPE_INITIALIZED){for(var i=0;i<FIELDS.length;i++){defineGetAndSet(FIELDS[i],PREFIXED_FIELDS[i]);}PROTOTYPE_INITIALIZED=true;}}function initializeFields(settings){if(settings.isMultiCurrencyOrg){FIELDS.push('CurrencyIsoCode');}FIELDS.push('Master'+ContractModel.getSObjectType(settings.isServiceCloudEnabled)+'__c');for(var i=0;i<FIELDS.length;i++){initializeField(FIELDS[i],settings);}for(var _i2=0;_i2<MAGIC_FIELDS.length;_i2++){initializeField(MAGIC_FIELDS[_i2],settings);}FIELDS_INITIALIZED=true;}function initializeField(field,settings){if(field.endsWith('__c')){var prefix=settings.salesCloudPrefix;switch(field){case'MasterServiceContract__c':prefix=settings.serviceCloudPrefix;break;}PREFIXED_FIELDS.push(prefix+field);}else{PREFIXED_FIELDS.push(field);}}function defineGetAndSet(field,prefixedField){Object.defineProperty(QuoteModel.prototype,field,{get:function get(){return this._quote[prefixedField];},set:function set(v){this._quote[prefixedField]=v;}});}module.exports=QuoteModel;},{"./ContractModel.js":27}],30:[function(require,module,exports){var ProductDAO=require('../DAO/ProductDAO.js').DAO;var ProductSubqueryDescriptor=require('../DAO/ProductDAO.js').SubqueryDescriptor;var jsLogger=require('js-logger').logger.getLogger('JSAR Perf');var NEXT_OPP_LINE_MODEL_KEY=0;var OpportunityLineGenerator=function(){function OpportunityLineGenerator(conn,settings,services){_classCallCheck(this,OpportunityLineGenerator);this._conn=conn;this._settings=settings;this._salesCloudPrefix=settings.salesCloudPrefix;this._services=services;this._initialized=false;this._logger=jsLogger;}_createClass(OpportunityLineGenerator,[{key:"_logMessage",value:function _logMessage(msg){this._logger.info(msg);}},{key:"_init",value:function _init(){var _this93=this;if(this._initialized){return Promise.resolve();}else{this._logMessage('OpportunityLineGenerator.js: Get shared mappable field names. SessionId='+this._settings.userId);var getSharedMappableFieldNamesStartTime=Date.now();return this._services.fieldMetadataService.getSharedMappableFieldNames(this._salesCloudPrefix+'QuoteLine__c','OpportunityLineItem').then(function(fields){_this93._logMessage('OpportunityLineGenerator.js: Getting shared mappable fields names took '+(Date.now()-getSharedMappableFieldNamesStartTime)+' ms. SessionId='+_this93._settings.userId);_this93._mappableFields=fields;_this93._initialized=true;});}}},{key:"generateOppLines",value:function generateOppLines(quotes){var _this94=this;this._logMessage('OpportunityLineGenerator.js: Initialization. SessionId='+this._settings.userId);var loadProductsStartTime=void 0;var initStartTime=Date.now();return this._init().then(function(){_this94._logMessage('OpportunityLineGenerator.js: Initialization took '+(Date.now()-initStartTime)+' ms. SessionId='+_this94._settings.userId);_this94._logMessage('OpportunityLineGenerator.js: Load Products. SessionId='+_this94._settings.userId);loadProductsStartTime=Date.now();return _this94._loadProducts(quotes);}).then(function(){_this94._logMessage('OpportunityLineGenerator.js: Loading products took '+(Date.now()-loadProductsStartTime)+' ms. SessionId='+_this94._settings.userId);var quoteCount=quotes.length;var oppLinesByOppId=new Map();var _loop7=function _loop7(i){var oppLinesByQuoteLineKey=new Map();var oppLines=[];var quote=quotes[i];var oppId=quote.record[_this94._salesCloudPrefix+'Opportunity2__c'];var eligibleQuoteLines=_this94._identifyEligibleLines(quote);eligibleQuoteLines.forEach(function(quoteLine){var pricebookEntryId=_this94._getPricebookEntryId(quoteLine,quote.record[_this94._salesCloudPrefix+'PricebookId__c'],quote.record.CurrencyIsoCode);var qty=_this94._calculateOpportunityLineQuantity(quoteLine);if(pricebookEntryId&&qty!==0){var oppLine=_this94._generateOppLine(quoteLine,quote,qty,pricebookEntryId);oppLines.push(oppLine);oppLinesByQuoteLineKey.set(quoteLine.key,oppLine);}});eligibleQuoteLines.forEach(function(quoteLine){var childOppLine=oppLinesByQuoteLineKey.get(quoteLine.key);var parentOppLine=quoteLine.parentItemKey?oppLinesByQuoteLineKey.get(quoteLine.parentItemKey):null;if(childOppLine&&parentOppLine){childOppLine.parentKey=parentOppLine.key;}});oppLinesByOppId.set(oppId,oppLines);};for(var i=0;i<quoteCount;i++){_loop7(i);}return oppLinesByOppId;});}},{key:"_getPricebookEntryId",value:function _getPricebookEntryId(quoteLine,pricebookId,currencyCode){var product=this._getProductForQuoteLine(quoteLine);if(!product.PricebookEntries||product.PricebookEntries.records.length===0){return null;}var pbeCount=product.PricebookEntries.records.length;for(var i=0;i<pbeCount;i++){var pbe=product.PricebookEntries.records[i];var isEntryInDesiredPricebook=pbe.Pricebook2Id.slice(0,15)===pricebookId.slice(0,15);var hasMatchingCurrencyCode=!this._settings.isMultiCurrencyOrg||pbe.CurrencyIsoCode===currencyCode;if(isEntryInDesiredPricebook&&hasMatchingCurrencyCode){return pbe.Id;}}return null;}},{key:"_loadProducts",value:function _loadProducts(quotes){var _this95=this;var productIds=[];var pricebookIds=[];var currencyCodes=[];quotes.forEach(function(quote){pricebookIds.push(quote.record[_this95._salesCloudPrefix+'PricebookId__c']);if(quote.record.CurrencyIsoCode){currencyCodes.push(quote.record.CurrencyIsoCode);}quote.lineItems.forEach(function(line){productIds.push(line.record[_this95._salesCloudPrefix+'Product__c']);});});var productSubqueryDescriptor=new ProductSubqueryDescriptor(this._settings);productSubqueryDescriptor.includePriceEntriesFilteredByPricebookAndCurrency(pricebookIds,currencyCodes);productSubqueryDescriptor.includeCosts();return new ProductDAO(this._conn,this._settings,this._services).loadProductsByIds(productIds,productSubqueryDescriptor).then(function(productsById){_this95._productsById=productsById;});}},{key:"_getProductForQuoteLine",value:function _getProductForQuoteLine(lineModel){return this._productsById.get(lineModel.record[this._salesCloudPrefix+'Product__c']);}},{key:"_identifyEligibleLines",value:function _identifyEligibleLines(quoteModel){var _this96=this;return quoteModel.lineItems.filter(function(line){var product=_this96._getProductForQuoteLine(line);var isExcluded=product[_this96._salesCloudPrefix+'ExcludeFromOpportunity__c'];var isOptional=line.record[_this96._salesCloudPrefix+'Optional__c'];if(!isOptional&&!isExcluded){var treatedAsNetNew=!line.record[_this96._salesCloudPrefix+'Renewal__c'];var notSubscription=!line.record[_this96._salesCloudPrefix+'SubscriptionPricing__c'];return treatedAsNetNew||notSubscription;}});}},{key:"_generateOppLine",value:function _generateOppLine(quoteLine,quote,qty,pricebookEntryId){var _record;var prefix=this._salesCloudPrefix;var oppModel={key:NEXT_OPP_LINE_MODEL_KEY++,quoteLineKey:quoteLine.key,record:(_record={},_defineProperty(_record,this._salesCloudPrefix+'QuoteLine__c',quoteLine.record.Id||null),_defineProperty(_record,"UnitPrice",quote.applyAdditionalDiscountLast?quoteLine.record[prefix+'CustomerPrice__c']:quoteLine.record[prefix+'NetPrice__c']),_defineProperty(_record,"OpportunityId",quote.record[prefix+'Opportunity2__c']),_defineProperty(_record,"Quantity",qty),_defineProperty(_record,"PricebookEntryId",pricebookEntryId),_record)};this._mappableFields.forEach(function(field){oppModel.record[field]=quoteLine.record[field];});return oppModel;}},{key:"_calculateOpportunityLineQuantity",value:function _calculateOpportunityLineQuantity(lineModel){var isExisting=lineModel.record[this._settings.salesCloudPrefix+'Existing__c'];var priorQty=lineModel.record[this._settings.salesCloudPrefix+'PriorQuantity__c'];var qty=lineModel.record[this._settings.salesCloudPrefix+'Quantity__c'];var isBlock=lineModel.record[this._settings.salesCloudPrefix+'PricingMethod__c']==='Block';var isSlab=lineModel.record[this._settings.salesCloudPrefix+'DiscountScheduleType__c']==='Slab';if(isBlock||isSlab){if(isExisting&&priorQty&&priorQty===qty){return 0;}else if(qty!==0){return 1;}}return qty-(isExisting?priorQty:0);}}]);return OpportunityLineGenerator;}();module.exports=OpportunityLineGenerator;},{"../DAO/ProductDAO.js":7,"js-logger":38}],31:[function(require,module,exports){var RenewalOpportunity=function(){function RenewalOpportunity(contractModel,opportunityModel){_classCallCheck(this,RenewalOpportunity);this._contractModel=contractModel;this._opportunityModel=opportunityModel;}_createClass(RenewalOpportunity,[{key:"masterContractModel",get:function get(){return this._contractModel;}},{key:"contractModels",get:function get(){return[this._contractModel];}},{key:"opportunityModel",get:function get(){return this._opportunityModel;}}]);return RenewalOpportunity;}();module.exports=RenewalOpportunity;},{}],32:[function(require,module,exports){'use strict';var LineItemConvertible=require('../common/LineItemConvertible.js');var RenewedItem=function(_LineItemConvertible2){_inherits(RenewedItem,_LineItemConvertible2);function RenewedItem(){_classCallCheck(this,RenewedItem);return _possibleConstructorReturn(this,(RenewedItem.__proto__||Object.getPrototypeOf(RenewedItem)).apply(this,arguments));}_createClass(RenewedItem,[{key:"_createVO",value:function _createVO(){var _this98=this;return _get(RenewedItem.prototype.__proto__||Object.getPrototypeOf(RenewedItem.prototype),"_createVO",this).call(this).then(function(){_this98._setRenewalPrice();});}},{key:"_setRenewalPrice",value:function _setRenewalPrice(){var _this99=this;var quoteLinePrefix=this._salesCloudPrefix;var blockPriced=this.lineVO.record[quoteLinePrefix+'PricingMethod__c'].toLowerCase()==='block';var slabDiscounted=(this._sourceRecord[this._sourceRecPrefix+'DiscountScheduleType__c']||'').toLowerCase()==='slab';var renewalPricingMethod=(this._account[this._salesCloudPrefix+'RenewalPricingMethod__c']||'').toLowerCase();if(blockPriced&&renewalPricingMethod==='list'){this.lineVO.renewalPrice=null;}if(blockPriced||slabDiscounted){var rpSum=0;var allRecs=this._originalRecords.concat(this._revisions);allRecs.forEach(function(rec){rpSum+=_this99._calculateRenewalPrice(rec);});this.lineVO.renewalPrice=rpSum;}else{this.lineVO.renewalPrice=this._calculateRenewalPrice(this._mostRecentRecord);}}},{key:"_calculateRenewalPrice",value:function _calculateRenewalPrice(sourceRecord){var rpm=(this._account[this._salesCloudPrefix+'RenewalPricingMethod__c']||'').toLowerCase();switch(rpm){case'list':return this._getRenewalListPrice();case'uplift':var samePrice=this._getRenewalSamePrice(sourceRecord);var _upliftRate=this._isPriceHoldInEffect()?0:this._getRenewalUpliftRate(sourceRecord)||0;return samePrice==null?null:samePrice*(1.0+_upliftRate/100);case'same':default:return this._getRenewalSamePrice(sourceRecord);}}},{key:"_getRenewalUpliftRate",value:function _getRenewalUpliftRate(record){throw new Error('RenewedItem.getRenewalUpliftRate() should be overridden by child classes, and never invoked directly.');}},{key:"_getRenewalSamePrice",value:function _getRenewalSamePrice(record){throw new Error('RenewedItem._getRenewalSamePrice() should be overridden by child classes, and never invoked directly.');}},{key:"_getRenewalListPrice",value:function _getRenewalListPrice(){throw new Error('RenewedItem._getRenewalListPrice() should be overridden by child classes, and never invoked directly.');}},{key:"_mostRecentRecord",get:function get(){if(this._revisions.length>0){return this._revisions[this._revisions.length-1];}else{return this._sourceRecord;}}}]);return RenewedItem;}(LineItemConvertible);module.exports=RenewedItem;},{"../common/LineItemConvertible.js":19}],33:[function(require,module,exports){'use strict';var RenewedItem=require('./RenewedItem.js');var RenewedSubscription=function(_RenewedItem){_inherits(RenewedSubscription,_RenewedItem);function RenewedSubscription(){_classCallCheck(this,RenewedSubscription);return _possibleConstructorReturn(this,(RenewedSubscription.__proto__||Object.getPrototypeOf(RenewedSubscription)).apply(this,arguments));}_createClass(RenewedSubscription,[{key:"_getSummedQuantity",value:function _getSummedQuantity(){var _this101=this;var sum=0;var allRecs=this._originalRecords.concat(this._revisions);allRecs.forEach(function(rec){var renewalQty=rec[_this101._sourceRecPrefix+'RenewalQuantity__c'];var qty=rec[_this101._qtyField];sum+=renewalQty!=null?renewalQty:qty;});return sum;}},{key:"_shouldGenerateLines",value:function _shouldGenerateLines(){if(!_get(RenewedSubscription.prototype.__proto__||Object.getPrototypeOf(RenewedSubscription.prototype),"_shouldGenerateLines",this).call(this)){return false;}var sourceRec=this._sourceRecord;var prefix=this._sourceRecPrefix;if(sourceRec[prefix+'TerminatedDate__c']){return false;}var renewability=this._product[this._salesCloudPrefix+'SubscriptionType__c']||'';return renewability.toLowerCase()!=='one-time';}},{key:"_setRenewalPrice",value:function _setRenewalPrice(){_get(RenewedSubscription.prototype.__proto__||Object.getPrototypeOf(RenewedSubscription.prototype),"_setRenewalPrice",this).call(this);var isListPriced=(this.lineVO.record[this._salesCloudPrefix+'PricingMethod__c']||'list').toLowerCase()==='list';if(isListPriced&&this.lineVO.record[this._salesCloudPrefix+'ListPrice__c']===this.lineVO.renewalPrice){this.lineVO.renewalPrice=null;}}},{key:"_setValuesFromProduct",value:function _setValuesFromProduct(lineVO){_get(RenewedSubscription.prototype.__proto__||Object.getPrototypeOf(RenewedSubscription.prototype),"_setValuesFromProduct",this).call(this,lineVO);var product=this._product;var prefix=this._salesCloudPrefix;var rpmIsList=(this._account[prefix+'RenewalPricingMethod__c']||'').toLowerCase()==='list';var priceEditable=lineVO.record[prefix+'PriceEditable__c'];if(rpmIsList||!priceEditable){var listPrice=null;var pricebook=this._quote[prefix+'PricebookId__c'];var currencyCode=lineVO.record['CurrencyIsoCode'];if(product.PricebookEntries){var entryCount=product.PricebookEntries.records.length;for(var i=0;i<entryCount;i++){var entry=product.PricebookEntries.records[i];if(entry.Pricebook2Id.slice(0,15)===pricebook.slice(0,15)){if(!this._settings.isMultiCurrencyOrg||entry.CurrencyIsoCode===currencyCode){listPrice=entry.UnitPrice;break;}}}}lineVO.record[prefix+'ListPrice__c']=listPrice;}}},{key:"_setValuesFromOrigin",value:function _setValuesFromOrigin(lineVO){_get(RenewedSubscription.prototype.__proto__||Object.getPrototypeOf(RenewedSubscription.prototype),"_setValuesFromOrigin",this).call(this,lineVO);var record=lineVO.record;var salesCloudPrefix=this._salesCloudPrefix;var sourcePrefix=this._sourceRecPrefix;var sourceRec=this._sourceRecord;record[this._renewedItemField]=sourceRec.Id;var rpm=(this._account[salesCloudPrefix+'RenewalPricingMethod__c']||'').toLowerCase();var priceEditable=record[salesCloudPrefix+'PriceEditable__c'];if(rpm!=='list'&&priceEditable){var prorateMultiplier=sourceRec[sourcePrefix+'ProrateMultiplier__c'];var subListPrice=sourceRec[sourcePrefix+'ListPrice__c'];record[salesCloudPrefix+'ListPrice__c']=prorateMultiplier?subListPrice/prorateMultiplier:subListPrice;}var subEndDate=new Date(sourceRec[this._sourceEndDateField]);subEndDate.setUTCDate(subEndDate.getUTCDate()+1);var startDate=subEndDate;var startDateStr=startDate.toISOString().replace(new RegExp('[Tt].*'),"");var quoteStartDateStr=this._quote[salesCloudPrefix+'StartDate__c'];if(quoteStartDateStr!==startDateStr){record[salesCloudPrefix+'StartDate__c']=startDateStr;}if(rpm==='uplift'&&!this._isPriceHoldInEffect()){if(record[salesCloudPrefix+'SubscriptionPricing__c'].toLowerCase()==='percent of total'){record[salesCloudPrefix+'SubscriptionPercent__c']*=(100+(upliftRate||0))/100;}}}},{key:"_getEffectiveOptionId",value:function _getEffectiveOptionId(sourceRec){var prefix=this._sourceRecPrefix;return sourceRec[prefix+'RenewalProductOptionId__c']||sourceRec[prefix+'ProductOption__c'];}},{key:"_getRenewalUpliftRate",value:function _getRenewalUpliftRate(subRecord){var prefix=this._sourceRecPrefix;return subRecord[prefix+'RenewalUpliftRate__c']||this._contract[prefix+'RenewalUpliftRate__c'];}},{key:"_getRenewalSamePrice",value:function _getRenewalSamePrice(subRecord){var prefix=this._sourceRecPrefix;var oldPrice=subRecord[prefix+'RenewalPrice__c'];if(oldPrice==null){var prorateMultiplier=subRecord[prefix+'ProrateMultiplier__c'];prorateMultiplier=prorateMultiplier==null?1:prorateMultiplier;var customerPrice=subRecord[prefix+'CustomerPrice__c'];oldPrice=customerPrice==null?null:customerPrice/prorateMultiplier;}return oldPrice;}},{key:"_getRenewalListPrice",value:function _getRenewalListPrice(){return this.lineVO.record[this._salesCloudPrefix+'ListPrice__c'];}},{key:"_sourceRecPrefix",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix:this._serviceCloudPrefix;}},{key:"_qtyField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'Quantity__c':'Quantity';}},{key:"_renewedItemField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'RenewedSubscription__c':this._serviceCloudPrefix+'RenewedContractLine__c';}},{key:"_sourceEndDateField",get:function get(){return this._sourceRecType.endsWith('Subscription__c')?this._salesCloudPrefix+'EndDate__c':'EndDate';}}]);return RenewedSubscription;}(RenewedItem);module.exports=RenewedSubscription;},{"./RenewedItem.js":32}],34:[function(require,module,exports){'use strict';exports.path=require('path').dirname(require.main.filename);exports.resolve=function(pathToModule){return exports.path+pathToModule;};exports.require=function(pathToModule){return require(exports.resolve(pathToModule));};exports.toString=function(){return exports.path;};exports.setPath=function(explicitlySetPath){exports.path=explicitlySetPath;};},{"path":51}],35:[function(require,module,exports){},{}],36:[function(require,module,exports){arguments[4][35][0].apply(exports,arguments);},{"dup":35}],37:[function(require,module,exports){function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;EventEmitter.defaultMaxListeners=10;EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};if(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;}else{var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args);}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};if(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])this._events[type]=listener;else if(isObject(this._events[type]))this._events[type].push(listener);else this._events[type]=[this._events[type],listener];if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){console.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}if(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else if(listeners){while(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length;}return 0;};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type);};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}},{}],38:[function(require,module,exports){module.exports.logger=require('./logger.js').instance;module.exports.newLoggerInstance=require('./logger.js').newInstance;},{"./logger.js":39}],39:[function(require,module,exports){(function(process,global,__filename){'use strict';var fs=require('fs');var log4js=require('log4js');var path=require('path');var configurationFileOrObject=process.env.JS_LOGGER_CONFIG;var defaultConfig={"appenders":[{"type":"console","layout":{"type":"basic"}}],"levels":{"[all]":"INFO"}};function Logger(){this._initialized=false;}Logger.prototype.init=function(configurationFileOrObject){if(!this._initialized){if(configurationFileOrObject){try{if(typeof window!=='undefined'){log4js.configure(JSON.parse(configurationFileOrObject));}else{if(fs.existsSync(configurationFileOrObject)){log4js.configure(configurationFileOrObject);}else{log4js.configure(JSON.parse(configurationFileOrObject));}}}catch(err){console.error("Loading default config as Configuration File or Object is not valid.",err);log4js.configure(defaultConfig);}}else{log4js.configure(defaultConfig);}this._initialized=true;}return this;};Logger.prototype.getLogger=function(category,prefix){if(!this._initialized){this.init(configurationFileOrObject);}if(category&&prefix){return log4js.getLogger(prefix+'#'+category);}else if(category){return log4js.getLogger(category);}else{return log4js.getLogger(this._getCallerFile());}};Logger.prototype._getCallerFile=function(){var originalFunc=Error.prepareStackTrace;var classPath=null;try{if(typeof window!=='undefined'){return path.basename(__filename);}else{var appRoot=require('app-root-path');var error=new Error();var callerFile;var currentFile;Error.prepareStackTrace=function(err,stack){return stack;};currentFile=error.stack.shift().getFileName();while(error.stack.length){callerFile=error.stack.shift().getFileName();if(currentFile!==callerFile){var pathFromRoot=callerFile.replace(appRoot+"/","");classPath=pathFromRoot.substring(0,pathFromRoot.lastIndexOf('.')).replace(/\//g,".");break;}}}}catch(err){console.error("Error while getting caller file name: ",err);}finally{Error.prepareStackTrace=originalFunc;return classPath!=null?classPath:'default';}};var LOGGER=Symbol.for('logger');var globalRef=typeof global!=='undefined'?global:typeof self!=='undefined'?self:typeof window!='undefined'?window:{};var globalSymbols=Object.getOwnPropertySymbols(globalRef);var hasLogger=globalSymbols.indexOf(LOGGER)>-1;if(!hasLogger){var _logger=new Logger();globalRef[LOGGER]=_logger;}function newInstance(){return new Logger();}module.exports={instance:globalRef[LOGGER],newInstance:newInstance};}).call(this,require('_process'),typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{},"/node_modules/js-logger/logger.js");},{"_process":52,"app-root-path":34,"fs":36,"log4js":45,"path":51}],40:[function(require,module,exports){"use strict";var layouts=require('../layouts'),consoleLog=console.log.bind(console);function consoleAppender(layout,timezoneOffset){layout=layout||layouts.colouredLayout;return function(loggingEvent){consoleLog(layout(loggingEvent,timezoneOffset));};}function configure(config){var layout;if(config.layout){layout=layouts.layout(config.layout.type,config.layout);}return consoleAppender(layout,config.timezoneOffset);}exports.appender=consoleAppender;exports.configure=configure;},{"../layouts":43}],41:[function(require,module,exports){"use strict";var levels=require("./levels");var DEFAULT_FORMAT=':remote-addr - -'+' ":method :url HTTP/:http-version"'+' :status :content-length ":referrer"'+' ":user-agent"';function getLogger(logger4js,options){if('object'==(typeof options==="undefined"?"undefined":_typeof(options))){options=options||{};}else if(options){options={format:options};}else{options={};}var thislogger=logger4js,level=levels.toLevel(options.level,levels.INFO),fmt=options.format||DEFAULT_FORMAT,nolog=options.nolog?createNoLogCondition(options.nolog):null;return function(req,res,next){if(req._logging)return next();if(nolog&&nolog.test(req.originalUrl))return next();if(thislogger.isLevelEnabled(level)||options.level==='auto'){var start=new Date(),statusCode,writeHead=res.writeHead,url=req.originalUrl;req._logging=true;res.writeHead=function(code,headers){res.writeHead=writeHead;res.writeHead(code,headers);res.__statusCode=statusCode=code;res.__headers=headers||{};if(options.level==='auto'){level=levels.INFO;if(code>=300)level=levels.WARN;if(code>=400)level=levels.ERROR;}else{level=levels.toLevel(options.level,levels.INFO);}};res.on('finish',function(){res.responseTime=new Date()-start;if(res.statusCode&&options.level==='auto'){level=levels.INFO;if(res.statusCode>=300)level=levels.WARN;if(res.statusCode>=400)level=levels.ERROR;}if(thislogger.isLevelEnabled(level)){var combined_tokens=assemble_tokens(req,res,options.tokens||[]);if(typeof fmt==='function'){var line=fmt(req,res,function(str){return format(str,combined_tokens);});if(line)thislogger.log(level,line);}else{thislogger.log(level,format(fmt,combined_tokens));}}});}next();};}function assemble_tokens(req,res,custom_tokens){var array_unique_tokens=function array_unique_tokens(array){var a=array.concat();for(var i=0;i<a.length;++i){for(var j=i+1;j<a.length;++j){if(a[i].token==a[j].token){a.splice(j--,1);}}}return a;};var default_tokens=[];default_tokens.push({token:':url',replacement:getUrl(req)});default_tokens.push({token:':protocol',replacement:req.protocol});default_tokens.push({token:':hostname',replacement:req.hostname});default_tokens.push({token:':method',replacement:req.method});default_tokens.push({token:':status',replacement:res.__statusCode||res.statusCode});default_tokens.push({token:':response-time',replacement:res.responseTime});default_tokens.push({token:':date',replacement:new Date().toUTCString()});default_tokens.push({token:':referrer',replacement:req.headers.referer||req.headers.referrer||''});default_tokens.push({token:':http-version',replacement:req.httpVersionMajor+'.'+req.httpVersionMinor});default_tokens.push({token:':remote-addr',replacement:req.headers['x-forwarded-for']||req.ip||req._remoteAddress||req.socket&&(req.socket.remoteAddress||req.socket.socket&&req.socket.socket.remoteAddress)});default_tokens.push({token:':user-agent',replacement:req.headers['user-agent']});default_tokens.push({token:':content-length',replacement:res._headers&&res._headers['content-length']||res.__headers&&res.__headers['Content-Length']||'-'});default_tokens.push({token:/:req\[([^\]]+)\]/g,replacement:function replacement(_,field){return req.headers[field.toLowerCase()];}});default_tokens.push({token:/:res\[([^\]]+)\]/g,replacement:function replacement(_,field){return res._headers?res._headers[field.toLowerCase()]||res.__headers[field]:res.__headers&&res.__headers[field];}});return array_unique_tokens(custom_tokens.concat(default_tokens));}function getUrl(req){return req.originalUrl||req.url;}function format(str,tokens){for(var i=0;i<tokens.length;i++){str=str.replace(tokens[i].token,tokens[i].replacement);}return str;}function createNoLogCondition(nolog){var regexp=null;if(nolog){if(nolog instanceof RegExp){regexp=nolog;}if(typeof nolog==='string'){regexp=new RegExp(nolog);}if(Array.isArray(nolog)){var regexpsAsStrings=nolog.map(function convertToStrings(o){return o.source?o.source:o;});regexp=new RegExp(regexpsAsStrings.join('|'));}}return regexp;}exports.connectLogger=getLogger;},{"./levels":44}],42:[function(require,module,exports){"use strict";exports.ISO8601_FORMAT="yyyy-MM-dd hh:mm:ss.SSS";exports.ISO8601_WITH_TZ_OFFSET_FORMAT="yyyy-MM-ddThh:mm:ssO";exports.DATETIME_FORMAT="dd MM yyyy hh:mm:ss.SSS";exports.ABSOLUTETIME_FORMAT="hh:mm:ss.SSS";function padWithZeros(vNumber,width){var numAsString=vNumber+"";while(numAsString.length<width){numAsString="0"+numAsString;}return numAsString;}function addZero(vNumber){return padWithZeros(vNumber,2);}function offset(timezoneOffset){var os=Math.abs(timezoneOffset);var h=String(Math.floor(os/60));var m=String(os%60);if(h.length==1){h="0"+h;}if(m.length==1){m="0"+m;}return timezoneOffset<0?"+"+h+m:"-"+h+m;}exports.asString=function(date,timezoneOffset){var format=exports.ISO8601_FORMAT;if(typeof date==="string"){format=arguments[0];date=arguments[1];timezoneOffset=arguments[2];}if(timezoneOffset===undefined){timezoneOffset=date.getTimezoneOffset();}date.setUTCMinutes(date.getUTCMinutes()-timezoneOffset);var vDay=addZero(date.getUTCDate());var vMonth=addZero(date.getUTCMonth()+1);var vYearLong=addZero(date.getUTCFullYear());var vYearShort=addZero(date.getUTCFullYear().toString().substring(2,4));var vYear=format.indexOf("yyyy")>-1?vYearLong:vYearShort;var vHour=addZero(date.getUTCHours());var vMinute=addZero(date.getUTCMinutes());var vSecond=addZero(date.getUTCSeconds());var vMillisecond=padWithZeros(date.getUTCMilliseconds(),3);var vTimeZone=offset(timezoneOffset);date.setUTCMinutes(date.getUTCMinutes()+timezoneOffset);var formatted=format.replace(/dd/g,vDay).replace(/MM/g,vMonth).replace(/y{1,4}/g,vYear).replace(/hh/g,vHour).replace(/mm/g,vMinute).replace(/ss/g,vSecond).replace(/SSS/g,vMillisecond).replace(/O/g,vTimeZone);return formatted;};},{}],43:[function(require,module,exports){(function(process){"use strict";var dateFormat=require('./date_format'),os=require('os'),eol=os.EOL||'\n',util=require('util'),semver=require('semver'),replacementRegExp=/%[sdj]/g,layoutMakers={"messagePassThrough":function messagePassThrough(){return messagePassThroughLayout;},"basic":function basic(){return basicLayout;},"colored":function colored(){return colouredLayout;},"coloured":function coloured(){return colouredLayout;},"pattern":function pattern(config){return patternLayout(config&&config.pattern,config&&config.tokens);},"dummy":function dummy(){return dummyLayout;}},colours={ALL:"grey",TRACE:"blue",DEBUG:"cyan",INFO:"green",WARN:"yellow",ERROR:"red",FATAL:"magenta",OFF:"grey"};function wrapErrorsWithInspect(items){return items.map(function(item){if(item instanceof Error&&item.stack){return{inspect:function inspect(){if(semver.satisfies(process.version,'>=6')){return util.format(item);}else{return util.format(item)+'\n'+item.stack;}}};}else{return item;}});}function formatLogData(logData){var data=Array.isArray(logData)?logData:Array.prototype.slice.call(arguments);return util.format.apply(util,wrapErrorsWithInspect(data));}var styles={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[90,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};function colorizeStart(style){return style?'\x1B['+styles[style][0]+'m':'';}function colorizeEnd(style){return style?'\x1B['+styles[style][1]+'m':'';}function colorize(str,style){return colorizeStart(style)+str+colorizeEnd(style);}function timestampLevelAndCategory(loggingEvent,colour,timezoneOffest){var output=colorize(formatLogData('[%s] [%s] %s - ',dateFormat.asString(loggingEvent.startTime,timezoneOffest),loggingEvent.level,loggingEvent.categoryName),colour);return output;}function basicLayout(loggingEvent,timezoneOffset){return timestampLevelAndCategory(loggingEvent,undefined,timezoneOffset)+formatLogData(loggingEvent.data);}function colouredLayout(loggingEvent,timezoneOffset){return timestampLevelAndCategory(loggingEvent,colours[loggingEvent.level.toString()],timezoneOffset)+formatLogData(loggingEvent.data);}function messagePassThroughLayout(loggingEvent){return formatLogData(loggingEvent.data);}function dummyLayout(loggingEvent){return loggingEvent.data[0];}function patternLayout(pattern,tokens,timezoneOffset){var TTCC_CONVERSION_PATTERN="%r %p %c - %m%n";var regex=/%(-?[0-9]+)?(\.?[0-9]+)?([\[\]cdhmnprzxy%])(\{([^\}]+)\})?|([^%]+)/;pattern=pattern||TTCC_CONVERSION_PATTERN;function categoryName(loggingEvent,specifier){var loggerName=loggingEvent.categoryName;if(specifier){var precision=parseInt(specifier,10);var loggerNameBits=loggerName.split(".");if(precision<loggerNameBits.length){loggerName=loggerNameBits.slice(loggerNameBits.length-precision).join(".");}}return loggerName;}function formatAsDate(loggingEvent,specifier){var format=dateFormat.ISO8601_FORMAT;if(specifier){format=specifier;if(format=="ISO8601"){format=dateFormat.ISO8601_FORMAT;}else if(format=="ISO8601_WITH_TZ_OFFSET"){format=dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;}else if(format=="ABSOLUTE"){format=dateFormat.ABSOLUTETIME_FORMAT;}else if(format=="DATE"){format=dateFormat.DATETIME_FORMAT;}}return dateFormat.asString(format,loggingEvent.startTime,timezoneOffset);}function hostname(){return os.hostname().toString();}function formatMessage(loggingEvent){return formatLogData(loggingEvent.data);}function endOfLine(){return eol;}function logLevel(loggingEvent){return loggingEvent.level.toString();}function startTime(loggingEvent){return dateFormat.asString('hh:mm:ss',loggingEvent.startTime,timezoneOffset);}function startColour(loggingEvent){return colorizeStart(colours[loggingEvent.level.toString()]);}function endColour(loggingEvent){return colorizeEnd(colours[loggingEvent.level.toString()]);}function percent(){return'%';}function pid(loggingEvent){if(loggingEvent&&loggingEvent.pid){return loggingEvent.pid;}else{return process.pid;}}function clusterInfo(loggingEvent,specifier){if(loggingEvent.cluster&&specifier){return specifier.replace('%m',loggingEvent.cluster.master).replace('%w',loggingEvent.cluster.worker).replace('%i',loggingEvent.cluster.workerId);}else if(loggingEvent.cluster){return loggingEvent.cluster.worker+'@'+loggingEvent.cluster.master;}else{return pid();}}function userDefined(loggingEvent,specifier){if(typeof tokens[specifier]!=='undefined'){if(typeof tokens[specifier]==='function'){return tokens[specifier](loggingEvent);}else{return tokens[specifier];}}return null;}var replacers={'c':categoryName,'d':formatAsDate,'h':hostname,'m':formatMessage,'n':endOfLine,'p':logLevel,'r':startTime,'[':startColour,']':endColour,'y':clusterInfo,'z':pid,'%':percent,'x':userDefined};function replaceToken(conversionCharacter,loggingEvent,specifier){return replacers[conversionCharacter](loggingEvent,specifier);}function truncate(truncation,toTruncate){var len;if(truncation){len=parseInt(truncation.substr(1),10);return toTruncate.substring(0,len);}return toTruncate;}function pad(padding,toPad){var len;if(padding){if(padding.charAt(0)=="-"){len=parseInt(padding.substr(1),10);while(toPad.length<len){toPad+=" ";}}else{len=parseInt(padding,10);while(toPad.length<len){toPad=" "+toPad;}}}return toPad;}function truncateAndPad(toTruncAndPad,truncation,padding){var replacement=toTruncAndPad;replacement=truncate(truncation,replacement);replacement=pad(padding,replacement);return replacement;}return function(loggingEvent){var formattedString="";var result;var searchString=pattern;while(result=regex.exec(searchString)){var matchedString=result[0];var padding=result[1];var truncation=result[2];var conversionCharacter=result[3];var specifier=result[5];var text=result[6];if(text){formattedString+=""+text;}else{var replacement=replaceToken(conversionCharacter,loggingEvent,specifier);formattedString+=truncateAndPad(replacement,truncation,padding);}searchString=searchString.substr(result.index+result[0].length);}return formattedString;};}module.exports={basicLayout:basicLayout,messagePassThroughLayout:messagePassThroughLayout,patternLayout:patternLayout,colouredLayout:colouredLayout,coloredLayout:colouredLayout,dummyLayout:dummyLayout,addLayout:function addLayout(name,serializerGenerator){layoutMakers[name]=serializerGenerator;},layout:function layout(name,config){return layoutMakers[name]&&layoutMakers[name](config);}};}).call(this,require('_process'));},{"./date_format":42,"_process":52,"os":35,"semver":58,"util":61}],44:[function(require,module,exports){"use strict";function Level(level,levelStr){this.level=level;this.levelStr=levelStr;}function toLevel(sArg,defaultLevel){if(!sArg){return defaultLevel;}if(sArg instanceof Level){module.exports[sArg.toString()]=sArg;return sArg;}if(typeof sArg==="string"){return module.exports[sArg.toUpperCase()]||defaultLevel;}return toLevel(sArg.toString());}Level.prototype.toString=function(){return this.levelStr;};Level.prototype.isLessThanOrEqualTo=function(otherLevel){if(typeof otherLevel==="string"){otherLevel=toLevel(otherLevel);}return this.level<=otherLevel.level;};Level.prototype.isGreaterThanOrEqualTo=function(otherLevel){if(typeof otherLevel==="string"){otherLevel=toLevel(otherLevel);}return this.level>=otherLevel.level;};Level.prototype.isEqualTo=function(otherLevel){if(typeof otherLevel==="string"){otherLevel=toLevel(otherLevel);}return this.level===otherLevel.level;};module.exports={ALL:new Level(Number.MIN_VALUE,"ALL"),TRACE:new Level(5000,"TRACE"),DEBUG:new Level(10000,"DEBUG"),INFO:new Level(20000,"INFO"),WARN:new Level(30000,"WARN"),ERROR:new Level(40000,"ERROR"),FATAL:new Level(50000,"FATAL"),MARK:new Level(9007199254740992,"MARK"),OFF:new Level(Number.MAX_VALUE,"OFF"),toLevel:toLevel,Level:Level};},{}],45:[function(require,module,exports){(function(process){"use strict";var events=require('events'),fs=require('fs'),path=require('path'),util=require('util'),layouts=require('./layouts'),levels=require('./levels'),loggerModule=require('./logger'),LoggingEvent=loggerModule.LoggingEvent,Logger=loggerModule.Logger,ALL_CATEGORIES='[all]',appenders={},loggers={},appenderMakers={},appenderShutdowns={},defaultConfig={appenders:[{type:"console"}],replaceConsole:false};require('./appenders/console');function hasLogger(logger){return loggers.hasOwnProperty(logger);}levels.forName=function(levelStr,levelVal){var level;if(typeof levelStr==="string"&&typeof levelVal==="number"){var levelUpper=levelStr.toUpperCase();level=new levels.Level(levelVal,levelUpper);loggerModule.addLevelMethods(level);}return level;};levels.getLevel=function(levelStr){var level;if(typeof levelStr==="string"){var levelUpper=levelStr.toUpperCase();level=levels.toLevel(levelStr);}return level;};function getBufferedLogger(categoryName){var base_logger=getLogger(categoryName);var logger={};logger.temp=[];logger.target=base_logger;logger.flush=function(){for(var i=0;i<logger.temp.length;i++){var log=logger.temp[i];logger.target[log.level](log.message);delete logger.temp[i];}};logger.trace=function(message){logger.temp.push({level:'trace',message:message});};logger.debug=function(message){logger.temp.push({level:'debug',message:message});};logger.info=function(message){logger.temp.push({level:'info',message:message});};logger.warn=function(message){logger.temp.push({level:'warn',message:message});};logger.error=function(message){logger.temp.push({level:'error',message:message});};logger.fatal=function(message){logger.temp.push({level:'fatal',message:message});};return logger;}function normalizeCategory(category){return category+'.';}function doesLevelEntryContainsLogger(levelCategory,loggerCategory){var normalizedLevelCategory=normalizeCategory(levelCategory);var normalizedLoggerCategory=normalizeCategory(loggerCategory);return normalizedLoggerCategory.substring(0,normalizedLevelCategory.length)==normalizedLevelCategory;}function doesAppenderContainsLogger(appenderCategory,loggerCategory){var normalizedAppenderCategory=normalizeCategory(appenderCategory);var normalizedLoggerCategory=normalizeCategory(loggerCategory);return normalizedLoggerCategory.substring(0,normalizedAppenderCategory.length)==normalizedAppenderCategory;}function getLogger(loggerCategoryName){if(typeof loggerCategoryName!=="string"){loggerCategoryName=Logger.DEFAULT_CATEGORY;}if(!hasLogger(loggerCategoryName)){var level;if(levels.config){var keys=Object.keys(levels.config).sort();for(var idx=0;idx<keys.length;idx++){var levelCategory=keys[idx];if(doesLevelEntryContainsLogger(levelCategory,loggerCategoryName)){level=levels.config[levelCategory];}}}loggers[loggerCategoryName]=new Logger(loggerCategoryName,level);var appenderList;for(var appenderCategory in appenders){if(doesAppenderContainsLogger(appenderCategory,loggerCategoryName)){appenderList=appenders[appenderCategory];appenderList.forEach(function(appender){loggers[loggerCategoryName].addListener("log",appender);});}}if(appenders[ALL_CATEGORIES]){appenderList=appenders[ALL_CATEGORIES];appenderList.forEach(function(appender){loggers[loggerCategoryName].addListener("log",appender);});}}return loggers[loggerCategoryName];}function addAppender(){var args=Array.prototype.slice.call(arguments);var appender=args.shift();if(args.length===0||args[0]===undefined){args=[ALL_CATEGORIES];}if(Array.isArray(args[0])){args=args[0];}args.forEach(function(appenderCategory){addAppenderToCategory(appender,appenderCategory);if(appenderCategory===ALL_CATEGORIES){addAppenderToAllLoggers(appender);}else{for(var loggerCategory in loggers){if(doesAppenderContainsLogger(appenderCategory,loggerCategory)){loggers[loggerCategory].addListener("log",appender);}}}});}function addAppenderToAllLoggers(appender){for(var logger in loggers){if(hasLogger(logger)){loggers[logger].addListener("log",appender);}}}function addAppenderToCategory(appender,category){if(!appenders[category]){appenders[category]=[];}appenders[category].push(appender);}function clearAppenders(){appenders={};for(var logger in loggers){if(hasLogger(logger)){loggers[logger].removeAllListeners("log");}}}function configureAppenders(appenderList,options){clearAppenders();if(appenderList){appenderList.forEach(function(appenderConfig){loadAppender(appenderConfig.type);var appender;appenderConfig.makers=appenderMakers;try{appender=appenderMakers[appenderConfig.type](appenderConfig,options);addAppender(appender,appenderConfig.category);}catch(e){throw new Error("log4js configuration problem for "+util.inspect(appenderConfig),e);}});}}function configureLevels(_levels){levels.config=_levels;if(_levels){var keys=Object.keys(levels.config).sort();for(var idx in keys){var category=keys[idx];if(category===ALL_CATEGORIES){setGlobalLogLevel(_levels[category]);}for(var loggerCategory in loggers){if(doesLevelEntryContainsLogger(category,loggerCategory)){loggers[loggerCategory].setLevel(_levels[category]);}}}}}function setGlobalLogLevel(level){Logger.prototype.level=levels.toLevel(level,levels.TRACE);}function getDefaultLogger(){return getLogger(Logger.DEFAULT_CATEGORY);}var configState={};function loadConfigurationFile(filename){if(filename){return JSON.parse(fs.readFileSync(filename,"utf8"));}return undefined;}function configureOnceOff(config,options){if(config){try{configureLevels(config.levels);configureAppenders(config.appenders,options);if(config.replaceConsole){replaceConsole();}else{restoreConsole();}}catch(e){throw new Error("Problem reading log4js config "+util.inspect(config)+". Error was \""+e.message+"\" ("+e.stack+")");}}}function reloadConfiguration(options){var mtime=getMTime(configState.filename);if(!mtime)return;if(configState.lastMTime&&mtime.getTime()>configState.lastMTime.getTime()){configureOnceOff(loadConfigurationFile(configState.filename),options);}configState.lastMTime=mtime;}function getMTime(filename){var mtime;try{mtime=fs.statSync(configState.filename).mtime;}catch(e){getLogger('log4js').warn('Failed to load configuration file '+filename);}return mtime;}function initReloadConfiguration(filename,options){if(configState.timerId){clearInterval(configState.timerId);delete configState.timerId;}configState.filename=filename;configState.lastMTime=getMTime(filename);configState.timerId=setInterval(reloadConfiguration,options.reloadSecs*1000,options);}function configure(configurationFileOrObject,options){var config=configurationFileOrObject;config=config||process.env.LOG4JS_CONFIG;options=options||{};if(config===undefined||config===null||typeof config==='string'){if(options.reloadSecs){initReloadConfiguration(config,options);}config=loadConfigurationFile(config)||defaultConfig;}else{if(options.reloadSecs){getLogger('log4js').warn('Ignoring configuration reload parameter for "object" configuration.');}}configureOnceOff(config,options);}var originalConsoleFunctions={log:console.log,debug:console.debug,info:console.info,warn:console.warn,error:console.error};function replaceConsole(logger){function replaceWith(fn){return function(){fn.apply(logger,arguments);};}logger=logger||getLogger("console");['log','debug','info','warn','error'].forEach(function(item){console[item]=replaceWith(item==='log'?logger.info:logger[item]);});}function restoreConsole(){['log','debug','info','warn','error'].forEach(function(item){console[item]=originalConsoleFunctions[item];});}function requireAppender(appender){var appenderModule;try{appenderModule=require('./appenders/'+appender);}catch(e){appenderModule=require(appender);}return appenderModule;}function loadAppender(appender,appenderModule){appenderModule=appenderModule||requireAppender(appender);if(!appenderModule){throw new Error("Invalid log4js appender: "+util.inspect(appender));}module.exports.appenders[appender]=appenderModule.appender.bind(appenderModule);if(appenderModule.shutdown){appenderShutdowns[appender]=appenderModule.shutdown.bind(appenderModule);}appenderMakers[appender]=appenderModule.configure.bind(appenderModule);}function shutdown(cb){loggerModule.disableAllLogWrites();var completed=0;var error;var shutdownFcts=[];var complete=function complete(err){error=error||err;completed++;if(completed>=shutdownFcts.length){cb(error);}};for(var category in appenderShutdowns){if(appenderShutdowns.hasOwnProperty(category)){shutdownFcts.push(appenderShutdowns[category]);}}if(!shutdownFcts.length){return cb();}shutdownFcts.forEach(function(shutdownFct){shutdownFct(complete);});}module.exports={getBufferedLogger:getBufferedLogger,getLogger:getLogger,getDefaultLogger:getDefaultLogger,hasLogger:hasLogger,addAppender:addAppender,loadAppender:loadAppender,clearAppenders:clearAppenders,configure:configure,shutdown:shutdown,replaceConsole:replaceConsole,restoreConsole:restoreConsole,levels:levels,setGlobalLogLevel:setGlobalLogLevel,layouts:layouts,appenders:{},appenderMakers:appenderMakers,connectLogger:require('./connect-logger').connectLogger};configure();}).call(this,require('_process'));},{"./appenders/console":40,"./connect-logger":41,"./layouts":43,"./levels":44,"./logger":46,"_process":52,"events":37,"fs":36,"path":51,"util":61}],46:[function(require,module,exports){"use strict";var levels=require('./levels'),util=require('util'),events=require('events'),DEFAULT_CATEGORY='[default]';var logWritesEnabled=true;function LoggingEvent(categoryName,level,data,logger){this.startTime=new Date();this.categoryName=categoryName;this.data=data;this.level=level;this.logger=logger;}function Logger(name,level){this.category=name||DEFAULT_CATEGORY;if(level){this.setLevel(level);}}util.inherits(Logger,events.EventEmitter);Logger.DEFAULT_CATEGORY=DEFAULT_CATEGORY;Logger.prototype.level=levels.TRACE;Logger.prototype.setLevel=function(level){this.level=levels.toLevel(level,this.level||levels.TRACE);};Logger.prototype.removeLevel=function(){delete this.level;};Logger.prototype.log=function(){var logLevel=levels.toLevel(arguments[0],levels.INFO);if(!this.isLevelEnabled(logLevel)){return;}var numArgs=arguments.length-1;var args=new Array(numArgs);for(var i=0;i<numArgs;i++){args[i]=arguments[i+1];}this._log(logLevel,args);};Logger.prototype.isLevelEnabled=function(otherLevel){return this.level.isLessThanOrEqualTo(otherLevel);};['Trace','Debug','Info','Warn','Error','Fatal','Mark'].forEach(function(levelString){addLevelMethods(levelString);});function addLevelMethods(level){level=levels.toLevel(level);var levelStrLower=level.toString().toLowerCase();var levelMethod=levelStrLower.replace(/_([a-z])/g,function(g){return g[1].toUpperCase();});var isLevelMethod=levelMethod[0].toUpperCase()+levelMethod.slice(1);Logger.prototype['is'+isLevelMethod+'Enabled']=function(){return this.isLevelEnabled(level.toString());};Logger.prototype[levelMethod]=function(){if(logWritesEnabled&&this.isLevelEnabled(level)){var numArgs=arguments.length;var args=new Array(numArgs);for(var i=0;i<numArgs;i++){args[i]=arguments[i];}this._log(level,args);}};}Logger.prototype._log=function(level,data){var loggingEvent=new LoggingEvent(this.category,level,data,this);this.emit('log',loggingEvent);};function disableAllLogWrites(){logWritesEnabled=false;}function enableAllLogWrites(){logWritesEnabled=true;}exports.LoggingEvent=LoggingEvent;exports.Logger=Logger;exports.disableAllLogWrites=disableAllLogWrites;exports.enableAllLogWrites=enableAllLogWrites;exports.addLevelMethods=addLevelMethods;},{"./levels":44,"events":37,"util":61}],47:[function(require,module,exports){exports.AST=require('./lib/ast');exports.parse=require('./lib/parse').parse;exports.stringify=require('./lib/stringify');},{"./lib/ast":48,"./lib/parse":49,"./lib/stringify":50}],48:[function(require,module,exports){var _parse=require('./parse').parse;var _stringify=require('./stringify');function AST(ast){this.ast=ast;}AST.prototype={parse:function parse(sql){this.ast=_parse(sql);},stringify:function stringify(){return _stringify(this.ast);},getTables:function getTables(){},getSelectedColumns:function getSelectedColumns(){}};module.exports=AST;},{"./parse":49,"./stringify":50}],49:[function(require,module,exports){(function(process){module.exports=function(){function peg$subclass(child,parent){function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();}function SyntaxError(message,expected,found,offset,line,column){this.message=message;this.expected=expected;this.found=found;this.offset=offset;this.line=line;this.column=column;this.name="SyntaxError";}peg$subclass(SyntaxError,Error);function parse(input){var options=arguments.length>1?arguments[1]:{},peg$FAILED={},peg$startRuleFunctions={start:peg$parsestart},peg$startRuleFunction=peg$parsestart,peg$c0=peg$FAILED,peg$c1=function peg$c1(ast){ast.params=params;return ast;},peg$c2=function peg$c2(ast){return ast;},peg$c3=[],peg$c4=function peg$c4(head,tail){var cur=head;for(var i=0;i<tail.length;i++){cur._next=tail[i][3];cur=cur._next;}return head;},peg$c5="(",peg$c6={type:"literal",value:"(",description:"\"(\""},peg$c7=")",peg$c8={type:"literal",value:")",description:"\")\""},peg$c9=function peg$c9(s){return s[2];},peg$c10=null,peg$c11=function peg$c11(d,c,f,w,g,o,l){return{type:'select',distinct:d,columns:c,from:f,where:w,groupby:g,orderby:o,limit:l};},peg$c12={type:"other",description:"column_clause"},peg$c13=void 0,peg$c14=function peg$c14(){return'*';},peg$c15=function peg$c15(head,tail){return createList(head,tail);},peg$c16=function peg$c16(e,alias){return{expr:e,as:alias};},peg$c17=function peg$c17(i){return i;},peg$c18=function peg$c18(l){return l;},peg$c19=function peg$c19(head,tail){tail.unshift(head);return tail;},peg$c20=function peg$c20(t){return t;},peg$c21=function peg$c21(op,t,expr){t.join=op;t.on=expr;return t;},peg$c22=function peg$c22(t,alias){if(t.type=='var'){t.as=alias;return t;}else{return{db:t.db,table:t.table,as:alias};}},peg$c23=function peg$c23(){return'LEFT JOIN';},peg$c24=function peg$c24(){return'INNER JOIN';},peg$c25=function peg$c25(dt,tail){var obj={db:'',table:dt};if(tail){obj.db=dt;obj.table=tail[3];}return obj;},peg$c26=function peg$c26(v){v.db='';v.table=v.name;return v;},peg$c27=function peg$c27(e){return e;},peg$c28=function peg$c28(e,d){var obj={expr:e,type:'ASC'};if(d=='DESC'){obj.type='DESC';}return obj;},peg$c29=function peg$c29(i1,tail){var res=[i1];if(!tail){res.unshift({type:'number',value:0});}else{res.push(tail[2]);}return res;},peg$c30=function peg$c30(t,l,w){return{type:'update',db:t.db,table:t.table,set:l,where:w};},peg$c31="=",peg$c32={type:"literal",value:"=",description:"\"=\""},peg$c33=function peg$c33(c,v){return{column:c,value:v};},peg$c34=function peg$c34(ri,t,c,v){return{type:ri,db:t.db,table:t.table,columns:c,values:v};},peg$c35=function peg$c35(){return'insert';},peg$c36=function peg$c36(){return'replace';},peg$c37=function peg$c37(l){return l;},peg$c38=function peg$c38(head,tail){var el={type:'expr_list'};var l=createExprList(head,tail,el);el.value=l;return el;},peg$c39=function peg$c39(){return{type:'expr_list',value:[]};},peg$c40=function peg$c40(head,tail){return createBinaryExprChain(head,tail);},peg$c41="!",peg$c42={type:"literal",value:"!",description:"\"!\""},peg$c43=function peg$c43(expr){return createUnaryExpr('NOT',expr);},peg$c44=function peg$c44(left,rh){if(!rh){return left;}else{var res=null;if(rh.type=='arithmetic'){res=createBinaryExprChain(left,rh.tail);}else{res=createBinaryExpr(rh.op,left,rh.right);}return res;}},peg$c45=function peg$c45(l){return{type:'arithmetic',tail:l};},peg$c46=">=",peg$c47={type:"literal",value:">=",description:"\">=\""},peg$c48=">",peg$c49={type:"literal",value:">",description:"\">\""},peg$c50="<=",peg$c51={type:"literal",value:"<=",description:"\"<=\""},peg$c52="<>",peg$c53={type:"literal",value:"<>",description:"\"<>\""},peg$c54="<",peg$c55={type:"literal",value:"<",description:"\"<\""},peg$c56="!=",peg$c57={type:"literal",value:"!=",description:"\"!=\""},peg$c58=function peg$c58(op,right){return{op:op,right:right};},peg$c59=function peg$c59(op,begin,end){return{op:op,right:{type:'expr_list',value:[begin,end]}};},peg$c60=function peg$c60(nk){return nk[0]+' '+nk[2];},peg$c61=function peg$c61(op,l){return{op:op,right:l};},peg$c62=function peg$c62(op,e){return{op:op,right:e};},peg$c63="+",peg$c64={type:"literal",value:"+",description:"\"+\""},peg$c65="-",peg$c66={type:"literal",value:"-",description:"\"-\""},peg$c67=function peg$c67(head,tail){return createBinaryExprChain(head,tail);},peg$c68="*",peg$c69={type:"literal",value:"*",description:"\"*\""},peg$c70="/",peg$c71={type:"literal",value:"/",description:"\"/\""},peg$c72="%",peg$c73={type:"literal",value:"%",description:"\"%\""},peg$c74=function peg$c74(e){e.paren=true;return e;},peg$c75=function peg$c75(tbl,col){return{type:'column_ref',table:tbl,column:col};},peg$c76=function peg$c76(col){return{type:'column_ref',table:'',column:col};},peg$c77=function peg$c77(name){return reservedMap[name.toUpperCase()]===true;},peg$c78=function peg$c78(name){return name;},peg$c79="`",peg$c80={type:"literal",value:"`",description:"\"`\""},peg$c81=/^[^`]/,peg$c82={type:"class",value:"[^`]",description:"[^`]"},peg$c83=function peg$c83(chars){return chars.join('');},peg$c84=function peg$c84(start,parts){return start+parts.join('');},peg$c85=/^[A-Za-z_]/,peg$c86={type:"class",value:"[A-Za-z_]",description:"[A-Za-z_]"},peg$c87=/^[A-Za-z0-9_]/,peg$c88={type:"class",value:"[A-Za-z0-9_]",description:"[A-Za-z0-9_]"},peg$c89=/^[A-Za-z0-9_:]/,peg$c90={type:"class",value:"[A-Za-z0-9_:]",description:"[A-Za-z0-9_:]"},peg$c91={type:"other",description:"PARAM[:param, ?]"},peg$c92=":",peg$c93={type:"literal",value:":",description:"\":\""},peg$c94="?",peg$c95={type:"literal",value:"?",description:"\"?\""},peg$c96=function peg$c96(l){var p={type:'param',value:l.length>1?l[1]:l[0]};params.push(p);return p;},peg$c97=function peg$c97(name,e){return{type:'aggr_func',name:name,args:{expr:e}};},peg$c98=/^[0-9a-zA-Z_]/,peg$c99={type:"class",value:"[0-9a-zA-Z_]",description:"[0-9a-zA-Z_]"},peg$c100=function peg$c100(w){return w.join('');},peg$c101=function peg$c101(name,arg){return{type:'aggr_func',name:name,args:arg};},peg$c102=function peg$c102(e){return{expr:e};},peg$c103=function peg$c103(d,c){return{distinct:d,expr:c};},peg$c104=function peg$c104(){return{type:'star',value:'*'};},peg$c105=function peg$c105(name,l){return{type:'function',name:name,args:l};},peg$c106=function peg$c106(){return{type:'null',value:null};},peg$c107=function peg$c107(){return{type:'bool',value:true};},peg$c108=function peg$c108(){return{type:'bool',value:false};},peg$c109="\"",peg$c110={type:"literal",value:"\"",description:"\"\\\"\""},peg$c111="'",peg$c112={type:"literal",value:"'",description:"\"'\""},peg$c113=function peg$c113(ca){return{type:'string',value:ca[1].join('')};},peg$c114=/^[^'\\\0-\x1F]/,peg$c115={type:"class",value:"[^'\\\\\\0-\\x1F]",description:"[^'\\\\\\0-\\x1F]"},peg$c116=/^[^"\\\0-\x1F]/,peg$c117={type:"class",value:"[^\"\\\\\\0-\\x1F]",description:"[^\"\\\\\\0-\\x1F]"},peg$c118="\\'",peg$c119={type:"literal",value:"\\'",description:"\"\\\\'\""},peg$c120=function peg$c120(){return"'";},peg$c121="\\\"",peg$c122={type:"literal",value:"\\\"",description:"\"\\\\\\\"\""},peg$c123=function peg$c123(){return'"';},peg$c124="\\\\",peg$c125={type:"literal",value:"\\\\",description:"\"\\\\\\\\\""},peg$c126=function peg$c126(){return"\\";},peg$c127="\\/",peg$c128={type:"literal",value:"\\/",description:"\"\\\\/\""},peg$c129=function peg$c129(){return"/";},peg$c130="\\b",peg$c131={type:"literal",value:"\\b",description:"\"\\\\b\""},peg$c132=function peg$c132(){return"\b";},peg$c133="\\f",peg$c134={type:"literal",value:"\\f",description:"\"\\\\f\""},peg$c135=function peg$c135(){return"\f";},peg$c136="\\n",peg$c137={type:"literal",value:"\\n",description:"\"\\\\n\""},peg$c138=function peg$c138(){return"\n";},peg$c139="\\r",peg$c140={type:"literal",value:"\\r",description:"\"\\\\r\""},peg$c141=function peg$c141(){return"\r";},peg$c142="\\t",peg$c143={type:"literal",value:"\\t",description:"\"\\\\t\""},peg$c144=function peg$c144(){return"\t";},peg$c145="\\u",peg$c146={type:"literal",value:"\\u",description:"\"\\\\u\""},peg$c147=function peg$c147(h1,h2,h3,h4){return String.fromCharCode(parseInt("0x"+h1+h2+h3+h4));},peg$c148=/^[\n\r]/,peg$c149={type:"class",value:"[\\n\\r]",description:"[\\n\\r]"},peg$c150=function peg$c150(n){return{type:'number',value:n};},peg$c151={type:"other",description:"LITERAL INT"},peg$c152=function peg$c152(n){return{type:'number',value:n};},peg$c153=function peg$c153(int_,frac,exp){return parseFloat(int_+frac+exp);},peg$c154=function peg$c154(int_,frac){return parseFloat(int_+frac);},peg$c155=function peg$c155(int_,exp){return parseFloat(int_+exp);},peg$c156=function peg$c156(int_){return parseFloat(int_);},peg$c157=function peg$c157(digit19,digits){return digit19+digits;},peg$c158=function peg$c158(op,digit19,digits){return"-"+digit19+digits;},peg$c159=function peg$c159(op,digit){return"-"+digit;},peg$c160=".",peg$c161={type:"literal",value:".",description:"\".\""},peg$c162=function peg$c162(digits){return"."+digits;},peg$c163=function peg$c163(e,digits){return e+digits;},peg$c164=function peg$c164(digits){return digits.join("");},peg$c165={type:"other",description:"NUMBER"},peg$c166=/^[0-9]/,peg$c167={type:"class",value:"[0-9]",description:"[0-9]"},peg$c168=/^[1-9]/,peg$c169={type:"class",value:"[1-9]",description:"[1-9]"},peg$c170={type:"other",description:"HEX"},peg$c171=/^[0-9a-fA-F]/,peg$c172={type:"class",value:"[0-9a-fA-F]",description:"[0-9a-fA-F]"},peg$c173=/^[eE]/,peg$c174={type:"class",value:"[eE]",description:"[eE]"},peg$c175=/^[+\-]/,peg$c176={type:"class",value:"[+\\-]",description:"[+\\-]"},peg$c177=function peg$c177(e,sign){return e+sign;},peg$c178="null",peg$c179={type:"literal",value:"NULL",description:"\"NULL\""},peg$c180="true",peg$c181={type:"literal",value:"TRUE",description:"\"TRUE\""},peg$c182="false",peg$c183={type:"literal",value:"FALSE",description:"\"FALSE\""},peg$c184="show",peg$c185={type:"literal",value:"SHOW",description:"\"SHOW\""},peg$c186="drop",peg$c187={type:"literal",value:"DROP",description:"\"DROP\""},peg$c188="select",peg$c189={type:"literal",value:"SELECT",description:"\"SELECT\""},peg$c190="update",peg$c191={type:"literal",value:"UPDATE",description:"\"UPDATE\""},peg$c192="create",peg$c193={type:"literal",value:"CREATE",description:"\"CREATE\""},peg$c194="delete",peg$c195={type:"literal",value:"DELETE",description:"\"DELETE\""},peg$c196="insert",peg$c197={type:"literal",value:"INSERT",description:"\"INSERT\""},peg$c198="replace",peg$c199={type:"literal",value:"REPLACE",description:"\"REPLACE\""},peg$c200="explain",peg$c201={type:"literal",value:"EXPLAIN",description:"\"EXPLAIN\""},peg$c202="into",peg$c203={type:"literal",value:"INTO",description:"\"INTO\""},peg$c204="from",peg$c205={type:"literal",value:"FROM",description:"\"FROM\""},peg$c206="set",peg$c207={type:"literal",value:"SET",description:"\"SET\""},peg$c208="as",peg$c209={type:"literal",value:"AS",description:"\"AS\""},peg$c210="table",peg$c211={type:"literal",value:"TABLE",description:"\"TABLE\""},peg$c212="on",peg$c213={type:"literal",value:"ON",description:"\"ON\""},peg$c214="left",peg$c215={type:"literal",value:"LEFT",description:"\"LEFT\""},peg$c216="inner",peg$c217={type:"literal",value:"INNER",description:"\"INNER\""},peg$c218="join",peg$c219={type:"literal",value:"JOIN",description:"\"JOIN\""},peg$c220="union",peg$c221={type:"literal",value:"UNION",description:"\"UNION\""},peg$c222="values",peg$c223={type:"literal",value:"VALUES",description:"\"VALUES\""},peg$c224="exists",peg$c225={type:"literal",value:"EXISTS",description:"\"EXISTS\""},peg$c226="where",peg$c227={type:"literal",value:"WHERE",description:"\"WHERE\""},peg$c228="group",peg$c229={type:"literal",value:"GROUP",description:"\"GROUP\""},peg$c230="by",peg$c231={type:"literal",value:"BY",description:"\"BY\""},peg$c232="order",peg$c233={type:"literal",value:"ORDER",description:"\"ORDER\""},peg$c234="having",peg$c235={type:"literal",value:"HAVING",description:"\"HAVING\""},peg$c236="limit",peg$c237={type:"literal",value:"LIMIT",description:"\"LIMIT\""},peg$c238="asc",peg$c239={type:"literal",value:"ASC",description:"\"ASC\""},peg$c240=function peg$c240(){return'ASC';},peg$c241="desc",peg$c242={type:"literal",value:"DESC",description:"\"DESC\""},peg$c243=function peg$c243(){return'DESC';},peg$c244="all",peg$c245={type:"literal",value:"ALL",description:"\"ALL\""},peg$c246=function peg$c246(){return'ALL';},peg$c247="distinct",peg$c248={type:"literal",value:"DISTINCT",description:"\"DISTINCT\""},peg$c249=function peg$c249(){return'DISTINCT';},peg$c250="between",peg$c251={type:"literal",value:"BETWEEN",description:"\"BETWEEN\""},peg$c252=function peg$c252(){return'BETWEEN';},peg$c253="in",peg$c254={type:"literal",value:"IN",description:"\"IN\""},peg$c255=function peg$c255(){return'IN';},peg$c256="is",peg$c257={type:"literal",value:"IS",description:"\"IS\""},peg$c258=function peg$c258(){return'IS';},peg$c259="like",peg$c260={type:"literal",value:"LIKE",description:"\"LIKE\""},peg$c261=function peg$c261(){return'LIKE';},peg$c262="contains",peg$c263={type:"literal",value:"CONTAINS",description:"\"CONTAINS\""},peg$c264=function peg$c264(){return'CONTAINS';},peg$c265="not",peg$c266={type:"literal",value:"NOT",description:"\"NOT\""},peg$c267=function peg$c267(){return'NOT';},peg$c268="and",peg$c269={type:"literal",value:"AND",description:"\"AND\""},peg$c270=function peg$c270(){return'AND';},peg$c271="or",peg$c272={type:"literal",value:"OR",description:"\"OR\""},peg$c273=function peg$c273(){return'OR';},peg$c274="count",peg$c275={type:"literal",value:"COUNT",description:"\"COUNT\""},peg$c276=function peg$c276(){return'COUNT';},peg$c277="max",peg$c278={type:"literal",value:"MAX",description:"\"MAX\""},peg$c279=function peg$c279(){return'MAX';},peg$c280="min",peg$c281={type:"literal",value:"MIN",description:"\"MIN\""},peg$c282=function peg$c282(){return'MIN';},peg$c283="sum",peg$c284={type:"literal",value:"SUM",description:"\"SUM\""},peg$c285=function peg$c285(){return'SUM';},peg$c286="avg",peg$c287={type:"literal",value:"AVG",description:"\"AVG\""},peg$c288=function peg$c288(){return'AVG';},peg$c289=",",peg$c290={type:"literal",value:",",description:"\",\""},peg$c291="[",peg$c292={type:"literal",value:"[",description:"\"[\""},peg$c293="]",peg$c294={type:"literal",value:"]",description:"\"]\""},peg$c295={type:"any",description:"any character"},peg$c296={type:"other",description:"WHITE_SPACE"},peg$c297=/^[ \t\n\r]/,peg$c298={type:"class",value:"[ \\t\\n\\r]",description:"[ \\t\\n\\r]"},peg$c299={type:"other",description:"EOF"},peg$c300=function peg$c300(s){return{stmt:s,vars:varList};},peg$c301=function peg$c301(){varList=[];return true;},peg$c302=function peg$c302(va,e){return{type:'assign',left:va,right:e};},peg$c303=function peg$c303(e){return{type:'return',expr:e};},peg$c304=function peg$c304(lt,op,rt,expr){return{type:'join',ltable:lt,rtable:rt,op:op,on:expr};},peg$c305=function peg$c305(name,l){return{type:'function',name:name,args:{type:'expr_list',value:l}};},peg$c306=function peg$c306(l){return{type:'array',value:l};},peg$c307=function peg$c307(name,m){varList.push(name);return{type:'var',name:name,members:m};},peg$c308=function peg$c308(l){var s=[];for(var i=0;i<l.length;i++){s.push(l[i][1]);}return s;},peg$c309="$",peg$c310={type:"literal",value:"$",description:"\"$\""},peg$c311="return",peg$c312={type:"literal",value:"return",description:"\"return\""},peg$c313=":=",peg$c314={type:"literal",value:":=",description:"\":=\""},peg$currPos=0,peg$reportedPos=0,peg$cachedPos=0,peg$cachedPosDetails={line:1,column:1,seenCR:false},peg$maxFailPos=0,peg$maxFailExpected=[],peg$silentFails=0,peg$result;if("startRule"in options){if(!(options.startRule in peg$startRuleFunctions)){throw new Error("Can't start parsing from rule \""+options.startRule+"\".");}peg$startRuleFunction=peg$startRuleFunctions[options.startRule];}function text(){return input.substring(peg$reportedPos,peg$currPos);}function offset(){return peg$reportedPos;}function line(){return peg$computePosDetails(peg$reportedPos).line;}function column(){return peg$computePosDetails(peg$reportedPos).column;}function expected(description){throw peg$buildException(null,[{type:"other",description:description}],peg$reportedPos);}function error(message){throw peg$buildException(message,null,peg$reportedPos);}function peg$computePosDetails(pos){function advance(details,startPos,endPos){var p,ch;for(p=startPos;p<endPos;p++){ch=input.charAt(p);if(ch==="\n"){if(!details.seenCR){details.line++;}details.column=1;details.seenCR=false;}else if(ch==="\r"||ch==="\u2028"||ch==="\u2029"){details.line++;details.column=1;details.seenCR=true;}else{details.column++;details.seenCR=false;}}}if(peg$cachedPos!==pos){if(peg$cachedPos>pos){peg$cachedPos=0;peg$cachedPosDetails={line:1,column:1,seenCR:false};}advance(peg$cachedPosDetails,peg$cachedPos,pos);peg$cachedPos=pos;}return peg$cachedPosDetails;}function peg$fail(expected){if(peg$currPos<peg$maxFailPos){return;}if(peg$currPos>peg$maxFailPos){peg$maxFailPos=peg$currPos;peg$maxFailExpected=[];}peg$maxFailExpected.push(expected);}function peg$buildException(message,expected,pos){function cleanupExpected(expected){var i=1;expected.sort(function(a,b){if(a.description<b.description){return-1;}else if(a.description>b.description){return 1;}else{return 0;}});while(i<expected.length){if(expected[i-1]===expected[i]){expected.splice(i,1);}else{i++;}}}function buildMessage(expected,found){function stringEscape(s){function hex(ch){return ch.charCodeAt(0).toString(16).toUpperCase();}return s.replace(/\\/g,'\\\\').replace(/"/g,'\\"').replace(/\x08/g,'\\b').replace(/\t/g,'\\t').replace(/\n/g,'\\n').replace(/\f/g,'\\f').replace(/\r/g,'\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(ch){return'\\x0'+hex(ch);}).replace(/[\x10-\x1F\x80-\xFF]/g,function(ch){return'\\x'+hex(ch);}).replace(/[\u0180-\u0FFF]/g,function(ch){return"\\u0"+hex(ch);}).replace(/[\u1080-\uFFFF]/g,function(ch){return"\\u"+hex(ch);});}var expectedDescs=new Array(expected.length),expectedDesc,foundDesc,i;for(i=0;i<expected.length;i++){expectedDescs[i]=expected[i].description;}expectedDesc=expected.length>1?expectedDescs.slice(0,-1).join(", ")+" or "+expectedDescs[expected.length-1]:expectedDescs[0];foundDesc=found?"\""+stringEscape(found)+"\"":"end of input";return"Expected "+expectedDesc+" but "+foundDesc+" found.";}var posDetails=peg$computePosDetails(pos),found=pos<input.length?input.charAt(pos):null;if(expected!==null){cleanupExpected(expected);}return new SyntaxError(message!==null?message:buildMessage(expected,found),expected,found,pos,posDetails.line,posDetails.column);}function peg$parsestart(){var s0,s1,s2;s0=peg$currPos;s1=peg$parse__();if(s1!==peg$FAILED){s2=peg$parseunion_stmt();if(s2===peg$FAILED){s2=peg$parseupdate_stmt();if(s2===peg$FAILED){s2=peg$parsereplace_insert_stmt();}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c1(s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseproc_stmts();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c2(s1);}s0=s1;}return s0;}function peg$parseunion_stmt(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseselect_stmt();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_UNION();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseselect_stmt();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_UNION();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseselect_stmt();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c4(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseselect_stmt(){var s0,s1,s2,s3,s4,s5,s6;s0=peg$parseselect_stmt_nake();if(s0===peg$FAILED){s0=peg$currPos;s1=peg$currPos;if(input.charCodeAt(peg$currPos)===40){s2=peg$c5;peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c6);}}if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parseselect_stmt();if(s4!==peg$FAILED){s5=peg$parse__();if(s5!==peg$FAILED){if(input.charCodeAt(peg$currPos)===41){s6=peg$c7;peg$currPos++;}else{s6=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c8);}}if(s6!==peg$FAILED){s2=[s2,s3,s4,s5,s6];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c9(s1);}s0=s1;}return s0;}function peg$parseselect_stmt_nake(){var s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15;s0=peg$currPos;s1=peg$parseKW_SELECT();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_DISTINCT();if(s3===peg$FAILED){s3=peg$c10;}if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsecolumn_clause();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsefrom_clause();if(s7===peg$FAILED){s7=peg$c10;}if(s7!==peg$FAILED){s8=peg$parse__();if(s8!==peg$FAILED){s9=peg$parsewhere_clause();if(s9===peg$FAILED){s9=peg$c10;}if(s9!==peg$FAILED){s10=peg$parse__();if(s10!==peg$FAILED){s11=peg$parsegroup_by_clause();if(s11===peg$FAILED){s11=peg$c10;}if(s11!==peg$FAILED){s12=peg$parse__();if(s12!==peg$FAILED){s13=peg$parseorder_by_clause();if(s13===peg$FAILED){s13=peg$c10;}if(s13!==peg$FAILED){s14=peg$parse__();if(s14!==peg$FAILED){s15=peg$parselimit_clause();if(s15===peg$FAILED){s15=peg$c10;}if(s15!==peg$FAILED){peg$reportedPos=s0;s1=peg$c11(s3,s5,s7,s9,s11,s13,s15);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsecolumn_clause(){var s0,s1,s2,s3,s4,s5,s6,s7;peg$silentFails++;s0=peg$currPos;s1=peg$parseKW_ALL();if(s1===peg$FAILED){s1=peg$currPos;s2=peg$parseSTAR();if(s2!==peg$FAILED){s3=peg$currPos;peg$silentFails++;s4=peg$parseident_start();peg$silentFails--;if(s4===peg$FAILED){s3=peg$c13;}else{peg$currPos=s3;s3=peg$c0;}if(s3!==peg$FAILED){s2=[s2,s3];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c14();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parsecolumn_list_item();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn_list_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn_list_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c12);}}return s0;}function peg$parsecolumn_list_item(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseadditive_expr();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsealias_clause();if(s3===peg$FAILED){s3=peg$c10;}if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c16(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsealias_clause(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_AS();if(s1===peg$FAILED){s1=peg$c10;}if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseident();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c17(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsefrom_clause(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_FROM();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsetable_ref_list();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c18(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsetable_ref_list(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parsetable_base();if(s1!==peg$FAILED){s2=[];s3=peg$parsetable_ref();while(s3!==peg$FAILED){s2.push(s3);s3=peg$parsetable_ref();}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c19(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsetable_ref(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$parse__();if(s1!==peg$FAILED){s2=peg$parseCOMMA();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parsetable_base();if(s4!==peg$FAILED){peg$reportedPos=s0;s1=peg$c20(s4);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parse__();if(s1!==peg$FAILED){s2=peg$parsetable_join();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c20(s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parsetable_join(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parsejoin_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsetable_base();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseon_clause();if(s5===peg$FAILED){s5=peg$c10;}if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c21(s1,s3,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsetable_base(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parsetable_name();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_AS();if(s3===peg$FAILED){s3=peg$c10;}if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseident();if(s5===peg$FAILED){s5=peg$c10;}if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c22(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsejoin_op(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_LEFT();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_JOIN();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c23();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$currPos;s2=peg$parseKW_INNER();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s2=[s2,s3];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1===peg$FAILED){s1=peg$c10;}if(s1!==peg$FAILED){s2=peg$parseKW_JOIN();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c24();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parsetable_name(){var s0,s1,s2,s3,s4,s5,s6;s0=peg$currPos;s1=peg$parseident();if(s1!==peg$FAILED){s2=peg$currPos;s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parseDOT();if(s4!==peg$FAILED){s5=peg$parse__();if(s5!==peg$FAILED){s6=peg$parseident_name();if(s6!==peg$FAILED){s3=[s3,s4,s5,s6];s2=s3;}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}if(s2===peg$FAILED){s2=peg$c10;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c25(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parsevar_decl();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c26(s1);}s0=s1;}return s0;}function peg$parseon_clause(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_ON();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseor_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c27(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsewhere_clause(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_WHERE();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseor_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c27(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsegroup_by_clause(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parseKW_GROUP();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_BY();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsecolumn_ref_list();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c18(s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsecolumn_ref_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsecolumn_ref();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn_ref();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn_ref();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsehaving_clause(){var s0,s1,s2;s0=peg$currPos;s1=peg$parseKW_HAVING();if(s1!==peg$FAILED){s2=peg$parseor_expr();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c27(s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseorder_by_clause(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parseKW_ORDER();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_BY();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseorder_by_list();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c18(s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseorder_by_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseorder_by_element();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseorder_by_element();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseorder_by_element();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseorder_by_element(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseor_expr();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_DESC();if(s3===peg$FAILED){s3=peg$parseKW_ASC();}if(s3===peg$FAILED){s3=peg$c10;}if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c28(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsenumber_or_param(){var s0;s0=peg$parseliteral_numeric();if(s0===peg$FAILED){s0=peg$parseparam();}return s0;}function peg$parseint_or_param(){var s0;s0=peg$parseliteral_int();if(s0===peg$FAILED){s0=peg$parseparam();}return s0;}function peg$parselimit_clause(){var s0,s1,s2,s3,s4,s5,s6,s7,s8;s0=peg$currPos;s1=peg$parseKW_LIMIT();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseint_or_param();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$currPos;s6=peg$parseCOMMA();if(s6!==peg$FAILED){s7=peg$parse__();if(s7!==peg$FAILED){s8=peg$parseint_or_param();if(s8!==peg$FAILED){s6=[s6,s7,s8];s5=s6;}else{peg$currPos=s5;s5=peg$c0;}}else{peg$currPos=s5;s5=peg$c0;}}else{peg$currPos=s5;s5=peg$c0;}if(s5===peg$FAILED){s5=peg$c10;}if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c29(s3,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseupdate_stmt(){var s0,s1,s2,s3,s4,s5,s6,s7,s8,s9;s0=peg$currPos;s1=peg$parseKW_UPDATE();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsetable_name();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_SET();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseset_list();if(s7!==peg$FAILED){s8=peg$parse__();if(s8!==peg$FAILED){s9=peg$parsewhere_clause();if(s9!==peg$FAILED){peg$reportedPos=s0;s1=peg$c30(s3,s7,s9);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseset_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseset_item();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseset_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseset_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseset_item(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parsecolumn_name();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){if(input.charCodeAt(peg$currPos)===61){s3=peg$c31;peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c32);}}if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_expr();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c33(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsereplace_insert_stmt(){var s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13;s0=peg$currPos;s1=peg$parsereplace_insert();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_INTO();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsetable_name();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseLPAREN();if(s7!==peg$FAILED){s8=peg$parse__();if(s8!==peg$FAILED){s9=peg$parsecolumn_list();if(s9!==peg$FAILED){s10=peg$parse__();if(s10!==peg$FAILED){s11=peg$parseRPAREN();if(s11!==peg$FAILED){s12=peg$parse__();if(s12!==peg$FAILED){s13=peg$parsevalue_clause();if(s13!==peg$FAILED){peg$reportedPos=s0;s1=peg$c34(s1,s5,s9,s13);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsereplace_insert(){var s0,s1;s0=peg$currPos;s1=peg$parseKW_INSERT();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c35();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseKW_REPLACE();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c36();}s0=s1;}return s0;}function peg$parsevalue_clause(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_VALUES();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsevalue_list();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c18(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsevalue_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsevalue_item();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsevalue_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsevalue_item();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsevalue_item(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parseLPAREN();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseexpr_list();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseRPAREN();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c37(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseexpr_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseor_expr();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseor_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseor_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c38(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseexpr_list_or_empty(){var s0,s1;s0=peg$parseexpr_list();if(s0===peg$FAILED){s0=peg$currPos;s1=[];if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c39();}s0=s1;}return s0;}function peg$parseor_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseand_expr();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_OR();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseand_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_OR();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseand_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c40(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseand_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsenot_expr();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_AND();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsenot_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_AND();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsenot_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c40(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsenot_expr(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$parseKW_NOT();if(s1===peg$FAILED){s1=peg$currPos;if(input.charCodeAt(peg$currPos)===33){s2=peg$c41;peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c42);}}if(s2!==peg$FAILED){s3=peg$currPos;peg$silentFails++;if(input.charCodeAt(peg$currPos)===61){s4=peg$c31;peg$currPos++;}else{s4=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c32);}}peg$silentFails--;if(s4===peg$FAILED){s3=peg$c13;}else{peg$currPos=s3;s3=peg$c0;}if(s3!==peg$FAILED){s2=[s2,s3];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsenot_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c43(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$parsecomparison_expr();}return s0;}function peg$parsecomparison_expr(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseadditive_expr();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsecomparison_op_right();if(s3===peg$FAILED){s3=peg$c10;}if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c44(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsecomparison_op_right(){var s0;s0=peg$parsearithmetic_op_right();if(s0===peg$FAILED){s0=peg$parsein_op_right();if(s0===peg$FAILED){s0=peg$parsebetween_op_right();if(s0===peg$FAILED){s0=peg$parseis_op_right();if(s0===peg$FAILED){s0=peg$parselike_op_right();if(s0===peg$FAILED){s0=peg$parsecontains_op_right();}}}}}return s0;}function peg$parsearithmetic_op_right(){var s0,s1,s2,s3,s4,s5,s6;s0=peg$currPos;s1=[];s2=peg$currPos;s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parsearithmetic_comparison_operator();if(s4!==peg$FAILED){s5=peg$parse__();if(s5!==peg$FAILED){s6=peg$parseadditive_expr();if(s6!==peg$FAILED){s3=[s3,s4,s5,s6];s2=s3;}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){while(s2!==peg$FAILED){s1.push(s2);s2=peg$currPos;s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parsearithmetic_comparison_operator();if(s4!==peg$FAILED){s5=peg$parse__();if(s5!==peg$FAILED){s6=peg$parseadditive_expr();if(s6!==peg$FAILED){s3=[s3,s4,s5,s6];s2=s3;}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}}else{s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c45(s1);}s0=s1;return s0;}function peg$parsearithmetic_comparison_operator(){var s0;if(input.substr(peg$currPos,2)===peg$c46){s0=peg$c46;peg$currPos+=2;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c47);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===62){s0=peg$c48;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c49);}}if(s0===peg$FAILED){if(input.substr(peg$currPos,2)===peg$c50){s0=peg$c50;peg$currPos+=2;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c51);}}if(s0===peg$FAILED){if(input.substr(peg$currPos,2)===peg$c52){s0=peg$c52;peg$currPos+=2;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c53);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===60){s0=peg$c54;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c55);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===61){s0=peg$c31;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c32);}}if(s0===peg$FAILED){if(input.substr(peg$currPos,2)===peg$c56){s0=peg$c56;peg$currPos+=2;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c57);}}}}}}}}return s0;}function peg$parseis_op_right(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_IS();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseadditive_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c58(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsebetween_op_right(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseKW_BETWEEN();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseadditive_expr();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseKW_AND();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseadditive_expr();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c59(s1,s3,s7);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parselike_op(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$currPos;s2=peg$parseKW_NOT();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parseKW_LIKE();if(s4!==peg$FAILED){s2=[s2,s3,s4];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c60(s1);}s0=s1;if(s0===peg$FAILED){s0=peg$parseKW_LIKE();}return s0;}function peg$parsein_op(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$currPos;s2=peg$parseKW_NOT();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parseKW_IN();if(s4!==peg$FAILED){s2=[s2,s3,s4];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c60(s1);}s0=s1;if(s0===peg$FAILED){s0=peg$parseKW_IN();}return s0;}function peg$parsecontains_op(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$currPos;s2=peg$parseKW_NOT();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){s4=peg$parseKW_CONTAINS();if(s4!==peg$FAILED){s2=[s2,s3,s4];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c60(s1);}s0=s1;if(s0===peg$FAILED){s0=peg$parseKW_CONTAINS();}return s0;}function peg$parselike_op_right(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parselike_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsecomparison_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c58(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsein_op_right(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsein_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseexpr_list();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c61(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parsein_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsevar_decl();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c62(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parsecontains_op_right(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsecontains_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseexpr_list();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c61(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parsecontains_op();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsevar_decl();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c62(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parseadditive_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsemultiplicative_expr();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsemultiplicative_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsemultiplicative_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c40(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseadditive_operator(){var s0;if(input.charCodeAt(peg$currPos)===43){s0=peg$c63;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c64);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===45){s0=peg$c65;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c66);}}}return s0;}function peg$parsemultiplicative_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseprimary();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsemultiplicative_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseprimary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsemultiplicative_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseprimary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c67(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsemultiplicative_operator(){var s0;if(input.charCodeAt(peg$currPos)===42){s0=peg$c68;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c69);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===47){s0=peg$c70;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c71);}}if(s0===peg$FAILED){if(input.charCodeAt(peg$currPos)===37){s0=peg$c72;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c73);}}}}return s0;}function peg$parseprimary(){var s0,s1,s2,s3,s4,s5;s0=peg$parseliteral();if(s0===peg$FAILED){s0=peg$parseaggr_func();if(s0===peg$FAILED){s0=peg$parsefunc_call();if(s0===peg$FAILED){s0=peg$parsecolumn_ref();if(s0===peg$FAILED){s0=peg$parseparam();if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseLPAREN();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseor_expr();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseRPAREN();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c74(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$parsevar_decl();}}}}}}return s0;}function peg$parsecolumn_ref(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parseident();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseDOT();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsecolumn();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c75(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parsecolumn();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c76(s1);}s0=s1;}return s0;}function peg$parsecolumn_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsecolumn();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parsecolumn();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseident(){var s0,s1,s2;s0=peg$currPos;s1=peg$parseident_name();if(s1!==peg$FAILED){peg$reportedPos=peg$currPos;s2=peg$c77(s1);if(s2){s2=peg$c0;}else{s2=peg$c13;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c78(s1);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsecolumn(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parsecolumn_name();if(s1!==peg$FAILED){peg$reportedPos=peg$currPos;s2=peg$c77(s1);if(s2){s2=peg$c0;}else{s2=peg$c13;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c78(s1);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;if(input.charCodeAt(peg$currPos)===96){s1=peg$c79;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c80);}}if(s1!==peg$FAILED){s2=[];if(peg$c81.test(input.charAt(peg$currPos))){s3=input.charAt(peg$currPos);peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c82);}}if(s3!==peg$FAILED){while(s3!==peg$FAILED){s2.push(s3);if(peg$c81.test(input.charAt(peg$currPos))){s3=input.charAt(peg$currPos);peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c82);}}}}else{s2=peg$c0;}if(s2!==peg$FAILED){if(input.charCodeAt(peg$currPos)===96){s3=peg$c79;peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c80);}}if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c83(s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parsecolumn_name(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseident_start();if(s1!==peg$FAILED){s2=[];s3=peg$parsecolumn_part();while(s3!==peg$FAILED){s2.push(s3);s3=peg$parsecolumn_part();}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c84(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseident_name(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseident_start();if(s1!==peg$FAILED){s2=[];s3=peg$parseident_part();while(s3!==peg$FAILED){s2.push(s3);s3=peg$parseident_part();}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c84(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseident_start(){var s0;if(peg$c85.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c86);}}return s0;}function peg$parseident_part(){var s0;if(peg$c87.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c88);}}return s0;}function peg$parsecolumn_part(){var s0;if(peg$c89.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c90);}}return s0;}function peg$parseparam(){var s0,s1,s2;peg$silentFails++;s0=peg$currPos;if(input.charCodeAt(peg$currPos)===58){s1=peg$c92;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c93);}}if(s1!==peg$FAILED){s2=peg$parseident_name();if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;if(input.charCodeAt(peg$currPos)===63){s1=peg$c94;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c95);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c96(s1);}s0=s1;}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c91);}}return s0;}function peg$parseaggr_func(){var s0;s0=peg$parseaggr_fun_count();if(s0===peg$FAILED){s0=peg$parseaggr_fun_smma();}return s0;}function peg$parseaggr_fun_smma(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseKW_SUM_MAX_MIN_AVG();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_expr();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c97(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_SUM_MAX_MIN_AVG(){var s0,s1,s2;s0=peg$currPos;s1=[];if(peg$c98.test(input.charAt(peg$currPos))){s2=input.charAt(peg$currPos);peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c99);}}if(s2!==peg$FAILED){while(s2!==peg$FAILED){s1.push(s2);if(peg$c98.test(input.charAt(peg$currPos))){s2=input.charAt(peg$currPos);peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c99);}}}}else{s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c100(s1);}s0=s1;return s0;}function peg$parseaggr_fun_count(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseKW_COUNT();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsecount_arg();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c101(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsecount_arg(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parsestar_expr();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c102(s1);}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseKW_DISTINCT();if(s1===peg$FAILED){s1=peg$c10;}if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsecolumn_ref();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c103(s1,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}return s0;}function peg$parsestar_expr(){var s0,s1;s0=peg$currPos;if(input.charCodeAt(peg$currPos)===42){s1=peg$c68;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c69);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c104();}s0=s1;return s0;}function peg$parsefunc_call(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseident();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseexpr_list_or_empty();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c105(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseliteral(){var s0;s0=peg$parseliteral_string();if(s0===peg$FAILED){s0=peg$parseliteral_numeric();if(s0===peg$FAILED){s0=peg$parseliteral_bool();if(s0===peg$FAILED){s0=peg$parseliteral_null();}}}return s0;}function peg$parseliteral_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseliteral();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseliteral();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseliteral();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseliteral_null(){var s0,s1;s0=peg$currPos;s1=peg$parseKW_NULL();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c106();}s0=s1;return s0;}function peg$parseliteral_bool(){var s0,s1;s0=peg$currPos;s1=peg$parseKW_TRUE();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c107();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseKW_FALSE();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c108();}s0=s1;}return s0;}function peg$parseliteral_string(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$currPos;if(input.charCodeAt(peg$currPos)===34){s2=peg$c109;peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c110);}}if(s2!==peg$FAILED){s3=[];s4=peg$parsedouble_char();while(s4!==peg$FAILED){s3.push(s4);s4=peg$parsedouble_char();}if(s3!==peg$FAILED){if(input.charCodeAt(peg$currPos)===34){s4=peg$c109;peg$currPos++;}else{s4=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c110);}}if(s4!==peg$FAILED){s2=[s2,s3,s4];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}if(s1===peg$FAILED){s1=peg$currPos;if(input.charCodeAt(peg$currPos)===39){s2=peg$c111;peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c112);}}if(s2!==peg$FAILED){s3=[];s4=peg$parsesingle_char();while(s4!==peg$FAILED){s3.push(s4);s4=peg$parsesingle_char();}if(s3!==peg$FAILED){if(input.charCodeAt(peg$currPos)===39){s4=peg$c111;peg$currPos++;}else{s4=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c112);}}if(s4!==peg$FAILED){s2=[s2,s3,s4];s1=s2;}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}else{peg$currPos=s1;s1=peg$c0;}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c113(s1);}s0=s1;return s0;}function peg$parsesingle_char(){var s0;if(peg$c114.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c115);}}if(s0===peg$FAILED){s0=peg$parseescape_char();}return s0;}function peg$parsedouble_char(){var s0;if(peg$c116.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c117);}}if(s0===peg$FAILED){s0=peg$parseescape_char();}return s0;}function peg$parseescape_char(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c118){s1=peg$c118;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c119);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c120();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c121){s1=peg$c121;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c122);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c123();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c124){s1=peg$c124;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c125);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c126();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c127){s1=peg$c127;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c128);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c129();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c130){s1=peg$c130;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c131);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c132();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c133){s1=peg$c133;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c134);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c135();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c136){s1=peg$c136;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c137);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c138();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c139){s1=peg$c139;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c140);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c141();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c142){s1=peg$c142;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c143);}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c144();}s0=s1;if(s0===peg$FAILED){s0=peg$currPos;if(input.substr(peg$currPos,2)===peg$c145){s1=peg$c145;peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c146);}}if(s1!==peg$FAILED){s2=peg$parsehexDigit();if(s2!==peg$FAILED){s3=peg$parsehexDigit();if(s3!==peg$FAILED){s4=peg$parsehexDigit();if(s4!==peg$FAILED){s5=peg$parsehexDigit();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c147(s2,s3,s4,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}}}}}}}}}return s0;}function peg$parseline_terminator(){var s0;if(peg$c148.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c149);}}return s0;}function peg$parseliteral_numeric(){var s0,s1;s0=peg$currPos;s1=peg$parsenumber();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c150(s1);}s0=s1;return s0;}function peg$parseliteral_int(){var s0,s1;peg$silentFails++;s0=peg$currPos;s1=peg$parseint();if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c152(s1);}s0=s1;peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c151);}}return s0;}function peg$parsenumber(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=peg$parseint();if(s1!==peg$FAILED){s2=peg$parsefrac();if(s2!==peg$FAILED){s3=peg$parseexp();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){peg$reportedPos=s0;s1=peg$c153(s1,s2,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseint();if(s1!==peg$FAILED){s2=peg$parsefrac();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c154(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseint();if(s1!==peg$FAILED){s2=peg$parseexp();if(s2!==peg$FAILED){s3=peg$parse__();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c155(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseint();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c156(s1);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}}}return s0;}function peg$parseint(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parsedigit19();if(s1!==peg$FAILED){s2=peg$parsedigits();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c157(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$parsedigit();if(s0===peg$FAILED){s0=peg$currPos;if(input.charCodeAt(peg$currPos)===45){s1=peg$c65;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c66);}}if(s1===peg$FAILED){if(input.charCodeAt(peg$currPos)===43){s1=peg$c63;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c64);}}}if(s1!==peg$FAILED){s2=peg$parsedigit19();if(s2!==peg$FAILED){s3=peg$parsedigits();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c158(s1,s2,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}if(s0===peg$FAILED){s0=peg$currPos;if(input.charCodeAt(peg$currPos)===45){s1=peg$c65;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c66);}}if(s1===peg$FAILED){if(input.charCodeAt(peg$currPos)===43){s1=peg$c63;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c64);}}}if(s1!==peg$FAILED){s2=peg$parsedigit();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c159(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}}}return s0;}function peg$parsefrac(){var s0,s1,s2;s0=peg$currPos;if(input.charCodeAt(peg$currPos)===46){s1=peg$c160;peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c161);}}if(s1!==peg$FAILED){s2=peg$parsedigits();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c162(s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseexp(){var s0,s1,s2;s0=peg$currPos;s1=peg$parsee();if(s1!==peg$FAILED){s2=peg$parsedigits();if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c163(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsedigits(){var s0,s1,s2;s0=peg$currPos;s1=[];s2=peg$parsedigit();if(s2!==peg$FAILED){while(s2!==peg$FAILED){s1.push(s2);s2=peg$parsedigit();}}else{s1=peg$c0;}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c164(s1);}s0=s1;return s0;}function peg$parsedigit(){var s0,s1;peg$silentFails++;if(peg$c166.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c167);}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c165);}}return s0;}function peg$parsedigit19(){var s0,s1;peg$silentFails++;if(peg$c168.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c169);}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c165);}}return s0;}function peg$parsehexDigit(){var s0,s1;peg$silentFails++;if(peg$c171.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c172);}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c170);}}return s0;}function peg$parsee(){var s0,s1,s2;s0=peg$currPos;if(peg$c173.test(input.charAt(peg$currPos))){s1=input.charAt(peg$currPos);peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c174);}}if(s1!==peg$FAILED){if(peg$c175.test(input.charAt(peg$currPos))){s2=input.charAt(peg$currPos);peg$currPos++;}else{s2=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c176);}}if(s2===peg$FAILED){s2=peg$c10;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c177(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_NULL(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c178){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c179);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_TRUE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c180){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c181);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_FALSE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c182){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c183);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_SHOW(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c184){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c185);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_DROP(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c186){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c187);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_SELECT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c188){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c189);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_UPDATE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c190){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c191);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_CREATE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c192){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c193);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_DELETE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c194){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c195);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_INSERT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c196){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c197);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_REPLACE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,7).toLowerCase()===peg$c198){s1=input.substr(peg$currPos,7);peg$currPos+=7;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c199);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_EXPLAIN(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,7).toLowerCase()===peg$c200){s1=input.substr(peg$currPos,7);peg$currPos+=7;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c201);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_INTO(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c202){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c203);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_FROM(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c204){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c205);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_SET(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c206){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c207);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_AS(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c208){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c209);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_TABLE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c210){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c211);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_ON(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c212){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c213);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_LEFT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c214){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c215);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_INNER(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c216){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c217);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_JOIN(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c218){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c219);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_UNION(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c220){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c221);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_VALUES(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c222){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c223);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_EXISTS(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c224){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c225);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_WHERE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c226){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c227);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_GROUP(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c228){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c229);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_BY(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c230){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c231);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_ORDER(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c232){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c233);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_HAVING(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,6).toLowerCase()===peg$c234){s1=input.substr(peg$currPos,6);peg$currPos+=6;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c235);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_LIMIT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c236){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c237);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){s1=[s1,s2];s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_ASC(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c238){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c239);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c240();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_DESC(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c241){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c242);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c243();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_ALL(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c244){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c245);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c246();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_DISTINCT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,8).toLowerCase()===peg$c247){s1=input.substr(peg$currPos,8);peg$currPos+=8;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c248);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c249();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_BETWEEN(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,7).toLowerCase()===peg$c250){s1=input.substr(peg$currPos,7);peg$currPos+=7;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c251);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c252();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_IN(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c253){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c254);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c255();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_IS(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c256){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c257);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c258();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_LIKE(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,4).toLowerCase()===peg$c259){s1=input.substr(peg$currPos,4);peg$currPos+=4;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c260);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c261();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_CONTAINS(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,8).toLowerCase()===peg$c262){s1=input.substr(peg$currPos,8);peg$currPos+=8;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c263);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c264();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_NOT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c265){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c266);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c267();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_AND(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c268){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c269);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c270();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_OR(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,2).toLowerCase()===peg$c271){s1=input.substr(peg$currPos,2);peg$currPos+=2;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c272);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c273();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_COUNT(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,5).toLowerCase()===peg$c274){s1=input.substr(peg$currPos,5);peg$currPos+=5;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c275);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c276();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_MAX(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c277){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c278);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c279();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_MIN(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c280){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c281);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c282();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_SUM(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c283){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c284);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c285();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseKW_AVG(){var s0,s1,s2,s3;s0=peg$currPos;if(input.substr(peg$currPos,3).toLowerCase()===peg$c286){s1=input.substr(peg$currPos,3);peg$currPos+=3;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c287);}}if(s1!==peg$FAILED){s2=peg$currPos;peg$silentFails++;s3=peg$parseident_start();peg$silentFails--;if(s3===peg$FAILED){s2=peg$c13;}else{peg$currPos=s2;s2=peg$c0;}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c288();s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseDOT(){var s0;if(input.charCodeAt(peg$currPos)===46){s0=peg$c160;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c161);}}return s0;}function peg$parseCOMMA(){var s0;if(input.charCodeAt(peg$currPos)===44){s0=peg$c289;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c290);}}return s0;}function peg$parseSTAR(){var s0;if(input.charCodeAt(peg$currPos)===42){s0=peg$c68;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c69);}}return s0;}function peg$parseLPAREN(){var s0;if(input.charCodeAt(peg$currPos)===40){s0=peg$c5;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c6);}}return s0;}function peg$parseRPAREN(){var s0;if(input.charCodeAt(peg$currPos)===41){s0=peg$c7;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c8);}}return s0;}function peg$parseLBRAKE(){var s0;if(input.charCodeAt(peg$currPos)===91){s0=peg$c291;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c292);}}return s0;}function peg$parseRBRAKE(){var s0;if(input.charCodeAt(peg$currPos)===93){s0=peg$c293;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c294);}}return s0;}function peg$parse__(){var s0,s1;s0=[];s1=peg$parsewhitespace();while(s1!==peg$FAILED){s0.push(s1);s1=peg$parsewhitespace();}return s0;}function peg$parsechar(){var s0;if(input.length>peg$currPos){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c295);}}return s0;}function peg$parsewhitespace(){var s0,s1;peg$silentFails++;if(peg$c297.test(input.charAt(peg$currPos))){s0=input.charAt(peg$currPos);peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c298);}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c296);}}return s0;}function peg$parseEOL(){var s0,s1;peg$silentFails++;s0=peg$parseEOF();if(s0===peg$FAILED){s0=[];if(peg$c148.test(input.charAt(peg$currPos))){s1=input.charAt(peg$currPos);peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c149);}}if(s1!==peg$FAILED){while(s1!==peg$FAILED){s0.push(s1);if(peg$c148.test(input.charAt(peg$currPos))){s1=input.charAt(peg$currPos);peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c149);}}}}else{s0=peg$c0;}}peg$silentFails--;if(s0===peg$FAILED){s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c299);}}return s0;}function peg$parseEOF(){var s0,s1;s0=peg$currPos;peg$silentFails++;if(input.length>peg$currPos){s1=input.charAt(peg$currPos);peg$currPos++;}else{s1=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c295);}}peg$silentFails--;if(s1===peg$FAILED){s0=peg$c13;}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_stmts(){var s0,s1;s0=[];s1=peg$parseproc_stmt();while(s1!==peg$FAILED){s0.push(s1);s1=peg$parseproc_stmt();}return s0;}function peg$parseproc_stmt(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$currPos;peg$silentFails++;s2=peg$parseproc_init();peg$silentFails--;if(s2!==peg$FAILED){peg$currPos=s1;s1=peg$c13;}else{s1=peg$c0;}if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseassign_stmt();if(s3===peg$FAILED){s3=peg$parsereturn_stmt();}if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c300(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_init(){var s0,s1;s0=peg$currPos;s1=[];if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c301();}s0=s1;return s0;}function peg$parseassign_stmt(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parsevar_decl();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseKW_ASSIGN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseproc_expr();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c302(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsereturn_stmt(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_RETURN();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseproc_expr();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c303(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_expr(){var s0;s0=peg$parseselect_stmt();if(s0===peg$FAILED){s0=peg$parseproc_join();if(s0===peg$FAILED){s0=peg$parseproc_additive_expr();if(s0===peg$FAILED){s0=peg$parseproc_array();}}}return s0;}function peg$parseproc_additive_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseproc_multiplicative_expr();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_multiplicative_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseadditive_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_multiplicative_expr();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c40(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_multiplicative_expr(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseproc_primary();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsemultiplicative_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_primary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsemultiplicative_operator();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_primary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c40(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_join(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parsevar_decl();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parsejoin_op();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parsevar_decl();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseon_clause();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c304(s1,s3,s5,s7);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_primary(){var s0,s1,s2,s3,s4,s5;s0=peg$parseliteral();if(s0===peg$FAILED){s0=peg$parsevar_decl();if(s0===peg$FAILED){s0=peg$parseproc_func_call();if(s0===peg$FAILED){s0=peg$parseparam();if(s0===peg$FAILED){s0=peg$currPos;s1=peg$parseLPAREN();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseproc_additive_expr();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseRPAREN();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c74(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}}}}return s0;}function peg$parseproc_func_call(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseident();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseLPAREN();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseproc_primary_list();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseRPAREN();if(s7!==peg$FAILED){peg$reportedPos=s0;s1=peg$c305(s1,s5);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_primary_list(){var s0,s1,s2,s3,s4,s5,s6,s7;s0=peg$currPos;s1=peg$parseproc_primary();if(s1!==peg$FAILED){s2=[];s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_primary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}while(s3!==peg$FAILED){s2.push(s3);s3=peg$currPos;s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseCOMMA();if(s5!==peg$FAILED){s6=peg$parse__();if(s6!==peg$FAILED){s7=peg$parseproc_primary();if(s7!==peg$FAILED){s4=[s4,s5,s6,s7];s3=s4;}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}else{peg$currPos=s3;s3=peg$c0;}}if(s2!==peg$FAILED){peg$reportedPos=s0;s1=peg$c15(s1,s2);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parseproc_array(){var s0,s1,s2,s3,s4,s5;s0=peg$currPos;s1=peg$parseLBRAKE();if(s1!==peg$FAILED){s2=peg$parse__();if(s2!==peg$FAILED){s3=peg$parseproc_primary_list();if(s3!==peg$FAILED){s4=peg$parse__();if(s4!==peg$FAILED){s5=peg$parseRBRAKE();if(s5!==peg$FAILED){peg$reportedPos=s0;s1=peg$c306(s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsevar_decl(){var s0,s1,s2,s3;s0=peg$currPos;s1=peg$parseKW_VAR_PRE();if(s1!==peg$FAILED){s2=peg$parseident_name();if(s2!==peg$FAILED){s3=peg$parsemem_chain();if(s3!==peg$FAILED){peg$reportedPos=s0;s1=peg$c307(s2,s3);s0=s1;}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}}else{peg$currPos=s0;s0=peg$c0;}return s0;}function peg$parsemem_chain(){var s0,s1,s2,s3,s4;s0=peg$currPos;s1=[];s2=peg$currPos;if(input.charCodeAt(peg$currPos)===46){s3=peg$c160;peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c161);}}if(s3!==peg$FAILED){s4=peg$parseident_name();if(s4!==peg$FAILED){s3=[s3,s4];s2=s3;}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}while(s2!==peg$FAILED){s1.push(s2);s2=peg$currPos;if(input.charCodeAt(peg$currPos)===46){s3=peg$c160;peg$currPos++;}else{s3=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c161);}}if(s3!==peg$FAILED){s4=peg$parseident_name();if(s4!==peg$FAILED){s3=[s3,s4];s2=s3;}else{peg$currPos=s2;s2=peg$c0;}}else{peg$currPos=s2;s2=peg$c0;}}if(s1!==peg$FAILED){peg$reportedPos=s0;s1=peg$c308(s1);}s0=s1;return s0;}function peg$parseKW_VAR_PRE(){var s0;if(input.charCodeAt(peg$currPos)===36){s0=peg$c309;peg$currPos++;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c310);}}return s0;}function peg$parseKW_RETURN(){var s0;if(input.substr(peg$currPos,6).toLowerCase()===peg$c311){s0=input.substr(peg$currPos,6);peg$currPos+=6;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c312);}}return s0;}function peg$parseKW_ASSIGN(){var s0;if(input.substr(peg$currPos,2)===peg$c313){s0=peg$c313;peg$currPos+=2;}else{s0=peg$FAILED;if(peg$silentFails===0){peg$fail(peg$c314);}}return s0;}var util;var inspect=function inspect(){};if(module&&process&&process.env){util=require('util');inspect=function inspect(obj){console.log(util.inspect(obj,false,10));};}function debug(str){console.log(str);}function createUnaryExpr(op,e){return{type:'unary_expr',operator:op,expr:e};}function createBinaryExpr(op,left,right){return{type:'binary_expr',operator:op,left:left,right:right};}function createList(head,tail){var result=[head];for(var i=0;i<tail.length;i++){result.push(tail[i][3]);}return result;}function createExprList(head,tail,room){var epList=createList(head,tail);var exprList=[];var ep;for(var i=0;i<epList.length;i++){ep=epList[i];if(ep.type=='param'){ep.room=room;ep.pos=i;}else{exprList.push(ep);}}return exprList;}function createBinaryExprChain(head,tail){var result=head;for(var i=0;i<tail.length;i++){result=createBinaryExpr(tail[i][1],result,tail[i][3]);}return result;}var reservedMap={'SHOW':true,'DROP':true,'SELECT':true,'UPDATE':true,'CREATE':true,'DELETE':true,'INSERT':true,'REPLACE':true,'EXPLAIN':true,'ALL':true,'DISTINCT':true,'AS':true,'TABLE':true,'INTO':true,'FROM':true,'SET':true,'LEFT':true,'ON':true,'INNER':true,'JOIN':true,'UNION':true,'VALUES':true,'EXISTS':true,'WHERE':true,'GROUP':true,'BY':true,'HAVING':true,'ORDER':true,'ASC':true,'DESC':true,'LIMIT':true,'BETWEEN':true,'IN':true,'IS':true,'LIKE':true,'CONTAINS':true,'NOT':true,'AND':true,'OR':true,'TRUE':true,'FALSE':true,'NULL':true};var cmpPrefixMap={'+':true,'-':true,'*':true,'/':true,'>':true,'<':true,'!':true,'=':true,'B':true,'b':true,'I':true,'i':true,'L':true,'l':true,'N':true,'n':true,'C':true,'c':true};var params=[];var varList=[];peg$result=peg$startRuleFunction();if(peg$result!==peg$FAILED&&peg$currPos===input.length){return peg$result;}else{if(peg$result!==peg$FAILED&&peg$currPos<input.length){peg$fail({type:"end",description:"end of input"});}throw peg$buildException(null,peg$maxFailExpected,peg$maxFailPos);}}return{SyntaxError:SyntaxError,parse:parse};}();}).call(this,require('_process'));},{"_process":52,"util":61}],50:[function(require,module,exports){var escapeMap={'\0':'\\0','\'':'\\\'','\"':'\\\"','\b':'\\b','\n':'\\n','\r':'\\r','\t':'\\t','\x1a':'\\Z','\\':'\\\\'};function escape(str){var res=[];var c,e;for(var i=0;i<str.length;i++){c=str[i];e=escapeMap[c];if(e){c=e;}res.push(c);}return res.join('');}function literalToSQL(l){var t=l.type;var v=l.value;if(t==='string'){v='\''+escape(v)+'\'';}else if(t==='bool'){v=v?'TRUE':'FALSE';}else if(t==='null'){v='NULL';}else if(t==='star'){v='*';}if(l.paren){return'('+v+')';}else{return v;}}function unaryToSQL(e){var str=e.operator+' '+exprToSQL(e.expr);if(e.paren){return'('+str+')';}else{return str;}}function getExprListSQL(l){var es=[];for(var i=0;i<l.length;i++){es.push(exprToSQL(l[i]));}return es;}function binaryToSQL(e){var op=e.operator;var left=e.left;var right=e.right;var lstr=exprToSQL(left);var rstr=exprToSQL(right);if(Array.isArray(rstr)){if(op==='='){op='IN';}if(op==='BETWEEN'){rstr=rstr[0]+' AND '+rstr[1];}else{rstr='('+rstr.join(', ')+')';}}var str=lstr+' '+op+' '+rstr;if(e.paren){return'('+str+')';}else{return str;}}function aggrToSQL(e){var args=e.args;var str=exprToSQL(args.expr);var name=e.name;if(name==='COUNT'){var distinct=args.distinct;if(distinct){str='DISTINCT '+str;}}return name+'('+str+')';}function funcToSQL(e){var es=exprToSQL(e.args);var str=e.name+'('+es.join(', ')+')';if(e.paren){return'('+str+')';}else{return str;}}function columnRefToSQL(e){var str=e.column;if(e.table){str=e.table+'.'+str;}if(e.paren){return'('+str+')';}else{return str;}}exports.exprToSQL=exprToSQL;function exprToSQL(e){var t=e.type;var res;switch(t){case'unary_expr':res=unaryToSQL(e);break;case'binary_expr':res=binaryToSQL(e);break;case'aggr_func':res=aggrToSQL(e);break;case'function':res=funcToSQL(e);break;case'column_ref':res=columnRefToSQL(e);break;case'expr_list':res=getExprListSQL(e.value);break;case'var':throw new Error('unsupported type `var`');case'param':res=paramToSql(e);break;default:res=literalToSQL(e);}return res;}function paramToSql(e){return e.value==='?'?'?':':'+e.value;}function js2nSQLExpr(val){var type=typeof val==="undefined"?"undefined":_typeof(val);var obj={};switch(type){case'string':case'number':obj.type=type;obj.value=val;break;case'boolean':obj.type='bool';obj.value=val;break;case'object':if(val===null){obj.type='null';obj.value=val;}else if(Array.isArray(val)){obj.type='expr_list';var arr=[];for(var i=0;i<val.length;i++){arr.push(js2nSQLExpr(val[i]));}obj.value=arr;}else{obj.type='object';obj.value=val;}break;default:obj.type='unknown';}return obj;}function unionToSQL(s,options){var str=selectToSQL(s,options);var res=[];res.push(str);while(s._next){str=selectToSQL(s._next,options);res.push('UNION');res.push(str);s=s._next;}return res.join(' ');}function selectToSQL(s,options){var distinct=s.distinct;var columns=s.columns;var from=s.from;var where=s.where;var groupby=s.groupby;var orderby=s.orderby;var limit=s.limit;var clauses=[];var i,str,cs;options=options||{};clauses.push('SELECT');if(distinct){clauses.push(distinct);}if(columns==='*'){clauses.push('*');}else{cs=[];for(i=0;i<columns.length;i++){var ea=columns[i];str=exprToSQL(ea.expr);if(ea.as){str+=' AS '+ea.as;}cs.push(str);}clauses.push(cs.join(', '));}if(Array.isArray(from)){var tbase=from[0];clauses.push('FROM');cs=[];str=tbase.table;if(options.keep_db!==false&&tbase.db){str=tbase.db+'.'+str;}if(tbase.as){str+=' AS '+tbase.as;}cs.push(str);for(i=1;i<from.length;i++){var tref=from[i];if(tref.join){str=' '+tref.join+' ';}else{str=', ';}if(options.keep_db!==false&&tref.db){str+=tref.db+'.';}str+=tref.table;if(tref.as){str+=' AS '+tref.as;}if(tref.on){str+=' ON '+exprToSQL(tref.on);}cs.push(str);}clauses.push(cs.join(''));}if(where){clauses.push('WHERE '+exprToSQL(where));}if(Array.isArray(groupby)){var l=getExprListSQL(groupby);clauses.push('GROUP BY '+l.join(', '));}if(Array.isArray(orderby)){cs=[];for(var i=0;i<orderby.length;i++){var o=orderby[i];str=exprToSQL(o.expr);str+=' '+o.type;cs.push(str);}clauses.push('ORDER BY '+cs.join(', '));}if(Array.isArray(limit)){if(options.offset!==false){str='LIMIT '+limit[0].value+', '+limit[1].value;}else{str='LIMIT '+(limit[0].value+limit[1].value);}clauses.push(str);}return clauses.join(' ');}function updateToSQL(stmt,options){var res=['UPDATE'];options=options||{};if(options.keep_db===false){res.push(stmt.table);}else{res.push(stmt.db+'.'+stmt.table);}res.push('SET');var cs=[];var sets=stmt.set;var i,str;for(i=0;i<sets.length;i++){str=sets[i].column+' = '+exprToSQL(sets[i].value);cs.push(str);}res.push(cs.join(', '));if(stmt.where){str='WHERE ';str+=exprToSQL(stmt.where);res.push(str);}return res.join(' ');}function replace_insertToSQL(stmt,options){options=options||{};var res=[];res.push(stmt.type.toUpperCase());res.push('INTO');if(options.keep_db===false){res.push(stmt.table);}else{res.push(stmt.db+'.'+stmt.table);}res.push('('+stmt.columns.join(', ')+')');res.push('VALUES');var i;var cs=[];var vs=stmt.values;for(i=0;i<vs.length;i++){var es=vs[i].value;var rs=[];for(var j=0;j<es.length;j++){rs.push(exprToSQL(es[j]));}cs.push('('+rs.join(', ')+')');}res.push(cs.join(', '));return res.join(' ');}module.exports=function(ast,opt){var options={keep_db:true,offset:false};for(var k in opt){options[k]=opt[k];}var res;switch(ast.type){case'select':res=unionToSQL(ast,options);break;case'update':res=updateToSQL(ast,options);break;case'insert':case'replace':res=replace_insertToSQL(ast,options);break;case'delete':throw new Error('ERROR TYPE :'+ast.type+', NOT SUPPORTED');default:throw new Error('ERROR TYPE :'+ast.type+', NOT SUPPORTED');}return res;};},{}],51:[function(require,module,exports){(function(process){function normalizeArray(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==='.'){parts.splice(i,1);}else if(last==='..'){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up--;up){parts.unshift('..');}}return parts;}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;var splitPath=function splitPath(filename){return splitPathRe.exec(filename).slice(1);};exports.resolve=function(){var resolvedPath='',resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if(typeof path!=='string'){throw new TypeError('Arguments to path.resolve must be strings');}else if(!path){continue;}resolvedPath=path+'/'+resolvedPath;resolvedAbsolute=path.charAt(0)==='/';}resolvedPath=normalizeArray(filter(resolvedPath.split('/'),function(p){return!!p;}),!resolvedAbsolute).join('/');return(resolvedAbsolute?'/':'')+resolvedPath||'.';};exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==='/';path=normalizeArray(filter(path.split('/'),function(p){return!!p;}),!isAbsolute).join('/');if(!path&&!isAbsolute){path='.';}if(path&&trailingSlash){path+='/';}return(isAbsolute?'/':'')+path;};exports.isAbsolute=function(path){return path.charAt(0)==='/';};exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=='string'){throw new TypeError('Arguments to path.join must be strings');}return p;}).join('/'));};exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=='')break;}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=='')break;}if(start>end)return[];return arr.slice(start,end-start+1);}var fromParts=trim(from.split('/'));var toParts=trim(to.split('/'));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break;}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push('..');}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join('/');};exports.sep='/';exports.delimiter=':';exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return'.';}if(dir){dir=dir.substr(0,dir.length-1);}return root+dir;};exports.basename=function(path,ext){var f=splitPath(path)[2];if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length);}return f;};exports.extname=function(path){return splitPath(path)[3];};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i]);}return res;}var substr='ab'.substr(-1)==='b'?function(str,start,len){return str.substr(start,len);}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len);};}).call(this,require('_process'));},{"_process":52}],52:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0);}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{return cachedSetTimeout(fun,0);}catch(e){try{return cachedSetTimeout.call(null,fun,0);}catch(e){return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker);}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{return cachedClearTimeout(marker);}catch(e){try{return cachedClearTimeout.call(null,marker);}catch(e){return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};},{}],53:[function(require,module,exports){(function(global){'use strict';var logger=require('js-logger').logger.getLogger();function CacheManager(){logger.trace('Creating new instance of cache manager');this._caches=new Map();}CacheManager.prototype.getCache=function(name,cacheClass){logger.debug('Getting cache by name:',name);var cache=this._caches.get(name);if(!cache){logger.trace('Cache with name:',name,'not exist yet.');if(cacheClass){logger.trace('Cache class defined');if(typeof cacheClass==='function'){logger.trace('Creating new cache by customized class for name:',name);cache=new cacheClass();}else{logger.warn('Cache class defined, but is not a function.',typeof cacheClass==="undefined"?"undefined":_typeof(cacheClass));throw new Error('Customize cache class type wrong.');}}else{logger.trace('Creating new cache as Map for name:',name);cache=new Map();}if(typeof cache!=='undefined'){this._caches.set(name,cache);}else{logger.warn('Cache undefined, something wrong.');throw new Error('Create cache get undefined.');}}else{logger.trace('Find cache for name:',name);}return cache;};CacheManager.prototype.flushCaches=function(resetCaches){logger.debug('Flushing all caches');this._caches.forEach(function(value){if(value&&typeof value.clear==='function'){value.clear();}});if(resetCaches){logger.trace('Rest cache');this._caches.clear();}};var CACHE_MANAGER_KEY=Symbol.for('client.Utils.CacheManager');var globalRef=typeof global!=='undefined'?global:typeof self!=='undefined'?self:typeof window!='undefined'?window:{};var globalSymbols=Object.getOwnPropertySymbols(globalRef);var hasCacheManager=globalSymbols.indexOf(CACHE_MANAGER_KEY)>-1;if(!hasCacheManager){var _cacheManager=new CacheManager();Object.freeze(_cacheManager);globalRef[CACHE_MANAGER_KEY]=_cacheManager;}module.exports={instance:globalRef[CACHE_MANAGER_KEY]};}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{"js-logger":38}],54:[function(require,module,exports){module.exports.toApexDate=toApexDate;module.exports.toApexDateTime=toApexDateTime;module.exports.toUTCDateString=toUTCDateString;module.exports.monthsBetween=monthsBetween;module.exports.monthsBetweenRoundPartialUp=monthsBetweenRoundPartialUp;module.exports.daysBetween=daysBetween;module.exports.daysBetweenIgnoringLeapYearDays=daysBetweenIgnoringLeapYearDays;module.exports.distinguishDateFromDateTime=distinguishDateFromDateTime;module.exports.addMonths=addMonths;module.exports.addDays=addDays;function toApexDate(date){var dateIso=date.toISOString();return dateIso.replace(new RegExp('[Tt].*'),"");}function toApexDateTime(dateTime){var dateIso=dateTime.toISOString();return dateIso.slice(0,dateIso.length-1)+"+0000";}function toUTCDateString(date){var timezone=date.getTimezoneOffset();return new Date(date.setMinutes(date.getMinutes()+parseInt(timezone))).toLocaleDateString();}function distinguishDateFromDateTime(dateString){var dateRegex=new RegExp('\\d{4}-\\d{2}-\\d{2}');var dateTimeRegex=new RegExp('\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}(Z|(\\+\\d{4}))');if(dateRegex.test(dateString)&&dateString.length==10){return'date';}else if(dateTimeRegex.test(dateString)&&(dateString.length==24||dateString.length==28)){return'datetime';}return'none';}function monthsBetween(startDate,endDate){if(startDate>endDate){return-1*monthsBetween(endDate,startDate);}var result=0;result+=(endDate.getUTCFullYear()-startDate.getUTCFullYear())*12;result+=endDate.getUTCMonth()-startDate.getUTCMonth();return result;}function monthsBetweenRoundPartialUp(startDate,endDate){if(startDate>endDate){return-1*monthsBetweenRoundPartialUp(endDate,startDate);}var result=monthsBetween(startDate,endDate);var date=new Date(startDate.getTime());addMonths(date,result);if(date<endDate){result+=1;}return result;}function daysBetween(startDate,endDate){if(startDate>endDate){return-1*daysBetween(endDate,startDate);}var msDiff=endDate.getTime()-startDate.getTime();var dayInUnix=86400000;return Math.round(msDiff/dayInUnix);}function addMonths(startDate,numMonths){var currentMonth=startDate.getUTCMonth();startDate.setUTCMonth(startDate.getUTCMonth()+numMonths);var trueMonth=currentMonth+numMonths;trueMonth=trueMonth<0?trueMonth+12:trueMonth;if(startDate.getUTCMonth()!=trueMonth%12){startDate.setUTCDate(0);}return startDate;}function addDays(startDate,numDays){startDate.setUTCDate(startDate.getUTCDate()+numDays);return startDate;}function daysBetweenIgnoringLeapYearDays(startDate,endDate){var numLeapDays=0;var startYear=startDate.getUTCFullYear();var endYear=endDate.getUTCFullYear();for(var i=startYear,j=endYear;i<=j;i++){if(!isLeapYear(i))continue;var leapDay=new Date(i,2,29);if(startDate<leapDay&&endDate>leapDay){numLeapDays++;}}return daysBetween(startDate,endDate)-numLeapDays;}function isLeapYear(year){return!(year%4)&&year%100||!(year%400);}},{}],55:[function(require,module,exports){module.exports.setScale=setScale;function setScale(num,scale){var exp=Math.pow(10,scale);num*=exp;var res=Math.round(num);res/=exp;return res;}},{}],56:[function(require,module,exports){var logger=require('js-logger').logger.getLogger();function RecordJobManager(conn,prefix){this._conn=conn;var serviceRouterPrefix=prefix===''?'':'/SBQQ';this._serviceRouterUrl=serviceRouterPrefix+'/ServiceRouter';this._setJobStatusProvider='JobCheckerServiceProvider.SetJobStatus';this._setJobsStatusProvider='JobCheckerServiceProvider.SetJobsStatus';}RecordJobManager.prototype.updateJobStatus=function(recordId,jobType,jobStatus,jobDetails,targetId){var context={saver:this._setJobStatusProvider,model:JSON.stringify({recordId:recordId,jobType:jobType,jobStatus:jobStatus,jobDetails:jobDetails||'',targetId:targetId||null})};var apexRestCallStartTime=Date.now();logger.info(jobType+' RecordJobManager.js: Start apex rest call to update job status.');return this._conn.apex.post(this._serviceRouterUrl,context).then(function(){var apexRestCallEndTime=Date.now();logger.info(jobType+' RecordJobManager.js: Apex rest call to update job status took '+(apexRestCallEndTime-apexRestCallStartTime)+' ms.');return;}).catch(function(err){return Promise.reject('Error occurred while updating RecordJob__c Status: '+(err.message||err));});};RecordJobManager.prototype.updateJobsStatus=function(recordIds,jobType,jobStatus,jobDetails){var context={saver:this._setJobsStatusProvider,model:JSON.stringify({recordIds:recordIds,jobType:jobType,jobStatus:jobStatus,jobDetails:jobDetails})};return this._conn.apex.post(this._serviceRouterUrl,context).catch(function(err){return Promise.reject('Error occurred while updating RecordJob__c Status: '+(err.message||err));});};module.exports=RecordJobManager;},{"js-logger":38}],57:[function(require,module,exports){module.exports.DateUtils=require('./DateUtils.js');module.exports.NumberUtils=require('./NumberUtils.js');module.exports.RecordJobManager=require('./RecordJobManager.js');module.exports.cacheManager=require('./CacheManager.js').instance;},{"./CacheManager.js":53,"./DateUtils.js":54,"./NumberUtils.js":55,"./RecordJobManager.js":56}],58:[function(require,module,exports){;(function(exports){if((typeof module==="undefined"?"undefined":_typeof(module))==='object'&&module.exports===exports)exports=module.exports=SemVer;exports.SEMVER_SPEC_VERSION='2.0.0';var MAX_LENGTH=256;var MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;var re=exports.re=[];var src=exports.src=[];var R=0;var NUMERICIDENTIFIER=R++;src[NUMERICIDENTIFIER]='0|[1-9]\\d*';var NUMERICIDENTIFIERLOOSE=R++;src[NUMERICIDENTIFIERLOOSE]='[0-9]+';var NONNUMERICIDENTIFIER=R++;src[NONNUMERICIDENTIFIER]='\\d*[a-zA-Z-][a-zA-Z0-9-]*';var MAINVERSION=R++;src[MAINVERSION]='('+src[NUMERICIDENTIFIER]+')\\.'+'('+src[NUMERICIDENTIFIER]+')\\.'+'('+src[NUMERICIDENTIFIER]+')';var MAINVERSIONLOOSE=R++;src[MAINVERSIONLOOSE]='('+src[NUMERICIDENTIFIERLOOSE]+')\\.'+'('+src[NUMERICIDENTIFIERLOOSE]+')\\.'+'('+src[NUMERICIDENTIFIERLOOSE]+')';var PRERELEASEIDENTIFIER=R++;src[PRERELEASEIDENTIFIER]='(?:'+src[NUMERICIDENTIFIER]+'|'+src[NONNUMERICIDENTIFIER]+')';var PRERELEASEIDENTIFIERLOOSE=R++;src[PRERELEASEIDENTIFIERLOOSE]='(?:'+src[NUMERICIDENTIFIERLOOSE]+'|'+src[NONNUMERICIDENTIFIER]+')';var PRERELEASE=R++;src[PRERELEASE]='(?:-('+src[PRERELEASEIDENTIFIER]+'(?:\\.'+src[PRERELEASEIDENTIFIER]+')*))';var PRERELEASELOOSE=R++;src[PRERELEASELOOSE]='(?:-?('+src[PRERELEASEIDENTIFIERLOOSE]+'(?:\\.'+src[PRERELEASEIDENTIFIERLOOSE]+')*))';var BUILDIDENTIFIER=R++;src[BUILDIDENTIFIER]='[0-9A-Za-z-]+';var BUILD=R++;src[BUILD]='(?:\\+('+src[BUILDIDENTIFIER]+'(?:\\.'+src[BUILDIDENTIFIER]+')*))';var FULL=R++;var FULLPLAIN='v?'+src[MAINVERSION]+src[PRERELEASE]+'?'+src[BUILD]+'?';src[FULL]='^'+FULLPLAIN+'$';var LOOSEPLAIN='[v=\\s]*'+src[MAINVERSIONLOOSE]+src[PRERELEASELOOSE]+'?'+src[BUILD]+'?';var LOOSE=R++;src[LOOSE]='^'+LOOSEPLAIN+'$';var GTLT=R++;src[GTLT]='((?:<|>)?=?)';var XRANGEIDENTIFIERLOOSE=R++;src[XRANGEIDENTIFIERLOOSE]=src[NUMERICIDENTIFIERLOOSE]+'|x|X|\\*';var XRANGEIDENTIFIER=R++;src[XRANGEIDENTIFIER]=src[NUMERICIDENTIFIER]+'|x|X|\\*';var XRANGEPLAIN=R++;src[XRANGEPLAIN]='[v=\\s]*('+src[XRANGEIDENTIFIER]+')'+'(?:\\.('+src[XRANGEIDENTIFIER]+')'+'(?:\\.('+src[XRANGEIDENTIFIER]+')'+'(?:'+src[PRERELEASE]+')?'+src[BUILD]+'?'+')?)?';var XRANGEPLAINLOOSE=R++;src[XRANGEPLAINLOOSE]='[v=\\s]*('+src[XRANGEIDENTIFIERLOOSE]+')'+'(?:\\.('+src[XRANGEIDENTIFIERLOOSE]+')'+'(?:\\.('+src[XRANGEIDENTIFIERLOOSE]+')'+'(?:'+src[PRERELEASELOOSE]+')?'+src[BUILD]+'?'+')?)?';var XRANGE=R++;src[XRANGE]='^'+src[GTLT]+'\\s*'+src[XRANGEPLAIN]+'$';var XRANGELOOSE=R++;src[XRANGELOOSE]='^'+src[GTLT]+'\\s*'+src[XRANGEPLAINLOOSE]+'$';var LONETILDE=R++;src[LONETILDE]='(?:~>?)';var TILDETRIM=R++;src[TILDETRIM]='(\\s*)'+src[LONETILDE]+'\\s+';re[TILDETRIM]=new RegExp(src[TILDETRIM],'g');var tildeTrimReplace='$1~';var TILDE=R++;src[TILDE]='^'+src[LONETILDE]+src[XRANGEPLAIN]+'$';var TILDELOOSE=R++;src[TILDELOOSE]='^'+src[LONETILDE]+src[XRANGEPLAINLOOSE]+'$';var LONECARET=R++;src[LONECARET]='(?:\\^)';var CARETTRIM=R++;src[CARETTRIM]='(\\s*)'+src[LONECARET]+'\\s+';re[CARETTRIM]=new RegExp(src[CARETTRIM],'g');var caretTrimReplace='$1^';var CARET=R++;src[CARET]='^'+src[LONECARET]+src[XRANGEPLAIN]+'$';var CARETLOOSE=R++;src[CARETLOOSE]='^'+src[LONECARET]+src[XRANGEPLAINLOOSE]+'$';var COMPARATORLOOSE=R++;src[COMPARATORLOOSE]='^'+src[GTLT]+'\\s*('+LOOSEPLAIN+')$|^$';var COMPARATOR=R++;src[COMPARATOR]='^'+src[GTLT]+'\\s*('+FULLPLAIN+')$|^$';var COMPARATORTRIM=R++;src[COMPARATORTRIM]='(\\s*)'+src[GTLT]+'\\s*('+LOOSEPLAIN+'|'+src[XRANGEPLAIN]+')';re[COMPARATORTRIM]=new RegExp(src[COMPARATORTRIM],'g');var comparatorTrimReplace='$1$2$3';var HYPHENRANGE=R++;src[HYPHENRANGE]='^\\s*('+src[XRANGEPLAIN]+')'+'\\s+-\\s+'+'('+src[XRANGEPLAIN]+')'+'\\s*$';var HYPHENRANGELOOSE=R++;src[HYPHENRANGELOOSE]='^\\s*('+src[XRANGEPLAINLOOSE]+')'+'\\s+-\\s+'+'('+src[XRANGEPLAINLOOSE]+')'+'\\s*$';var STAR=R++;src[STAR]='(<|>)?=?\\s*\\*';for(var i=0;i<R;i++){;if(!re[i])re[i]=new RegExp(src[i]);}exports.parse=parse;function parse(version,loose){if(version instanceof SemVer)return version;if(typeof version!=='string')return null;if(version.length>MAX_LENGTH)return null;var r=loose?re[LOOSE]:re[FULL];if(!r.test(version))return null;try{return new SemVer(version,loose);}catch(er){return null;}}exports.valid=valid;function valid(version,loose){var v=parse(version,loose);return v?v.version:null;}exports.clean=clean;function clean(version,loose){var s=parse(version.trim().replace(/^[=v]+/,''),loose);return s?s.version:null;}exports.SemVer=SemVer;function SemVer(version,loose){if(version instanceof SemVer){if(version.loose===loose)return version;else version=version.version;}else if(typeof version!=='string'){throw new TypeError('Invalid Version: '+version);}if(version.length>MAX_LENGTH)throw new TypeError('version is longer than '+MAX_LENGTH+' characters');if(!(this instanceof SemVer))return new SemVer(version,loose);;this.loose=loose;var m=version.trim().match(loose?re[LOOSE]:re[FULL]);if(!m)throw new TypeError('Invalid Version: '+version);this.raw=version;this.major=+m[1];this.minor=+m[2];this.patch=+m[3];if(this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError('Invalid major version');if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError('Invalid minor version');if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError('Invalid patch version');if(!m[4])this.prerelease=[];else this.prerelease=m[4].split('.').map(function(id){if(/^[0-9]+$/.test(id)){var num=+id;if(num>=0&&num<MAX_SAFE_INTEGER)return num;}return id;});this.build=m[5]?m[5].split('.'):[];this.format();}SemVer.prototype.format=function(){this.version=this.major+'.'+this.minor+'.'+this.patch;if(this.prerelease.length)this.version+='-'+this.prerelease.join('.');return this.version;};SemVer.prototype.inspect=function(){return'<SemVer "'+this+'">';};SemVer.prototype.toString=function(){return this.version;};SemVer.prototype.compare=function(other){;if(!(other instanceof SemVer))other=new SemVer(other,this.loose);return this.compareMain(other)||this.comparePre(other);};SemVer.prototype.compareMain=function(other){if(!(other instanceof SemVer))other=new SemVer(other,this.loose);return compareIdentifiers(this.major,other.major)||compareIdentifiers(this.minor,other.minor)||compareIdentifiers(this.patch,other.patch);};SemVer.prototype.comparePre=function(other){if(!(other instanceof SemVer))other=new SemVer(other,this.loose);if(this.prerelease.length&&!other.prerelease.length)return-1;else if(!this.prerelease.length&&other.prerelease.length)return 1;else if(!this.prerelease.length&&!other.prerelease.length)return 0;var i=0;do{var a=this.prerelease[i];var b=other.prerelease[i];;if(a===undefined&&b===undefined)return 0;else if(b===undefined)return 1;else if(a===undefined)return-1;else if(a===b)continue;else return compareIdentifiers(a,b);}while(++i);};SemVer.prototype.inc=function(release,identifier){switch(release){case'premajor':this.prerelease.length=0;this.patch=0;this.minor=0;this.major++;this.inc('pre',identifier);break;case'preminor':this.prerelease.length=0;this.patch=0;this.minor++;this.inc('pre',identifier);break;case'prepatch':this.prerelease.length=0;this.inc('patch',identifier);this.inc('pre',identifier);break;case'prerelease':if(this.prerelease.length===0)this.inc('patch',identifier);this.inc('pre',identifier);break;case'major':if(this.minor!==0||this.patch!==0||this.prerelease.length===0)this.major++;this.minor=0;this.patch=0;this.prerelease=[];break;case'minor':if(this.patch!==0||this.prerelease.length===0)this.minor++;this.patch=0;this.prerelease=[];break;case'patch':if(this.prerelease.length===0)this.patch++;this.prerelease=[];break;case'pre':if(this.prerelease.length===0)this.prerelease=[0];else{var i=this.prerelease.length;while(--i>=0){if(typeof this.prerelease[i]==='number'){this.prerelease[i]++;i=-2;}}if(i===-1)this.prerelease.push(0);}if(identifier){if(this.prerelease[0]===identifier){if(isNaN(this.prerelease[1]))this.prerelease=[identifier,0];}else this.prerelease=[identifier,0];}break;default:throw new Error('invalid increment argument: '+release);}this.format();return this;};exports.inc=inc;function inc(version,release,loose,identifier){if(typeof loose==='string'){identifier=loose;loose=undefined;}try{return new SemVer(version,loose).inc(release,identifier).version;}catch(er){return null;}}exports.diff=diff;function diff(version1,version2){if(eq(version1,version2)){return null;}else{var v1=parse(version1);var v2=parse(version2);if(v1.prerelease.length||v2.prerelease.length){for(var key in v1){if(key==='major'||key==='minor'||key==='patch'){if(v1[key]!==v2[key]){return'pre'+key;}}}return'prerelease';}for(var key in v1){if(key==='major'||key==='minor'||key==='patch'){if(v1[key]!==v2[key]){return key;}}}}}exports.compareIdentifiers=compareIdentifiers;var numeric=/^[0-9]+$/;function compareIdentifiers(a,b){var anum=numeric.test(a);var bnum=numeric.test(b);if(anum&&bnum){a=+a;b=+b;}return anum&&!bnum?-1:bnum&&!anum?1:a<b?-1:a>b?1:0;}exports.rcompareIdentifiers=rcompareIdentifiers;function rcompareIdentifiers(a,b){return compareIdentifiers(b,a);}exports.major=major;function major(a,loose){return new SemVer(a,loose).major;}exports.minor=minor;function minor(a,loose){return new SemVer(a,loose).minor;}exports.patch=patch;function patch(a,loose){return new SemVer(a,loose).patch;}exports.compare=compare;function compare(a,b,loose){return new SemVer(a,loose).compare(b);}exports.compareLoose=compareLoose;function compareLoose(a,b){return compare(a,b,true);}exports.rcompare=rcompare;function rcompare(a,b,loose){return compare(b,a,loose);}exports.sort=sort;function sort(list,loose){return list.sort(function(a,b){return exports.compare(a,b,loose);});}exports.rsort=rsort;function rsort(list,loose){return list.sort(function(a,b){return exports.rcompare(a,b,loose);});}exports.gt=gt;function gt(a,b,loose){return compare(a,b,loose)>0;}exports.lt=lt;function lt(a,b,loose){return compare(a,b,loose)<0;}exports.eq=eq;function eq(a,b,loose){return compare(a,b,loose)===0;}exports.neq=neq;function neq(a,b,loose){return compare(a,b,loose)!==0;}exports.gte=gte;function gte(a,b,loose){return compare(a,b,loose)>=0;}exports.lte=lte;function lte(a,b,loose){return compare(a,b,loose)<=0;}exports.cmp=cmp;function cmp(a,op,b,loose){var ret;switch(op){case'===':if((typeof a==="undefined"?"undefined":_typeof(a))==='object')a=a.version;if((typeof b==="undefined"?"undefined":_typeof(b))==='object')b=b.version;ret=a===b;break;case'!==':if((typeof a==="undefined"?"undefined":_typeof(a))==='object')a=a.version;if((typeof b==="undefined"?"undefined":_typeof(b))==='object')b=b.version;ret=a!==b;break;case'':case'=':case'==':ret=eq(a,b,loose);break;case'!=':ret=neq(a,b,loose);break;case'>':ret=gt(a,b,loose);break;case'>=':ret=gte(a,b,loose);break;case'<':ret=lt(a,b,loose);break;case'<=':ret=lte(a,b,loose);break;default:throw new TypeError('Invalid operator: '+op);}return ret;}exports.Comparator=Comparator;function Comparator(comp,loose){if(comp instanceof Comparator){if(comp.loose===loose)return comp;else comp=comp.value;}if(!(this instanceof Comparator))return new Comparator(comp,loose);;this.loose=loose;this.parse(comp);if(this.semver===ANY)this.value='';else this.value=this.operator+this.semver.version;;}var ANY={};Comparator.prototype.parse=function(comp){var r=this.loose?re[COMPARATORLOOSE]:re[COMPARATOR];var m=comp.match(r);if(!m)throw new TypeError('Invalid comparator: '+comp);this.operator=m[1];if(this.operator==='=')this.operator='';if(!m[2])this.semver=ANY;else this.semver=new SemVer(m[2],this.loose);};Comparator.prototype.inspect=function(){return'<SemVer Comparator "'+this+'">';};Comparator.prototype.toString=function(){return this.value;};Comparator.prototype.test=function(version){;if(this.semver===ANY)return true;if(typeof version==='string')version=new SemVer(version,this.loose);return cmp(version,this.operator,this.semver,this.loose);};exports.Range=Range;function Range(range,loose){if(range instanceof Range&&range.loose===loose)return range;if(!(this instanceof Range))return new Range(range,loose);this.loose=loose;this.raw=range;this.set=range.split(/\s*\|\|\s*/).map(function(range){return this.parseRange(range.trim());},this).filter(function(c){return c.length;});if(!this.set.length){throw new TypeError('Invalid SemVer Range: '+range);}this.format();}Range.prototype.inspect=function(){return'<SemVer Range "'+this.range+'">';};Range.prototype.format=function(){this.range=this.set.map(function(comps){return comps.join(' ').trim();}).join('||').trim();return this.range;};Range.prototype.toString=function(){return this.range;};Range.prototype.parseRange=function(range){var loose=this.loose;range=range.trim();;var hr=loose?re[HYPHENRANGELOOSE]:re[HYPHENRANGE];range=range.replace(hr,hyphenReplace);;range=range.replace(re[COMPARATORTRIM],comparatorTrimReplace);;range=range.replace(re[TILDETRIM],tildeTrimReplace);range=range.replace(re[CARETTRIM],caretTrimReplace);range=range.split(/\s+/).join(' ');var compRe=loose?re[COMPARATORLOOSE]:re[COMPARATOR];var set=range.split(' ').map(function(comp){return parseComparator(comp,loose);}).join(' ').split(/\s+/);if(this.loose){set=set.filter(function(comp){return!!comp.match(compRe);});}set=set.map(function(comp){return new Comparator(comp,loose);});return set;};exports.toComparators=toComparators;function toComparators(range,loose){return new Range(range,loose).set.map(function(comp){return comp.map(function(c){return c.value;}).join(' ').trim().split(' ');});}function parseComparator(comp,loose){;comp=replaceCarets(comp,loose);;comp=replaceTildes(comp,loose);;comp=replaceXRanges(comp,loose);;comp=replaceStars(comp,loose);;return comp;}function isX(id){return!id||id.toLowerCase()==='x'||id==='*';}function replaceTildes(comp,loose){return comp.trim().split(/\s+/).map(function(comp){return replaceTilde(comp,loose);}).join(' ');}function replaceTilde(comp,loose){var r=loose?re[TILDELOOSE]:re[TILDE];return comp.replace(r,function(_,M,m,p,pr){;var ret;if(isX(M))ret='';else if(isX(m))ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';else if(isX(p))ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';else if(pr){;if(pr.charAt(0)!=='-')pr='-'+pr;ret='>='+M+'.'+m+'.'+p+pr+' <'+M+'.'+(+m+1)+'.0';}else ret='>='+M+'.'+m+'.'+p+' <'+M+'.'+(+m+1)+'.0';;return ret;});}function replaceCarets(comp,loose){return comp.trim().split(/\s+/).map(function(comp){return replaceCaret(comp,loose);}).join(' ');}function replaceCaret(comp,loose){;var r=loose?re[CARETLOOSE]:re[CARET];return comp.replace(r,function(_,M,m,p,pr){;var ret;if(isX(M))ret='';else if(isX(m))ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';else if(isX(p)){if(M==='0')ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';else ret='>='+M+'.'+m+'.0 <'+(+M+1)+'.0.0';}else if(pr){;if(pr.charAt(0)!=='-')pr='-'+pr;if(M==='0'){if(m==='0')ret='>='+M+'.'+m+'.'+p+pr+' <'+M+'.'+m+'.'+(+p+1);else ret='>='+M+'.'+m+'.'+p+pr+' <'+M+'.'+(+m+1)+'.0';}else ret='>='+M+'.'+m+'.'+p+pr+' <'+(+M+1)+'.0.0';}else{;if(M==='0'){if(m==='0')ret='>='+M+'.'+m+'.'+p+' <'+M+'.'+m+'.'+(+p+1);else ret='>='+M+'.'+m+'.'+p+' <'+M+'.'+(+m+1)+'.0';}else ret='>='+M+'.'+m+'.'+p+' <'+(+M+1)+'.0.0';};return ret;});}function replaceXRanges(comp,loose){;return comp.split(/\s+/).map(function(comp){return replaceXRange(comp,loose);}).join(' ');}function replaceXRange(comp,loose){comp=comp.trim();var r=loose?re[XRANGELOOSE]:re[XRANGE];return comp.replace(r,function(ret,gtlt,M,m,p,pr){;var xM=isX(M);var xm=xM||isX(m);var xp=xm||isX(p);var anyX=xp;if(gtlt==='='&&anyX)gtlt='';if(xM){if(gtlt==='>'||gtlt==='<'){ret='<0.0.0';}else{ret='*';}}else if(gtlt&&anyX){if(xm)m=0;if(xp)p=0;if(gtlt==='>'){gtlt='>=';if(xm){M=+M+1;m=0;p=0;}else if(xp){m=+m+1;p=0;}}else if(gtlt==='<='){gtlt='<';if(xm)M=+M+1;else m=+m+1;}ret=gtlt+M+'.'+m+'.'+p;}else if(xm){ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';}else if(xp){ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';};return ret;});}function replaceStars(comp,loose){;return comp.trim().replace(re[STAR],'');}function hyphenReplace($0,from,fM,fm,fp,fpr,fb,to,tM,tm,tp,tpr,tb){if(isX(fM))from='';else if(isX(fm))from='>='+fM+'.0.0';else if(isX(fp))from='>='+fM+'.'+fm+'.0';else from='>='+from;if(isX(tM))to='';else if(isX(tm))to='<'+(+tM+1)+'.0.0';else if(isX(tp))to='<'+tM+'.'+(+tm+1)+'.0';else if(tpr)to='<='+tM+'.'+tm+'.'+tp+'-'+tpr;else to='<='+to;return(from+' '+to).trim();}Range.prototype.test=function(version){if(!version)return false;if(typeof version==='string')version=new SemVer(version,this.loose);for(var i=0;i<this.set.length;i++){if(testSet(this.set[i],version))return true;}return false;};function testSet(set,version){for(var i=0;i<set.length;i++){if(!set[i].test(version))return false;}if(version.prerelease.length){for(var i=0;i<set.length;i++){;if(set[i].semver===ANY)continue;if(set[i].semver.prerelease.length>0){var allowed=set[i].semver;if(allowed.major===version.major&&allowed.minor===version.minor&&allowed.patch===version.patch)return true;}}return false;}return true;}exports.satisfies=satisfies;function satisfies(version,range,loose){try{range=new Range(range,loose);}catch(er){return false;}return range.test(version);}exports.maxSatisfying=maxSatisfying;function maxSatisfying(versions,range,loose){return versions.filter(function(version){return satisfies(version,range,loose);}).sort(function(a,b){return rcompare(a,b,loose);})[0]||null;}exports.validRange=validRange;function validRange(range,loose){try{return new Range(range,loose).range||'*';}catch(er){return null;}}exports.ltr=ltr;function ltr(version,range,loose){return outside(version,range,'<',loose);}exports.gtr=gtr;function gtr(version,range,loose){return outside(version,range,'>',loose);}exports.outside=outside;function outside(version,range,hilo,loose){version=new SemVer(version,loose);range=new Range(range,loose);var gtfn,ltefn,ltfn,comp,ecomp;switch(hilo){case'>':gtfn=gt;ltefn=lte;ltfn=lt;comp='>';ecomp='>=';break;case'<':gtfn=lt;ltefn=gte;ltfn=gt;comp='<';ecomp='<=';break;default:throw new TypeError('Must provide a hilo val of "<" or ">"');}if(satisfies(version,range,loose)){return false;}for(var i=0;i<range.set.length;++i){var comparators=range.set[i];var high=null;var low=null;comparators.forEach(function(comparator){if(comparator.semver===ANY){comparator=new Comparator('>=0.0.0');}high=high||comparator;low=low||comparator;if(gtfn(comparator.semver,high.semver,loose)){high=comparator;}else if(ltfn(comparator.semver,low.semver,loose)){low=comparator;}});if(high.operator===comp||high.operator===ecomp){return false;}if((!low.operator||low.operator===comp)&&ltefn(version,low.semver)){return false;}else if(low.operator===ecomp&&ltfn(version,low.semver)){return false;}}return true;}if(typeof define==='function'&&define.amd)define(exports);})((typeof exports==="undefined"?"undefined":_typeof(exports))==='object'?exports:typeof define==='function'&&define.amd?{}:semver={});},{}],59:[function(require,module,exports){if(typeof Object.create==='function'){module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}},{}],60:[function(require,module,exports){module.exports=function isBuffer(arg){return arg&&(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';};},{}],61:[function(require,module,exports){(function(process,global){var formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};exports.deprecate=function(fn,msg){if(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};function inspect(obj,opts){var ctx={seen:[],stylize:stylizeNoColor};if(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){ctx.showHidden=opts;}else if(opts){exports._extend(ctx,opts);}if(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;inspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};inspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta','regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return"\x1B["+inspect.colors[style][0]+'m'+str+"\x1B["+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){if(ctx.customInspect&&value&&isFunction(value.inspect)&&value.inspect!==exports.inspect&&!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}var primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}var keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}if(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}if(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];if(isArray(value)){array=true;braces=['[',']'];}if(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}if(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}if(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}if(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');if(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\n')>-1){if(array){str=str.split('\n').map(function(line){return'  '+line;}).join('\n').substr(2);}else{str='\n'+str.split('\n').map(function(line){return'   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\n')>=0)numLinesEst++;return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}function isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol'||typeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=require('./support/isBuffer');function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<10?'0'+n.toString(10):n.toString(10);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];function timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return[d.getDate(),months[d.getMonth()],time].join(' ');}exports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};exports.inherits=require('inherits');exports._extend=function(origin,add){if(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}}).call(this,require('_process'),typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{"./support/isBuffer":60,"_process":52,"inherits":59}]},{},[25]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,